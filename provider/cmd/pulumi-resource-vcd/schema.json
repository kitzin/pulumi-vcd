{
    "name": "vcd",
    "description": "A Pulumi package for creating and managing vmware cloud directory resources.",
    "keywords": [
        "pulumi",
        "vcd",
        "vmware",
        "category/cloud"
    ],
    "homepage": "https://github.com/kitzin/pulumi-vcd",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`vcd` Terraform Provider](https://github.com/kitzin/terraform-provider-vcd).",
    "repository": "https://github.com/kitzin/pulumi-vcd",
    "publisher": "kitzin",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-vcd/sdk/go/vcd"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing vmware cloud directory resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/kitzin/terraform-provider-vcd)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vcd` repo](https://github.com/kitzin/pulumi-vcd/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vcd` repo](https://github.com/kitzin/terraform-provider-vcd/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/kitzin/terraform-provider-vcd)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vcd` repo](https://github.com/kitzin/pulumi-vcd/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vcd` repo](https://github.com/kitzin/terraform-provider-vcd/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "allowUnverifiedSsl": {
                "type": "boolean",
                "description": "If set, VCDClient will permit unverifiable SSL certificates.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)\n"
            },
            "authType": {
                "type": "string",
                "description": "'integrated', 'saml_adfs', 'token', and 'api_token' are the only ones supported now. 'integrated' is default.\n"
            },
            "importSeparator": {
                "type": "string",
                "description": "Defines the import separation string to be used with 'terraform import'\n"
            },
            "logging": {
                "type": "boolean",
                "description": "If set, it will enable logging of API requests and responses\n"
            },
            "loggingFile": {
                "type": "string",
                "description": "Defines the full name of the logging file for API calls (requires 'logging')\n"
            },
            "maxRetryTimeout": {
                "type": "integer",
                "description": "Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)\n"
            },
            "org": {
                "type": "string",
                "description": "The VCD Org for API operations\n"
            },
            "password": {
                "type": "string",
                "description": "The user password for VCD API operations.\n"
            },
            "samlAdfsRptId": {
                "type": "string",
                "description": "Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs\n"
            },
            "sysorg": {
                "type": "string",
                "description": "The VCD Org for user authentication\n"
            },
            "token": {
                "type": "string",
                "description": "The token used instead of username/password for VCD API operations.\n"
            },
            "url": {
                "type": "string",
                "description": "The VCD url for VCD API operations.\n"
            },
            "user": {
                "type": "string",
                "description": "The user name for VCD API operations.\n"
            },
            "vdc": {
                "type": "string",
                "description": "The VDC for API operations\n"
            }
        },
        "defaults": [
            "org",
            "url"
        ]
    },
    "types": {
        "vcd:index/CatalogAccessControlSharedWith:CatalogAccessControlSharedWith": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "subjectName"
                    ]
                }
            }
        },
        "vcd:index/CatalogItemMetadataEntry:CatalogItemMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/CatalogMediaMetadataEntry:CatalogMediaMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/CatalogMetadataEntry:CatalogMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/CatalogVappTemplateMetadataEntry:CatalogVappTemplateMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/EdgeGatewayExternalNetwork:EdgeGatewayExternalNetwork": {
            "properties": {
                "enableRateLimit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "incomingRateLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "outgoingRateLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayExternalNetworkSubnet:EdgeGatewayExternalNetworkSubnet"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "subnets"
                    ]
                }
            }
        },
        "vcd:index/EdgeGatewayExternalNetworkSubnet:EdgeGatewayExternalNetworkSubnet": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "netmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "suballocatePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayExternalNetworkSubnetSuballocatePool:EdgeGatewayExternalNetworkSubnetSuballocatePool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "useForDefaultRoute": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "netmask"
            ]
        },
        "vcd:index/EdgeGatewayExternalNetworkSubnetSuballocatePool:EdgeGatewayExternalNetworkSubnetSuballocatePool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/EdgeGatewayVpnLocalSubnet:EdgeGatewayVpnLocalSubnet": {
            "properties": {
                "localSubnetGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetMask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localSubnetGateway",
                "localSubnetMask",
                "localSubnetName"
            ]
        },
        "vcd:index/EdgeGatewayVpnPeerSubnet:EdgeGatewayVpnPeerSubnet": {
            "properties": {
                "peerSubnetGateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSubnetMask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerSubnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "peerSubnetGateway",
                "peerSubnetMask",
                "peerSubnetName"
            ]
        },
        "vcd:index/ExternalNetworkIpScope:ExternalNetworkIpScope": {
            "properties": {
                "dns1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "dns2": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "dnsSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "netmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkIpScopeStaticIpPool:ExternalNetworkIpScopeStaticIpPool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "netmask"
            ]
        },
        "vcd:index/ExternalNetworkIpScopeStaticIpPool:ExternalNetworkIpScopeStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/ExternalNetworkV2IpScope:ExternalNetworkV2IpScope": {
            "properties": {
                "dns1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns2": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkV2IpScopeStaticIpPool:ExternalNetworkV2IpScopeStaticIpPool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "prefixLength"
            ]
        },
        "vcd:index/ExternalNetworkV2IpScopeStaticIpPool:ExternalNetworkV2IpScopeStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/ExternalNetworkV2NsxtNetwork:ExternalNetworkV2NsxtNetwork": {
            "properties": {
                "nsxtManagerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nsxtSegmentName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "nsxtTier0RouterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "nsxtManagerId"
            ]
        },
        "vcd:index/ExternalNetworkV2VsphereNetwork:ExternalNetworkV2VsphereNetwork": {
            "properties": {
                "portgroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vcenterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "portgroupId",
                "vcenterId"
            ]
        },
        "vcd:index/ExternalNetworkVsphereNetwork:ExternalNetworkVsphereNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vcenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "vcenter"
            ]
        },
        "vcd:index/IndependentDiskMetadataEntry:IndependentDiskMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/LbServerPoolMember:LbServerPoolMember": {
            "properties": {
                "condition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConnections": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minConnections": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "ipAddress",
                "monitorPort",
                "name",
                "port",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "condition",
                        "id",
                        "ipAddress",
                        "monitorPort",
                        "name",
                        "port",
                        "weight"
                    ]
                }
            }
        },
        "vcd:index/NetworkDirectMetadataEntry:NetworkDirectMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NetworkIsolatedDhcpPool:NetworkIsolatedDhcpPool": {
            "properties": {
                "defaultLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NetworkIsolatedMetadataEntry:NetworkIsolatedMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NetworkIsolatedStaticIpPool:NetworkIsolatedStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NetworkIsolatedV2MetadataEntry:NetworkIsolatedV2MetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NetworkIsolatedV2StaticIpPool:NetworkIsolatedV2StaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NetworkRoutedDhcpPool:NetworkRoutedDhcpPool": {
            "properties": {
                "defaultLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultLeaseTime",
                        "endAddress",
                        "startAddress"
                    ]
                }
            }
        },
        "vcd:index/NetworkRoutedMetadataEntry:NetworkRoutedMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NetworkRoutedStaticIpPool:NetworkRoutedStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NetworkRoutedV2MetadataEntry:NetworkRoutedV2MetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NetworkRoutedV2StaticIpPool:NetworkRoutedV2StaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NsxtAlbPoolHealthMonitor:NsxtAlbPoolHealthMonitor": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemDefined": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "systemDefined",
                        "type"
                    ]
                }
            }
        },
        "vcd:index/NsxtAlbPoolMember:NsxtAlbPoolMember": {
            "properties": {
                "detailedHealthMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markedDownBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ratio": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "detailedHealthMessage",
                        "healthStatus",
                        "ipAddress",
                        "markedDownBies"
                    ]
                }
            }
        },
        "vcd:index/NsxtAlbPoolPersistenceProfile:NsxtAlbPoolPersistenceProfile": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "vcd:index/NsxtAlbVirtualServiceServicePort:NsxtAlbVirtualServiceServicePort": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "startPort",
                "type"
            ]
        },
        "vcd:index/NsxtAppPortProfileAppPort:NsxtAppPortProfileAppPort": {
            "properties": {
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "vcd:index/NsxtDistributedFirewallRule:NsxtDistributedFirewallRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appPortProfileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationGroupsExcluded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkContextProfileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceGroupsExcluded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "vcd:index/NsxtDynamicSecurityGroupCriteria:NsxtDynamicSecurityGroupCriteria": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtDynamicSecurityGroupCriteriaRule:NsxtDynamicSecurityGroupCriteriaRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NsxtDynamicSecurityGroupCriteriaRule:NsxtDynamicSecurityGroupCriteriaRule": {
            "properties": {
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator",
                "type",
                "value"
            ]
        },
        "vcd:index/NsxtDynamicSecurityGroupMemberVm:NsxtDynamicSecurityGroupMemberVm": {
            "properties": {
                "vappId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vappId",
                        "vappName",
                        "vmId",
                        "vmName"
                    ]
                }
            }
        },
        "vcd:index/NsxtEdgegatewayBgpIpPrefixListIpPrefix:NsxtEdgegatewayBgpIpPrefixListIpPrefix": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "greaterThanOrEqualTo": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lessThanOrEqualTo": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "network"
            ]
        },
        "vcd:index/NsxtEdgegatewaySubnet:NsxtEdgegatewaySubnet": {
            "properties": {
                "allocatedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtEdgegatewaySubnetAllocatedIp:NsxtEdgegatewaySubnetAllocatedIp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocatedIps",
                "gateway",
                "prefixLength"
            ]
        },
        "vcd:index/NsxtEdgegatewaySubnetAllocatedIp:NsxtEdgegatewaySubnetAllocatedIp": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NsxtFirewallRule:NsxtFirewallRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appPortProfileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "direction",
                "ipProtocol",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "direction",
                        "id",
                        "ipProtocol",
                        "name"
                    ]
                }
            }
        },
        "vcd:index/NsxtIpsecVpnTunnelSecurityProfileCustomization:NsxtIpsecVpnTunnelSecurityProfileCustomization": {
            "properties": {
                "dpdProbeInternal": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeDhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeDigestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeEncryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeSaLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDfPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDigestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelEncryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelPfsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelSaLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ikeDhGroups",
                "ikeEncryptionAlgorithms",
                "ikeVersion",
                "tunnelDhGroups",
                "tunnelEncryptionAlgorithms"
            ]
        },
        "vcd:index/NsxtNetworkDhcpPool:NsxtNetworkDhcpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NsxtNetworkImportedStaticIpPool:NsxtNetworkImportedStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/NsxtSecurityGroupMemberVm:NsxtSecurityGroupMemberVm": {
            "properties": {
                "vappId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vappId",
                        "vappName",
                        "vmId",
                        "vmName"
                    ]
                }
            }
        },
        "vcd:index/NsxvDhcpRelayRelayAgent:NsxvDhcpRelayRelayAgent": {
            "properties": {
                "gatewayIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gatewayIpAddress",
                        "networkName"
                    ]
                }
            }
        },
        "vcd:index/NsxvFirewallRuleDestination:NsxvFirewallRuleDestination": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayInterfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/NsxvFirewallRuleService:NsxvFirewallRuleService": {
            "properties": {
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port",
                        "protocol",
                        "sourcePort"
                    ]
                }
            }
        },
        "vcd:index/NsxvFirewallRuleSource:NsxvFirewallRuleSource": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayInterfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/OrgLdapCustomSettings:OrgLdapCustomSettings": {
            "properties": {
                "authenticationMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseDistinguishedName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupAttributes": {
                    "$ref": "#/types/vcd:index/OrgLdapCustomSettingsGroupAttributes:OrgLdapCustomSettingsGroupAttributes",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSsl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAttributes": {
                    "$ref": "#/types/vcd:index/OrgLdapCustomSettingsUserAttributes:OrgLdapCustomSettingsUserAttributes",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authenticationMethod",
                "connectorType",
                "groupAttributes",
                "port",
                "server",
                "userAttributes"
            ]
        },
        "vcd:index/OrgLdapCustomSettingsGroupAttributes:OrgLdapCustomSettingsGroupAttributes": {
            "properties": {
                "groupBackLinkIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMembershipIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "membership": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uniqueIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupMembershipIdentifier",
                "membership",
                "name",
                "objectClass",
                "uniqueIdentifier"
            ]
        },
        "vcd:index/OrgLdapCustomSettingsUserAttributes:OrgLdapCustomSettingsUserAttributes": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "givenName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBackLinkIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMembershipIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "surname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "telephone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uniqueIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "email",
                "givenName",
                "groupMembershipIdentifier",
                "objectClass",
                "surname",
                "telephone",
                "uniqueIdentifier",
                "username"
            ]
        },
        "vcd:index/OrgMetadataEntry:OrgMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/OrgVappLease:OrgVappLease": {
            "properties": {
                "deleteOnStorageLeaseExpiration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumRuntimeLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumStorageLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "powerOffOnRuntimeLeaseExpiration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteOnStorageLeaseExpiration",
                "maximumRuntimeLeaseInSec",
                "maximumStorageLeaseInSec",
                "powerOffOnRuntimeLeaseExpiration"
            ]
        },
        "vcd:index/OrgVappTemplateLease:OrgVappTemplateLease": {
            "properties": {
                "deleteOnStorageLeaseExpiration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumStorageLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteOnStorageLeaseExpiration",
                "maximumStorageLeaseInSec"
            ]
        },
        "vcd:index/OrgVdcAccessControlSharedWith:OrgVdcAccessControlSharedWith": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "subjectName"
                    ]
                }
            }
        },
        "vcd:index/OrgVdcComputeCapacity:OrgVdcComputeCapacity": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/vcd:index/OrgVdcComputeCapacityCpu:OrgVdcComputeCapacityCpu",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "$ref": "#/types/vcd:index/OrgVdcComputeCapacityMemory:OrgVdcComputeCapacityMemory",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ]
        },
        "vcd:index/OrgVdcComputeCapacityCpu:OrgVdcComputeCapacityCpu": {
            "properties": {
                "allocated": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reserved": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allocated",
                        "limit",
                        "reserved",
                        "used"
                    ]
                }
            }
        },
        "vcd:index/OrgVdcComputeCapacityMemory:OrgVdcComputeCapacityMemory": {
            "properties": {
                "allocated": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reserved": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allocated",
                        "limit",
                        "reserved",
                        "used"
                    ]
                }
            }
        },
        "vcd:index/OrgVdcMetadataEntry:OrgVdcMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/OrgVdcStorageProfile:OrgVdcStorageProfile": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageUsedInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "limit",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "limit",
                        "name",
                        "storageUsedInMb"
                    ]
                }
            }
        },
        "vcd:index/VappAccessControlSharedWith:VappAccessControlSharedWith": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "subjectName"
                    ]
                }
            }
        },
        "vcd:index/VappFirewallRulesRule:VappFirewallRulesRule": {
            "properties": {
                "destinationIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationVmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationVmIpType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationVmNicId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableLogging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceVmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceVmIpType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceVmNicId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/VappLease:VappLease": {
            "properties": {
                "runtimeLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "runtimeLeaseInSec",
                "storageLeaseInSec"
            ]
        },
        "vcd:index/VappMetadataEntry:VappMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/VappNatRulesRule:VappNatRulesRule": {
            "properties": {
                "externalIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forwardToPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappingMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmNicId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "vmId",
                "vmNicId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalIp",
                        "id",
                        "vmId",
                        "vmNicId"
                    ]
                }
            }
        },
        "vcd:index/VappNetworkDhcpPool:VappNetworkDhcpPool": {
            "properties": {
                "defaultLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "startAddress"
            ]
        },
        "vcd:index/VappNetworkStaticIpPool:VappNetworkStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ]
        },
        "vcd:index/VappStaticRoutingRule:VappStaticRoutingRule": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "networkCidr",
                "nextHopIp"
            ]
        },
        "vcd:index/VappVmCustomization:VappVmCustomization": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLocalAdminPassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoGeneratePassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "changeSid": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initscript": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainAccountOu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainUser": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinOrgDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustChangePasswordOnFirstLogin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfAutoLogons": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword",
                        "allowLocalAdminPassword",
                        "autoGeneratePassword",
                        "changeSid",
                        "enabled",
                        "initscript",
                        "joinDomain",
                        "joinDomainAccountOu",
                        "joinDomainName",
                        "joinDomainPassword",
                        "joinDomainUser",
                        "joinOrgDomain",
                        "mustChangePasswordOnFirstLogin",
                        "numberOfAutoLogons"
                    ]
                }
            }
        },
        "vcd:index/VappVmDisk:VappVmDisk": {
            "properties": {
                "busNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "name",
                "unitNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "busNumber",
                        "name",
                        "sizeInMb",
                        "unitNumber"
                    ]
                }
            }
        },
        "vcd:index/VappVmInternalDisk:VappVmInternalDisk": {
            "properties": {
                "busNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "busType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thinProvisioned": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "busNumber",
                        "busType",
                        "diskId",
                        "iops",
                        "sizeInMb",
                        "storageProfile",
                        "thinProvisioned",
                        "unitNumber"
                    ]
                }
            }
        },
        "vcd:index/VappVmMetadataEntry:VappVmMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/VappVmNetwork:VappVmNetwork": {
            "properties": {
                "adapterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAllocationMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isPrimary": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adapterType",
                        "ip",
                        "isPrimary",
                        "mac",
                        "type"
                    ]
                }
            }
        },
        "vcd:index/VappVmOverrideTemplateDisk:VappVmOverrideTemplateDisk": {
            "properties": {
                "busNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "busType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "iops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "unitNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "busType",
                "sizeInMb",
                "unitNumber"
            ]
        },
        "vcd:index/VdcGroupParticipatingOrgVdc:VdcGroupParticipatingOrgVdc": {
            "properties": {
                "faultDomainTag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isRemoteOrg": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkProviderScope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vdcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vdcName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "faultDomainTag",
                        "isRemoteOrg",
                        "networkProviderScope",
                        "orgId",
                        "orgName",
                        "siteId",
                        "siteName",
                        "status",
                        "vdcId",
                        "vdcName"
                    ]
                }
            }
        },
        "vcd:index/VmCustomization:VmCustomization": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLocalAdminPassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoGeneratePassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "changeSid": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initscript": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainAccountOu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainUser": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinOrgDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustChangePasswordOnFirstLogin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfAutoLogons": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword",
                        "allowLocalAdminPassword",
                        "autoGeneratePassword",
                        "changeSid",
                        "enabled",
                        "initscript",
                        "joinDomain",
                        "joinDomainAccountOu",
                        "joinDomainName",
                        "joinDomainPassword",
                        "joinDomainUser",
                        "joinOrgDomain",
                        "mustChangePasswordOnFirstLogin",
                        "numberOfAutoLogons"
                    ]
                }
            }
        },
        "vcd:index/VmDisk:VmDisk": {
            "properties": {
                "busNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "name",
                "unitNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "busNumber",
                        "name",
                        "sizeInMb",
                        "unitNumber"
                    ]
                }
            }
        },
        "vcd:index/VmInternalDisk:VmInternalDisk": {
            "properties": {
                "busNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "busType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thinProvisioned": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "busNumber",
                        "busType",
                        "diskId",
                        "iops",
                        "sizeInMb",
                        "storageProfile",
                        "thinProvisioned",
                        "unitNumber"
                    ]
                }
            }
        },
        "vcd:index/VmMetadataEntry:VmMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/VmNetwork:VmNetwork": {
            "properties": {
                "adapterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAllocationMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isPrimary": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adapterType",
                        "ip",
                        "isPrimary",
                        "mac",
                        "type"
                    ]
                }
            }
        },
        "vcd:index/VmOverrideTemplateDisk:VmOverrideTemplateDisk": {
            "properties": {
                "busNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "busType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "iops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "unitNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "busType",
                "sizeInMb",
                "unitNumber"
            ]
        },
        "vcd:index/VmSizingPolicyCpu:VmSizingPolicyCpu": {
            "properties": {
                "coresPerSocket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "count": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "limitInMhz": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "reservationGuarantee": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "shares": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "speedInMhz": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "vcd:index/VmSizingPolicyMemory:VmSizingPolicyMemory": {
            "properties": {
                "limitInMb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "reservationGuarantee": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "shares": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "sizeInMb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "vcd:index/getCatalogFilter:getCatalogFilter": {
            "properties": {
                "date": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "earliest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getCatalogFilterMetadata:getCatalogFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getCatalogFilterMetadata:getCatalogFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getCatalogItemFilter:getCatalogItemFilter": {
            "properties": {
                "date": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "earliest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getCatalogItemFilterMetadata:getCatalogItemFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getCatalogItemFilterMetadata:getCatalogItemFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getCatalogItemMetadataEntry:getCatalogItemMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getCatalogMediaFilter:getCatalogMediaFilter": {
            "properties": {
                "date": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "earliest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getCatalogMediaFilterMetadata:getCatalogMediaFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getCatalogMediaFilterMetadata:getCatalogMediaFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getCatalogMediaMetadataEntry:getCatalogMediaMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getCatalogMetadataEntry:getCatalogMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getCatalogVappTemplateFilter:getCatalogVappTemplateFilter": {
            "properties": {
                "date": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "earliest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getCatalogVappTemplateFilterMetadata:getCatalogVappTemplateFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getCatalogVappTemplateFilterMetadata:getCatalogVappTemplateFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getCatalogVappTemplateMetadataEntry:getCatalogVappTemplateMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getEdgegatewayExternalNetwork:getEdgegatewayExternalNetwork": {
            "properties": {
                "enableRateLimit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incomingRateLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outgoingRateLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getEdgegatewayExternalNetworkSubnet:getEdgegatewayExternalNetworkSubnet"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableRateLimit",
                "incomingRateLimit",
                "name",
                "outgoingRateLimit",
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getEdgegatewayExternalNetworkSubnet:getEdgegatewayExternalNetworkSubnet": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suballocatePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getEdgegatewayExternalNetworkSubnetSuballocatePool:getEdgegatewayExternalNetworkSubnetSuballocatePool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useForDefaultRoute": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "ipAddress",
                "netmask",
                "suballocatePools",
                "useForDefaultRoute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getEdgegatewayExternalNetworkSubnetSuballocatePool:getEdgegatewayExternalNetworkSubnetSuballocatePool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getEdgegatewayFilter:getEdgegatewayFilter": {
            "properties": {
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getExternalNetworkIpScope:getExternalNetworkIpScope": {
            "properties": {
                "dns1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns2": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getExternalNetworkIpScopeStaticIpPool:getExternalNetworkIpScopeStaticIpPool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dns1",
                "dns2",
                "dnsSuffix",
                "gateway",
                "netmask",
                "staticIpPools"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getExternalNetworkIpScopeStaticIpPool:getExternalNetworkIpScopeStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getExternalNetworkV2IpScope:getExternalNetworkV2IpScope": {
            "properties": {
                "dns1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns2": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsSuffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getExternalNetworkV2IpScopeStaticIpPool:getExternalNetworkV2IpScopeStaticIpPool"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "prefixLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getExternalNetworkV2IpScopeStaticIpPool:getExternalNetworkV2IpScopeStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getExternalNetworkV2NsxtNetwork:getExternalNetworkV2NsxtNetwork": {
            "properties": {
                "nsxtManagerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nsxtSegmentName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nsxtTier0RouterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nsxtManagerId",
                "nsxtSegmentName",
                "nsxtTier0RouterId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getExternalNetworkV2VsphereNetwork:getExternalNetworkV2VsphereNetwork": {
            "properties": {
                "portgroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcenterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "portgroupId",
                "vcenterId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getExternalNetworkVsphereNetwork:getExternalNetworkVsphereNetwork": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "vcenter"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getIndependentDiskMetadataEntry:getIndependentDiskMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getLbServerPoolMember:getLbServerPoolMember": {
            "properties": {
                "condition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConnections": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minConnections": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "id",
                "ipAddress",
                "maxConnections",
                "minConnections",
                "monitorPort",
                "name",
                "port",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkDirectFilter:getNetworkDirectFilter": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getNetworkDirectFilterMetadata:getNetworkDirectFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getNetworkDirectFilterMetadata:getNetworkDirectFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getNetworkDirectMetadataEntry:getNetworkDirectMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkIsolatedDhcpPool:getNetworkIsolatedDhcpPool": {
            "properties": {
                "defaultLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultLeaseTime",
                "endAddress",
                "maxLeaseTime",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkIsolatedFilter:getNetworkIsolatedFilter": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getNetworkIsolatedFilterMetadata:getNetworkIsolatedFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getNetworkIsolatedFilterMetadata:getNetworkIsolatedFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getNetworkIsolatedMetadataEntry:getNetworkIsolatedMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkIsolatedStaticIpPool:getNetworkIsolatedStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkIsolatedV2Filter:getNetworkIsolatedV2Filter": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getNetworkIsolatedV2MetadataEntry:getNetworkIsolatedV2MetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkIsolatedV2StaticIpPool:getNetworkIsolatedV2StaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkRoutedDhcpPool:getNetworkRoutedDhcpPool": {
            "properties": {
                "defaultLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultLeaseTime",
                "endAddress",
                "maxLeaseTime",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkRoutedFilter:getNetworkRoutedFilter": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getNetworkRoutedFilterMetadata:getNetworkRoutedFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getNetworkRoutedFilterMetadata:getNetworkRoutedFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getNetworkRoutedMetadataEntry:getNetworkRoutedMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkRoutedStaticIpPool:getNetworkRoutedStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkRoutedV2Filter:getNetworkRoutedV2Filter": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getNetworkRoutedV2MetadataEntry:getNetworkRoutedV2MetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNetworkRoutedV2StaticIpPool:getNetworkRoutedV2StaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtAlbPoolHealthMonitor:getNsxtAlbPoolHealthMonitor": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemDefined": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "systemDefined",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtAlbPoolMember:getNsxtAlbPoolMember": {
            "properties": {
                "detailedHealthMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markedDownBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ratio": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "detailedHealthMessage",
                "enabled",
                "healthStatus",
                "ipAddress",
                "markedDownBies",
                "port",
                "ratio"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtAlbPoolPersistenceProfile:getNsxtAlbPoolPersistenceProfile": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtAlbVirtualServiceServicePort:getNsxtAlbVirtualServiceServicePort": {
            "properties": {
                "endPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endPort",
                "sslEnabled",
                "startPort",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtAppPortProfileAppPort:getNsxtAppPortProfileAppPort": {
            "properties": {
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtDistributedFirewallRule:getNsxtDistributedFirewallRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appPortProfileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationGroupsExcluded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkContextProfileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceGroupsExcluded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "appPortProfileIds",
                "comment",
                "description",
                "destinationGroupsExcluded",
                "destinationIds",
                "direction",
                "enabled",
                "id",
                "ipProtocol",
                "logging",
                "name",
                "networkContextProfileIds",
                "sourceGroupsExcluded",
                "sourceIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtDynamicSecurityGroupCriteria:getNsxtDynamicSecurityGroupCriteria": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getNsxtDynamicSecurityGroupCriteriaRule:getNsxtDynamicSecurityGroupCriteriaRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtDynamicSecurityGroupCriteriaRule:getNsxtDynamicSecurityGroupCriteriaRule": {
            "properties": {
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtDynamicSecurityGroupMemberVm:getNsxtDynamicSecurityGroupMemberVm": {
            "properties": {
                "vappId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "vappId",
                "vappName",
                "vmId",
                "vmName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtEdgegatewayBgpIpPrefixListIpPrefix:getNsxtEdgegatewayBgpIpPrefixListIpPrefix": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "greaterThanOrEqualTo": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lessThanOrEqualTo": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "greaterThanOrEqualTo",
                "lessThanOrEqualTo",
                "network"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtEdgegatewaySubnet:getNsxtEdgegatewaySubnet": {
            "properties": {
                "allocatedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getNsxtEdgegatewaySubnetAllocatedIp:getNsxtEdgegatewaySubnetAllocatedIp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocatedIps",
                "gateway",
                "prefixLength",
                "primaryIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtEdgegatewaySubnetAllocatedIp:getNsxtEdgegatewaySubnetAllocatedIp": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtFirewallRule:getNsxtFirewallRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appPortProfileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "appPortProfileIds",
                "destinationIds",
                "direction",
                "enabled",
                "id",
                "ipProtocol",
                "logging",
                "name",
                "sourceIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtIpsecVpnTunnelSecurityProfileCustomization:getNsxtIpsecVpnTunnelSecurityProfileCustomization": {
            "properties": {
                "dpdProbeInternal": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeDhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeDigestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeEncryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeSaLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDfPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelDigestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelEncryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelPfsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tunnelSaLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dpdProbeInternal",
                "ikeDhGroups",
                "ikeDigestAlgorithms",
                "ikeEncryptionAlgorithms",
                "ikeSaLifetime",
                "ikeVersion",
                "tunnelDfPolicy",
                "tunnelDhGroups",
                "tunnelDigestAlgorithms",
                "tunnelEncryptionAlgorithms",
                "tunnelPfsEnabled",
                "tunnelSaLifetime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtNetworkDhcpPool:getNsxtNetworkDhcpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtNetworkImportedFilter:getNsxtNetworkImportedFilter": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getNsxtNetworkImportedStaticIpPool:getNsxtNetworkImportedStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxtSecurityGroupMemberVm:getNsxtSecurityGroupMemberVm": {
            "properties": {
                "vappId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "vappId",
                "vappName",
                "vmId",
                "vmName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxvDhcpRelayRelayAgent:getNsxvDhcpRelayRelayAgent": {
            "properties": {
                "gatewayIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gatewayIpAddress",
                "networkName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxvFirewallRuleDestination:getNsxvFirewallRuleDestination": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayInterfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exclude",
                "gatewayInterfaces",
                "ipAddresses",
                "ipSets",
                "orgNetworks",
                "vmIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxvFirewallRuleService:getNsxvFirewallRuleService": {
            "properties": {
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "protocol",
                "sourcePort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getNsxvFirewallRuleSource:getNsxvFirewallRuleSource": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayInterfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exclude",
                "gatewayInterfaces",
                "ipAddresses",
                "ipSets",
                "orgNetworks",
                "vmIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgLdapCustomSetting:getOrgLdapCustomSetting": {
            "properties": {
                "authenticationMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseDistinguishedName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectorType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getOrgLdapCustomSettingGroupAttribute:getOrgLdapCustomSettingGroupAttribute"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSsl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getOrgLdapCustomSettingUserAttribute:getOrgLdapCustomSettingUserAttribute"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authenticationMethod",
                "baseDistinguishedName",
                "connectorType",
                "groupAttributes",
                "isSsl",
                "password",
                "port",
                "server",
                "userAttributes",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgLdapCustomSettingGroupAttribute:getOrgLdapCustomSettingGroupAttribute": {
            "properties": {
                "groupBackLinkIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMembershipIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "membership": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uniqueIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupBackLinkIdentifier",
                "groupMembershipIdentifier",
                "membership",
                "name",
                "objectClass",
                "uniqueIdentifier"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgLdapCustomSettingUserAttribute:getOrgLdapCustomSettingUserAttribute": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "givenName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBackLinkIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupMembershipIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "surname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "telephone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uniqueIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "email",
                "givenName",
                "groupBackLinkIdentifier",
                "groupMembershipIdentifier",
                "objectClass",
                "surname",
                "telephone",
                "uniqueIdentifier",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgMetadataEntry:getOrgMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgVappLease:getOrgVappLease": {
            "properties": {
                "deleteOnStorageLeaseExpiration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumRuntimeLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumStorageLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "powerOffOnRuntimeLeaseExpiration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteOnStorageLeaseExpiration",
                "maximumRuntimeLeaseInSec",
                "maximumStorageLeaseInSec",
                "powerOffOnRuntimeLeaseExpiration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgVappTemplateLease:getOrgVappTemplateLease": {
            "properties": {
                "deleteOnStorageLeaseExpiration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumStorageLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteOnStorageLeaseExpiration",
                "maximumStorageLeaseInSec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgVdcComputeCapacity:getOrgVdcComputeCapacity": {
            "properties": {
                "cpus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getOrgVdcComputeCapacityCpus:getOrgVdcComputeCapacityCpus"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getOrgVdcComputeCapacityMemory:getOrgVdcComputeCapacityMemory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "memories"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgVdcComputeCapacityCpus:getOrgVdcComputeCapacityCpus": {
            "properties": {
                "allocated": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reserved": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocated",
                "limit",
                "reserved",
                "used"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgVdcComputeCapacityMemory:getOrgVdcComputeCapacityMemory": {
            "properties": {
                "allocated": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reserved": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocated",
                "limit",
                "reserved",
                "used"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getOrgVdcMetadataEntry:getOrgVdcMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getOrgVdcStorageProfile:getOrgVdcStorageProfile": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageUsedInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "enabled",
                "limit",
                "name",
                "storageUsedInMb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getProviderVdcComputeCapacity:getProviderVdcComputeCapacity": {
            "properties": {
                "cpus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getProviderVdcComputeCapacityCpus:getProviderVdcComputeCapacityCpus"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isElastic": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHa": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getProviderVdcComputeCapacityMemory:getProviderVdcComputeCapacityMemory"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "isElastic",
                "isHa",
                "memories"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getProviderVdcComputeCapacityCpus:getProviderVdcComputeCapacityCpus": {
            "properties": {
                "allocation": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overhead": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reserved": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocation",
                "overhead",
                "reserved",
                "total",
                "units",
                "used"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getProviderVdcComputeCapacityMemory:getProviderVdcComputeCapacityMemory": {
            "properties": {
                "allocation": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overhead": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reserved": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocation",
                "overhead",
                "reserved",
                "total",
                "units",
                "used"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getProviderVdcMetadataEntry:getProviderVdcMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getResourceSchemaAttribute:getResourceSchemaAttribute": {
            "properties": {
                "computed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "optional": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sensitive": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "computed",
                "description",
                "name",
                "optional",
                "required",
                "sensitive",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getResourceSchemaBlockAttribute:getResourceSchemaBlockAttribute": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getResourceSchemaBlockAttributeAttribute:getResourceSchemaBlockAttributeAttribute"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nestingMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "name",
                "nestingMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getResourceSchemaBlockAttributeAttribute:getResourceSchemaBlockAttributeAttribute": {
            "properties": {
                "computed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "optional": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sensitive": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "computed",
                "description",
                "name",
                "optional",
                "required",
                "sensitive",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getRightImpliedRight:getRightImpliedRight": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getStorageProfileIopsSetting:getStorageProfileIopsSetting": {
            "properties": {
                "defaultDiskIops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskIopsPerGbMax": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iopsLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iopsLimitingEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumDiskIops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultDiskIops",
                "diskIopsPerGbMax",
                "iopsLimit",
                "iopsLimitingEnabled",
                "maximumDiskIops"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getStorageProfileMetadataEntry:getStorageProfileMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getSubscribedCatalogFilter:getSubscribedCatalogFilter": {
            "properties": {
                "date": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "earliest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latest": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/getSubscribedCatalogFilterMetadata:getSubscribedCatalogFilterMetadata"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vcd:index/getSubscribedCatalogFilterMetadata:getSubscribedCatalogFilterMetadata": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useApiSearch": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vcd:index/getVappLease:getVappLease": {
            "properties": {
                "runtimeLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageLeaseInSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "runtimeLeaseInSec",
                "storageLeaseInSec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappMetadataEntry:getVappMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappNetworkDhcpPool:getVappNetworkDhcpPool": {
            "properties": {
                "defaultLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLeaseTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultLeaseTime",
                "enabled",
                "endAddress",
                "maxLeaseTime",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappNetworkStaticIpPool:getVappNetworkStaticIpPool": {
            "properties": {
                "endAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endAddress",
                "startAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappVmCustomization:getVappVmCustomization": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLocalAdminPassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoGeneratePassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "changeSid": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initscript": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainAccountOu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainUser": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinOrgDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustChangePasswordOnFirstLogin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfAutoLogons": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminPassword",
                "allowLocalAdminPassword",
                "autoGeneratePassword",
                "changeSid",
                "enabled",
                "force",
                "initscript",
                "joinDomain",
                "joinDomainAccountOu",
                "joinDomainName",
                "joinDomainPassword",
                "joinDomainUser",
                "joinOrgDomain",
                "mustChangePasswordOnFirstLogin",
                "numberOfAutoLogons"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappVmDisk:getVappVmDisk": {
            "properties": {
                "busNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "name",
                "sizeInMb",
                "unitNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappVmInternalDisk:getVappVmInternalDisk": {
            "properties": {
                "busNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "busType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thinProvisioned": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "busType",
                "diskId",
                "iops",
                "sizeInMb",
                "storageProfile",
                "thinProvisioned",
                "unitNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappVmMetadataEntry:getVappVmMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVappVmNetwork:getVappVmNetwork": {
            "properties": {
                "adapterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAllocationMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isPrimary": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adapterType",
                "connected",
                "ip",
                "ipAllocationMode",
                "isPrimary",
                "mac",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVdcGroupParticipatingOrgVdc:getVdcGroupParticipatingOrgVdc": {
            "properties": {
                "faultDomainTag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isRemoteOrg": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkProviderScope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vdcId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vdcName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "faultDomainTag",
                "isRemoteOrg",
                "networkProviderScope",
                "orgId",
                "orgName",
                "siteId",
                "siteName",
                "status",
                "vdcId",
                "vdcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmCustomization:getVmCustomization": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLocalAdminPassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoGeneratePassword": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "changeSid": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initscript": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainAccountOu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDomainUser": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinOrgDomain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustChangePasswordOnFirstLogin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfAutoLogons": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminPassword",
                "allowLocalAdminPassword",
                "autoGeneratePassword",
                "changeSid",
                "enabled",
                "force",
                "initscript",
                "joinDomain",
                "joinDomainAccountOu",
                "joinDomainName",
                "joinDomainPassword",
                "joinDomainUser",
                "joinOrgDomain",
                "mustChangePasswordOnFirstLogin",
                "numberOfAutoLogons"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmDisk:getVmDisk": {
            "properties": {
                "busNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "name",
                "sizeInMb",
                "unitNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmInternalDisk:getVmInternalDisk": {
            "properties": {
                "busNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "busType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thinProvisioned": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unitNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "busType",
                "diskId",
                "iops",
                "sizeInMb",
                "storageProfile",
                "thinProvisioned",
                "unitNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmMetadataEntry:getVmMetadataEntry": {
            "properties": {
                "isSystem": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAccess": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isSystem",
                "key",
                "type",
                "userAccess",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmNetwork:getVmNetwork": {
            "properties": {
                "adapterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAllocationMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isPrimary": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adapterType",
                "connected",
                "ip",
                "ipAllocationMode",
                "isPrimary",
                "mac",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmSizingPolicyCpus:getVmSizingPolicyCpus": {
            "properties": {
                "coresPerSocket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitInMhz": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reservationGuarantee": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shares": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedInMhz": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coresPerSocket",
                "count",
                "limitInMhz",
                "reservationGuarantee",
                "shares",
                "speedInMhz"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vcd:index/getVmSizingPolicyMemory:getVmSizingPolicyMemory": {
            "properties": {
                "limitInMb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reservationGuarantee": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shares": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInMb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "limitInMb",
                "reservationGuarantee",
                "shares",
                "sizeInMb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the vcd package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "allowUnverifiedSsl": {
                "type": "boolean",
                "description": "If set, VCDClient will permit unverifiable SSL certificates.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)\n"
            },
            "authType": {
                "type": "string",
                "description": "'integrated', 'saml_adfs', 'token', and 'api_token' are the only ones supported now. 'integrated' is default.\n"
            },
            "importSeparator": {
                "type": "string",
                "description": "Defines the import separation string to be used with 'terraform import'\n"
            },
            "logging": {
                "type": "boolean",
                "description": "If set, it will enable logging of API requests and responses\n"
            },
            "loggingFile": {
                "type": "string",
                "description": "Defines the full name of the logging file for API calls (requires 'logging')\n"
            },
            "maxRetryTimeout": {
                "type": "integer",
                "description": "Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)\n"
            },
            "org": {
                "type": "string",
                "description": "The VCD Org for API operations\n"
            },
            "password": {
                "type": "string",
                "description": "The user password for VCD API operations.\n"
            },
            "samlAdfsRptId": {
                "type": "string",
                "description": "Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs\n"
            },
            "sysorg": {
                "type": "string",
                "description": "The VCD Org for user authentication\n"
            },
            "token": {
                "type": "string",
                "description": "The token used instead of username/password for VCD API operations.\n"
            },
            "url": {
                "type": "string",
                "description": "The VCD url for VCD API operations.\n"
            },
            "user": {
                "type": "string",
                "description": "The user name for VCD API operations.\n"
            },
            "vdc": {
                "type": "string",
                "description": "The VDC for API operations\n"
            }
        },
        "required": [
            "org",
            "url"
        ],
        "inputProperties": {
            "allowUnverifiedSsl": {
                "type": "boolean",
                "description": "If set, VCDClient will permit unverifiable SSL certificates.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)\n"
            },
            "authType": {
                "type": "string",
                "description": "'integrated', 'saml_adfs', 'token', and 'api_token' are the only ones supported now. 'integrated' is default.\n"
            },
            "importSeparator": {
                "type": "string",
                "description": "Defines the import separation string to be used with 'terraform import'\n"
            },
            "logging": {
                "type": "boolean",
                "description": "If set, it will enable logging of API requests and responses\n"
            },
            "loggingFile": {
                "type": "string",
                "description": "Defines the full name of the logging file for API calls (requires 'logging')\n"
            },
            "maxRetryTimeout": {
                "type": "integer",
                "description": "Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)\n"
            },
            "org": {
                "type": "string",
                "description": "The VCD Org for API operations\n"
            },
            "password": {
                "type": "string",
                "description": "The user password for VCD API operations.\n"
            },
            "samlAdfsRptId": {
                "type": "string",
                "description": "Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs\n"
            },
            "sysorg": {
                "type": "string",
                "description": "The VCD Org for user authentication\n"
            },
            "token": {
                "type": "string",
                "description": "The token used instead of username/password for VCD API operations.\n"
            },
            "url": {
                "type": "string",
                "description": "The VCD url for VCD API operations.\n"
            },
            "user": {
                "type": "string",
                "description": "The user name for VCD API operations.\n"
            },
            "vdc": {
                "type": "string",
                "description": "The VDC for API operations\n"
            }
        },
        "requiredInputs": [
            "org",
            "url"
        ]
    },
    "resources": {
        "vcd:index/catalog:Catalog": {
            "properties": {
                "cacheEnabled": {
                    "type": "boolean",
                    "description": "True enables early catalog export to optimize synchronization\n"
                },
                "catalogVersion": {
                    "type": "integer",
                    "description": "Catalog version number.\n"
                },
                "created": {
                    "type": "string",
                    "description": "Time stamp of when the catalog was created\n"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,\nregardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "description": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "description": "Catalog HREF\n"
                },
                "isLocal": {
                    "type": "boolean",
                    "description": "True if this catalog belongs to the current organization.\n"
                },
                "isPublished": {
                    "type": "boolean",
                    "description": "True if this catalog is published.\n"
                },
                "isShared": {
                    "type": "boolean",
                    "description": "True if this catalog is shared.\n"
                },
                "mediaItemLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Media items in this catalog\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog metadata.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogMetadataEntry:CatalogMetadataEntry"
                    },
                    "description": "Metadata entries for the given Catalog\n"
                },
                "name": {
                    "type": "string"
                },
                "numberOfMedia": {
                    "type": "integer",
                    "description": "Number of Medias this catalog contains.\n"
                },
                "numberOfVappTemplates": {
                    "type": "integer",
                    "description": "Number of vApps templates this catalog contains.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "Owner name from the catalog.\n"
                },
                "password": {
                    "type": "string",
                    "description": "An optional password to access the catalog. Only ASCII characters are allowed in a valid password.\n"
                },
                "preserveIdentityInformation": {
                    "type": "boolean",
                    "description": "Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the\nportability of the package and you should use it only when necessary.\n"
                },
                "publishEnabled": {
                    "type": "boolean",
                    "description": "True allows to publish a catalog externally to make its vApp templates and media files available for subscription by\norganizations outside the Cloud Director installation.\n"
                },
                "publishSubscriptionType": {
                    "type": "string",
                    "description": "PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.\n"
                },
                "publishSubscriptionUrl": {
                    "type": "string",
                    "description": "URL to which other catalogs can subscribe\n"
                },
                "storageProfileId": {
                    "type": "string",
                    "description": "Optional storage profile ID\n"
                },
                "vappTemplateLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of catalog items in this catalog\n"
                }
            },
            "required": [
                "catalogVersion",
                "created",
                "deleteForce",
                "deleteRecursive",
                "href",
                "isLocal",
                "isPublished",
                "isShared",
                "mediaItemLists",
                "metadata",
                "metadataEntries",
                "name",
                "numberOfMedia",
                "numberOfVappTemplates",
                "ownerName",
                "password",
                "publishSubscriptionType",
                "publishSubscriptionUrl",
                "vappTemplateLists"
            ],
            "inputProperties": {
                "cacheEnabled": {
                    "type": "boolean",
                    "description": "True enables early catalog export to optimize synchronization\n"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,\nregardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog metadata.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogMetadataEntry:CatalogMetadataEntry"
                    },
                    "description": "Metadata entries for the given Catalog\n"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "An optional password to access the catalog. Only ASCII characters are allowed in a valid password.\n"
                },
                "preserveIdentityInformation": {
                    "type": "boolean",
                    "description": "Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the\nportability of the package and you should use it only when necessary.\n"
                },
                "publishEnabled": {
                    "type": "boolean",
                    "description": "True allows to publish a catalog externally to make its vApp templates and media files available for subscription by\norganizations outside the Cloud Director installation.\n"
                },
                "storageProfileId": {
                    "type": "string",
                    "description": "Optional storage profile ID\n"
                }
            },
            "requiredInputs": [
                "deleteForce",
                "deleteRecursive"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Catalog resources.\n",
                "properties": {
                    "cacheEnabled": {
                        "type": "boolean",
                        "description": "True enables early catalog export to optimize synchronization\n"
                    },
                    "catalogVersion": {
                        "type": "integer",
                        "description": "Catalog version number.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Time stamp of when the catalog was created\n"
                    },
                    "deleteForce": {
                        "type": "boolean",
                        "description": "When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,\nregardless of their state.\n"
                    },
                    "deleteRecursive": {
                        "type": "boolean",
                        "description": "When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that\nnormally allows removal.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string",
                        "description": "Catalog HREF\n"
                    },
                    "isLocal": {
                        "type": "boolean",
                        "description": "True if this catalog belongs to the current organization.\n"
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "True if this catalog is published.\n"
                    },
                    "isShared": {
                        "type": "boolean",
                        "description": "True if this catalog is shared.\n"
                    },
                    "mediaItemLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Media items in this catalog\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for catalog metadata.\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/CatalogMetadataEntry:CatalogMetadataEntry"
                        },
                        "description": "Metadata entries for the given Catalog\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "numberOfMedia": {
                        "type": "integer",
                        "description": "Number of Medias this catalog contains.\n"
                    },
                    "numberOfVappTemplates": {
                        "type": "integer",
                        "description": "Number of vApps templates this catalog contains.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "Owner name from the catalog.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "An optional password to access the catalog. Only ASCII characters are allowed in a valid password.\n"
                    },
                    "preserveIdentityInformation": {
                        "type": "boolean",
                        "description": "Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the\nportability of the package and you should use it only when necessary.\n"
                    },
                    "publishEnabled": {
                        "type": "boolean",
                        "description": "True allows to publish a catalog externally to make its vApp templates and media files available for subscription by\norganizations outside the Cloud Director installation.\n"
                    },
                    "publishSubscriptionType": {
                        "type": "string",
                        "description": "PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.\n"
                    },
                    "publishSubscriptionUrl": {
                        "type": "string",
                        "description": "URL to which other catalogs can subscribe\n"
                    },
                    "storageProfileId": {
                        "type": "string",
                        "description": "Optional storage profile ID\n"
                    },
                    "vappTemplateLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of catalog items in this catalog\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/catalogAccessControl:CatalogAccessControl": {
            "properties": {
                "catalogId": {
                    "type": "string",
                    "description": "The ID of Catalog to use\n"
                },
                "everyoneAccessLevel": {
                    "type": "string",
                    "description": "Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone\nis set\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "sharedWithEveryone": {
                    "type": "boolean",
                    "description": "Whether the Catalog is shared with everyone\n"
                },
                "sharedWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogAccessControlSharedWith:CatalogAccessControlSharedWith"
                    }
                }
            },
            "required": [
                "catalogId",
                "sharedWithEveryone"
            ],
            "inputProperties": {
                "catalogId": {
                    "type": "string",
                    "description": "The ID of Catalog to use\n",
                    "willReplaceOnChanges": true
                },
                "everyoneAccessLevel": {
                    "type": "string",
                    "description": "Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone\nis set\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "sharedWithEveryone": {
                    "type": "boolean",
                    "description": "Whether the Catalog is shared with everyone\n"
                },
                "sharedWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogAccessControlSharedWith:CatalogAccessControlSharedWith"
                    }
                }
            },
            "requiredInputs": [
                "catalogId",
                "sharedWithEveryone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CatalogAccessControl resources.\n",
                "properties": {
                    "catalogId": {
                        "type": "string",
                        "description": "The ID of Catalog to use\n",
                        "willReplaceOnChanges": true
                    },
                    "everyoneAccessLevel": {
                        "type": "string",
                        "description": "Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone\nis set\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "sharedWithEveryone": {
                        "type": "boolean",
                        "description": "Whether the Catalog is shared with everyone\n"
                    },
                    "sharedWiths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/CatalogAccessControlSharedWith:CatalogAccessControlSharedWith"
                        }
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/catalogItem:CatalogItem": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "catalog name where upload the OVA file\n"
                },
                "catalogItemMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog item metadata\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "created": {
                    "type": "string",
                    "description": "Time stamp of when the item was created\n"
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for the metadata of the vApp template associated to this catalog item\n"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogItemMetadataEntry:CatalogItemMetadataEntry"
                    },
                    "description": "Metadata entries for the given Catalog Item\n"
                },
                "name": {
                    "type": "string",
                    "description": "catalog item name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ovaPath": {
                    "type": "string",
                    "description": "Absolute or relative path to OVA\n"
                },
                "ovfUrl": {
                    "type": "string",
                    "description": "URL of OVF file\n"
                },
                "showUploadProgress": {
                    "type": "boolean",
                    "description": "shows upload progress in stdout\n"
                },
                "uploadPieceSize": {
                    "type": "integer",
                    "description": "size of upload file piece size in mega bytes\n"
                }
            },
            "required": [
                "catalog",
                "catalogItemMetadata",
                "created",
                "metadataEntries",
                "name"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "catalog name where upload the OVA file\n",
                    "willReplaceOnChanges": true
                },
                "catalogItemMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog item metadata\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for the metadata of the vApp template associated to this catalog item\n"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogItemMetadataEntry:CatalogItemMetadataEntry"
                    },
                    "description": "Metadata entries for the given Catalog Item\n"
                },
                "name": {
                    "type": "string",
                    "description": "catalog item name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "ovaPath": {
                    "type": "string",
                    "description": "Absolute or relative path to OVA\n",
                    "willReplaceOnChanges": true
                },
                "ovfUrl": {
                    "type": "string",
                    "description": "URL of OVF file\n",
                    "willReplaceOnChanges": true
                },
                "showUploadProgress": {
                    "type": "boolean",
                    "description": "shows upload progress in stdout\n"
                },
                "uploadPieceSize": {
                    "type": "integer",
                    "description": "size of upload file piece size in mega bytes\n"
                }
            },
            "requiredInputs": [
                "catalog"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CatalogItem resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "catalog name where upload the OVA file\n",
                        "willReplaceOnChanges": true
                    },
                    "catalogItemMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for catalog item metadata\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "created": {
                        "type": "string",
                        "description": "Time stamp of when the item was created\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for the metadata of the vApp template associated to this catalog item\n"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/CatalogItemMetadataEntry:CatalogItemMetadataEntry"
                        },
                        "description": "Metadata entries for the given Catalog Item\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "catalog item name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ovaPath": {
                        "type": "string",
                        "description": "Absolute or relative path to OVA\n",
                        "willReplaceOnChanges": true
                    },
                    "ovfUrl": {
                        "type": "string",
                        "description": "URL of OVF file\n",
                        "willReplaceOnChanges": true
                    },
                    "showUploadProgress": {
                        "type": "boolean",
                        "description": "shows upload progress in stdout\n"
                    },
                    "uploadPieceSize": {
                        "type": "integer",
                        "description": "size of upload file piece size in mega bytes\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/catalogMedia:CatalogMedia": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "catalog name where to upload the Media file\n",
                    "deprecationMessage": "Use catalog_id instead"
                },
                "catalogId": {
                    "type": "string",
                    "description": "ID of the catalog where to upload the Media file\n"
                },
                "creationDate": {
                    "type": "string",
                    "description": "Creation date\n"
                },
                "description": {
                    "type": "string"
                },
                "isIso": {
                    "type": "boolean",
                    "description": "True if this media file is ISO\n"
                },
                "isPublished": {
                    "type": "boolean",
                    "description": "True if this media file is in a published catalog\n"
                },
                "mediaPath": {
                    "type": "string",
                    "description": "absolute or relative path to Media file\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog item metadata\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogMediaMetadataEntry:CatalogMediaMetadataEntry"
                    },
                    "description": "Metadata entries for the given Catalog Media\n"
                },
                "name": {
                    "type": "string",
                    "description": "media name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "Owner name\n"
                },
                "showUploadProgress": {
                    "type": "boolean",
                    "description": "shows upload progress in stdout\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Media storage in Bytes\n"
                },
                "status": {
                    "type": "string",
                    "description": "Media status\n"
                },
                "storageProfileName": {
                    "type": "string",
                    "description": "Storage profile name\n"
                },
                "uploadPieceSize": {
                    "type": "integer",
                    "description": "size of upload file piece size in mega bytes\n"
                }
            },
            "required": [
                "catalog",
                "catalogId",
                "creationDate",
                "isIso",
                "isPublished",
                "mediaPath",
                "metadata",
                "metadataEntries",
                "name",
                "org",
                "ownerName",
                "size",
                "status",
                "storageProfileName"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "catalog name where to upload the Media file\n",
                    "deprecationMessage": "Use catalog_id instead",
                    "willReplaceOnChanges": true
                },
                "catalogId": {
                    "type": "string",
                    "description": "ID of the catalog where to upload the Media file\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "mediaPath": {
                    "type": "string",
                    "description": "absolute or relative path to Media file\n",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog item metadata\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogMediaMetadataEntry:CatalogMediaMetadataEntry"
                    },
                    "description": "Metadata entries for the given Catalog Media\n"
                },
                "name": {
                    "type": "string",
                    "description": "media name\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "showUploadProgress": {
                    "type": "boolean",
                    "description": "shows upload progress in stdout\n"
                },
                "uploadPieceSize": {
                    "type": "integer",
                    "description": "size of upload file piece size in mega bytes\n"
                }
            },
            "requiredInputs": [
                "mediaPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CatalogMedia resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "catalog name where to upload the Media file\n",
                        "deprecationMessage": "Use catalog_id instead",
                        "willReplaceOnChanges": true
                    },
                    "catalogId": {
                        "type": "string",
                        "description": "ID of the catalog where to upload the Media file\n",
                        "willReplaceOnChanges": true
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Creation date\n"
                    },
                    "description": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "isIso": {
                        "type": "boolean",
                        "description": "True if this media file is ISO\n"
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "True if this media file is in a published catalog\n"
                    },
                    "mediaPath": {
                        "type": "string",
                        "description": "absolute or relative path to Media file\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for catalog item metadata\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/CatalogMediaMetadataEntry:CatalogMediaMetadataEntry"
                        },
                        "description": "Metadata entries for the given Catalog Media\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "media name\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "Owner name\n"
                    },
                    "showUploadProgress": {
                        "type": "boolean",
                        "description": "shows upload progress in stdout\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Media storage in Bytes\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Media status\n"
                    },
                    "storageProfileName": {
                        "type": "string",
                        "description": "Storage profile name\n"
                    },
                    "uploadPieceSize": {
                        "type": "integer",
                        "description": "size of upload file piece size in mega bytes\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/catalogVappTemplate:CatalogVappTemplate": {
            "properties": {
                "catalogId": {
                    "type": "string",
                    "description": "ID of the Catalog where to upload the OVA file\n"
                },
                "created": {
                    "type": "string",
                    "description": "Timestamp of when the vApp Template was created\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for the metadata of this vApp Template\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogVappTemplateMetadataEntry:CatalogVappTemplateMetadataEntry"
                    },
                    "description": "Metadata entries for the given vApp Template\n"
                },
                "name": {
                    "type": "string",
                    "description": "vApp Template name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ovaPath": {
                    "type": "string",
                    "description": "Absolute or relative path to OVA\n"
                },
                "ovfUrl": {
                    "type": "string",
                    "description": "URL of OVF file\n"
                },
                "uploadPieceSize": {
                    "type": "integer",
                    "description": "Size of upload file piece size in megabytes\n"
                },
                "vdcId": {
                    "type": "string",
                    "description": "ID of the VDC to which the vApp Template belongs\n"
                },
                "vmNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM names within the vApp template\n"
                }
            },
            "required": [
                "catalogId",
                "created",
                "description",
                "metadata",
                "metadataEntries",
                "name",
                "vdcId",
                "vmNames"
            ],
            "inputProperties": {
                "catalogId": {
                    "type": "string",
                    "description": "ID of the Catalog where to upload the OVA file\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for the metadata of this vApp Template\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/CatalogVappTemplateMetadataEntry:CatalogVappTemplateMetadataEntry"
                    },
                    "description": "Metadata entries for the given vApp Template\n"
                },
                "name": {
                    "type": "string",
                    "description": "vApp Template name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "ovaPath": {
                    "type": "string",
                    "description": "Absolute or relative path to OVA\n",
                    "willReplaceOnChanges": true
                },
                "ovfUrl": {
                    "type": "string",
                    "description": "URL of OVF file\n",
                    "willReplaceOnChanges": true
                },
                "uploadPieceSize": {
                    "type": "integer",
                    "description": "Size of upload file piece size in megabytes\n"
                }
            },
            "requiredInputs": [
                "catalogId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CatalogVappTemplate resources.\n",
                "properties": {
                    "catalogId": {
                        "type": "string",
                        "description": "ID of the Catalog where to upload the OVA file\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "Timestamp of when the vApp Template was created\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for the metadata of this vApp Template\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/CatalogVappTemplateMetadataEntry:CatalogVappTemplateMetadataEntry"
                        },
                        "description": "Metadata entries for the given vApp Template\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "vApp Template name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ovaPath": {
                        "type": "string",
                        "description": "Absolute or relative path to OVA\n",
                        "willReplaceOnChanges": true
                    },
                    "ovfUrl": {
                        "type": "string",
                        "description": "URL of OVF file\n",
                        "willReplaceOnChanges": true
                    },
                    "uploadPieceSize": {
                        "type": "integer",
                        "description": "Size of upload file piece size in megabytes\n"
                    },
                    "vdcId": {
                        "type": "string",
                        "description": "ID of the VDC to which the vApp Template belongs\n"
                    },
                    "vmNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of VM names within the vApp template\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/edgeGateway:EdgeGateway": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Configuration of the vShield edge VM for this gateway. One of: compact, full (\"Large\"), full4 (\"Quad Large\"), x-large\n"
                },
                "defaultExternalNetworkIp": {
                    "type": "string",
                    "description": "IP address of edge gateway interface which is used as default.\n"
                },
                "description": {
                    "type": "string"
                },
                "distributedRouting": {
                    "type": "boolean",
                    "description": "Enable distributed routing\n"
                },
                "externalNetworkIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses set on edge gateway external network interfaces\n"
                },
                "externalNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayExternalNetwork:EdgeGatewayExternalNetwork"
                    },
                    "description": "One or more blocks with external network information to be attached to this gateway's interface\n"
                },
                "fipsModeEnabled": {
                    "type": "boolean",
                    "description": "Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)\n"
                },
                "fwDefaultRuleAction": {
                    "type": "string",
                    "description": "'accept' or 'deny'. Default 'deny'\n"
                },
                "fwDefaultRuleLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable logging for default rule. Default 'false'\n"
                },
                "fwEnabled": {
                    "type": "boolean",
                    "description": "Enable firewall. Default 'true'\n"
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Enable high availability on this edge gateway\n"
                },
                "lbAccelerationEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer acceleration. (Disabled by default)\n"
                },
                "lbEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancing. (Disabled by default)\n"
                },
                "lbLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer logging. (Disabled by default)\n"
                },
                "lbLoglevel": {
                    "type": "string",
                    "description": "Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)\n"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "useDefaultRouteForDnsRelay": {
                    "type": "boolean",
                    "description": "If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "configuration",
                "defaultExternalNetworkIp",
                "externalNetworks",
                "externalNetworkIps",
                "name",
                "useDefaultRouteForDnsRelay"
            ],
            "inputProperties": {
                "configuration": {
                    "type": "string",
                    "description": "Configuration of the vShield edge VM for this gateway. One of: compact, full (\"Large\"), full4 (\"Quad Large\"), x-large\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "distributedRouting": {
                    "type": "boolean",
                    "description": "Enable distributed routing\n",
                    "willReplaceOnChanges": true
                },
                "externalNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayExternalNetwork:EdgeGatewayExternalNetwork"
                    },
                    "description": "One or more blocks with external network information to be attached to this gateway's interface\n",
                    "willReplaceOnChanges": true
                },
                "fipsModeEnabled": {
                    "type": "boolean",
                    "description": "Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)\n",
                    "willReplaceOnChanges": true
                },
                "fwDefaultRuleAction": {
                    "type": "string",
                    "description": "'accept' or 'deny'. Default 'deny'\n"
                },
                "fwDefaultRuleLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable logging for default rule. Default 'false'\n"
                },
                "fwEnabled": {
                    "type": "boolean",
                    "description": "Enable firewall. Default 'true'\n"
                },
                "haEnabled": {
                    "type": "boolean",
                    "description": "Enable high availability on this edge gateway\n",
                    "willReplaceOnChanges": true
                },
                "lbAccelerationEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer acceleration. (Disabled by default)\n"
                },
                "lbEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancing. (Disabled by default)\n"
                },
                "lbLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer logging. (Disabled by default)\n"
                },
                "lbLoglevel": {
                    "type": "string",
                    "description": "Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)\n"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "useDefaultRouteForDnsRelay": {
                    "type": "boolean",
                    "description": "If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "configuration",
                "externalNetworks"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeGateway resources.\n",
                "properties": {
                    "configuration": {
                        "type": "string",
                        "description": "Configuration of the vShield edge VM for this gateway. One of: compact, full (\"Large\"), full4 (\"Quad Large\"), x-large\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultExternalNetworkIp": {
                        "type": "string",
                        "description": "IP address of edge gateway interface which is used as default.\n"
                    },
                    "description": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "distributedRouting": {
                        "type": "boolean",
                        "description": "Enable distributed routing\n",
                        "willReplaceOnChanges": true
                    },
                    "externalNetworkIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses set on edge gateway external network interfaces\n"
                    },
                    "externalNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/EdgeGatewayExternalNetwork:EdgeGatewayExternalNetwork"
                        },
                        "description": "One or more blocks with external network information to be attached to this gateway's interface\n",
                        "willReplaceOnChanges": true
                    },
                    "fipsModeEnabled": {
                        "type": "boolean",
                        "description": "Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)\n",
                        "willReplaceOnChanges": true
                    },
                    "fwDefaultRuleAction": {
                        "type": "string",
                        "description": "'accept' or 'deny'. Default 'deny'\n"
                    },
                    "fwDefaultRuleLoggingEnabled": {
                        "type": "boolean",
                        "description": "Enable logging for default rule. Default 'false'\n"
                    },
                    "fwEnabled": {
                        "type": "boolean",
                        "description": "Enable firewall. Default 'true'\n"
                    },
                    "haEnabled": {
                        "type": "boolean",
                        "description": "Enable high availability on this edge gateway\n",
                        "willReplaceOnChanges": true
                    },
                    "lbAccelerationEnabled": {
                        "type": "boolean",
                        "description": "Enable load balancer acceleration. (Disabled by default)\n"
                    },
                    "lbEnabled": {
                        "type": "boolean",
                        "description": "Enable load balancing. (Disabled by default)\n"
                    },
                    "lbLoggingEnabled": {
                        "type": "boolean",
                        "description": "Enable load balancer logging. (Disabled by default)\n"
                    },
                    "lbLoglevel": {
                        "type": "string",
                        "description": "Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "useDefaultRouteForDnsRelay": {
                        "type": "boolean",
                        "description": "If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/edgeGatewaySettings:EdgeGatewaySettings": {
            "properties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "ID of the edge gateway. Required when 'edge_gateway_name' is not set\n"
                },
                "edgeGatewayName": {
                    "type": "string",
                    "description": "Name of the edge gateway. Required when 'edge_gateway_id' is not set\n"
                },
                "fwDefaultRuleAction": {
                    "type": "string",
                    "description": "'accept' or 'deny'. Default 'deny'\n"
                },
                "fwDefaultRuleLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable logging for default rule. Default 'false'\n"
                },
                "fwEnabled": {
                    "type": "boolean",
                    "description": "Enable firewall. Default 'true'\n"
                },
                "lbAccelerationEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer acceleration. (Disabled by default)\n"
                },
                "lbEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancing. (Disabled by default)\n"
                },
                "lbLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer logging. (Disabled by default)\n"
                },
                "lbLoglevel": {
                    "type": "string",
                    "description": "Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGatewayId",
                "edgeGatewayName"
            ],
            "inputProperties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "ID of the edge gateway. Required when 'edge_gateway_name' is not set\n"
                },
                "edgeGatewayName": {
                    "type": "string",
                    "description": "Name of the edge gateway. Required when 'edge_gateway_id' is not set\n"
                },
                "fwDefaultRuleAction": {
                    "type": "string",
                    "description": "'accept' or 'deny'. Default 'deny'\n"
                },
                "fwDefaultRuleLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable logging for default rule. Default 'false'\n"
                },
                "fwEnabled": {
                    "type": "boolean",
                    "description": "Enable firewall. Default 'true'\n"
                },
                "lbAccelerationEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer acceleration. (Disabled by default)\n"
                },
                "lbEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancing. (Disabled by default)\n"
                },
                "lbLoggingEnabled": {
                    "type": "boolean",
                    "description": "Enable load balancer logging. (Disabled by default)\n"
                },
                "lbLoglevel": {
                    "type": "string",
                    "description": "Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeGatewaySettings resources.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "ID of the edge gateway. Required when 'edge_gateway_name' is not set\n"
                    },
                    "edgeGatewayName": {
                        "type": "string",
                        "description": "Name of the edge gateway. Required when 'edge_gateway_id' is not set\n"
                    },
                    "fwDefaultRuleAction": {
                        "type": "string",
                        "description": "'accept' or 'deny'. Default 'deny'\n"
                    },
                    "fwDefaultRuleLoggingEnabled": {
                        "type": "boolean",
                        "description": "Enable logging for default rule. Default 'false'\n"
                    },
                    "fwEnabled": {
                        "type": "boolean",
                        "description": "Enable firewall. Default 'true'\n"
                    },
                    "lbAccelerationEnabled": {
                        "type": "boolean",
                        "description": "Enable load balancer acceleration. (Disabled by default)\n"
                    },
                    "lbEnabled": {
                        "type": "boolean",
                        "description": "Enable load balancing. (Disabled by default)\n"
                    },
                    "lbLoggingEnabled": {
                        "type": "boolean",
                        "description": "Enable load balancer logging. (Disabled by default)\n"
                    },
                    "lbLoglevel": {
                        "type": "string",
                        "description": "Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/edgeGatewayVpn:EdgeGatewayVpn": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "edgeGateway": {
                    "type": "string"
                },
                "encryptionProtocol": {
                    "type": "string"
                },
                "localId": {
                    "type": "string"
                },
                "localIpAddress": {
                    "type": "string"
                },
                "localSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayVpnLocalSubnet:EdgeGatewayVpnLocalSubnet"
                    }
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "peerId": {
                    "type": "string"
                },
                "peerIpAddress": {
                    "type": "string"
                },
                "peerSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayVpnPeerSubnet:EdgeGatewayVpnPeerSubnet"
                    }
                },
                "sharedSecret": {
                    "type": "string"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "encryptionProtocol",
                "localId",
                "localIpAddress",
                "mtu",
                "name",
                "peerId",
                "peerIpAddress",
                "sharedSecret"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "edgeGateway": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "encryptionProtocol": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "localId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "localIpAddress": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "localSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayVpnLocalSubnet:EdgeGatewayVpnLocalSubnet"
                    },
                    "willReplaceOnChanges": true
                },
                "mtu": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "peerId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "peerIpAddress": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "peerSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/EdgeGatewayVpnPeerSubnet:EdgeGatewayVpnPeerSubnet"
                    },
                    "willReplaceOnChanges": true
                },
                "sharedSecret": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "encryptionProtocol",
                "localId",
                "localIpAddress",
                "mtu",
                "peerId",
                "peerIpAddress",
                "sharedSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeGatewayVpn resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "encryptionProtocol": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "localId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "localIpAddress": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "localSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/EdgeGatewayVpnLocalSubnet:EdgeGatewayVpnLocalSubnet"
                        },
                        "willReplaceOnChanges": true
                    },
                    "mtu": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "peerId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "peerIpAddress": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "peerSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/EdgeGatewayVpnPeerSubnet:EdgeGatewayVpnPeerSubnet"
                        },
                        "willReplaceOnChanges": true
                    },
                    "sharedSecret": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/externalNetwork:ExternalNetwork": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "ipScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkIpScope:ExternalNetworkIpScope"
                    },
                    "description": "A list of IP scopes for the network\n"
                },
                "name": {
                    "type": "string"
                },
                "retainNetInfoAcrossDeployments": {
                    "type": "boolean",
                    "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                },
                "vsphereNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkVsphereNetwork:ExternalNetworkVsphereNetwork"
                    },
                    "description": "A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server\nregistered with the system.\n"
                }
            },
            "required": [
                "ipScopes",
                "name",
                "vsphereNetworks"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ipScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkIpScope:ExternalNetworkIpScope"
                    },
                    "description": "A list of IP scopes for the network\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "retainNetInfoAcrossDeployments": {
                    "type": "boolean",
                    "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n",
                    "willReplaceOnChanges": true
                },
                "vsphereNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkVsphereNetwork:ExternalNetworkVsphereNetwork"
                    },
                    "description": "A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server\nregistered with the system.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipScopes",
                "vsphereNetworks"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalNetwork resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ipScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/ExternalNetworkIpScope:ExternalNetworkIpScope"
                        },
                        "description": "A list of IP scopes for the network\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "retainNetInfoAcrossDeployments": {
                        "type": "boolean",
                        "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n",
                        "willReplaceOnChanges": true
                    },
                    "vsphereNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/ExternalNetworkVsphereNetwork:ExternalNetworkVsphereNetwork"
                        },
                        "description": "A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server\nregistered with the system.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/externalNetworkV2:ExternalNetworkV2": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "ipScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkV2IpScope:ExternalNetworkV2IpScope"
                    },
                    "description": "A set of IP scopes for the network\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "nsxtNetwork": {
                    "$ref": "#/types/vcd:index/ExternalNetworkV2NsxtNetwork:ExternalNetworkV2NsxtNetwork",
                    "description": "Reference to NSX-T Tier-0 router or segment and manager\n"
                },
                "vsphereNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkV2VsphereNetwork:ExternalNetworkV2VsphereNetwork"
                    },
                    "description": "A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server\nregistered with the system.\n"
                }
            },
            "required": [
                "ipScopes",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "ipScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkV2IpScope:ExternalNetworkV2IpScope"
                    },
                    "description": "A set of IP scopes for the network\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "nsxtNetwork": {
                    "$ref": "#/types/vcd:index/ExternalNetworkV2NsxtNetwork:ExternalNetworkV2NsxtNetwork",
                    "description": "Reference to NSX-T Tier-0 router or segment and manager\n",
                    "willReplaceOnChanges": true
                },
                "vsphereNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/ExternalNetworkV2VsphereNetwork:ExternalNetworkV2VsphereNetwork"
                    },
                    "description": "A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server\nregistered with the system.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalNetworkV2 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Network description\n"
                    },
                    "ipScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/ExternalNetworkV2IpScope:ExternalNetworkV2IpScope"
                        },
                        "description": "A set of IP scopes for the network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network name\n"
                    },
                    "nsxtNetwork": {
                        "$ref": "#/types/vcd:index/ExternalNetworkV2NsxtNetwork:ExternalNetworkV2NsxtNetwork",
                        "description": "Reference to NSX-T Tier-0 router or segment and manager\n",
                        "willReplaceOnChanges": true
                    },
                    "vsphereNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/ExternalNetworkV2VsphereNetwork:ExternalNetworkV2VsphereNetwork"
                        },
                        "description": "A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server\nregistered with the system.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/globalRole:GlobalRole": {
            "properties": {
                "bundleKey": {
                    "type": "string",
                    "description": "Key used for internationalization\n"
                },
                "description": {
                    "type": "string",
                    "description": "Global role description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of global role.\n"
                },
                "publishToAllTenants": {
                    "type": "boolean",
                    "description": "When true, publishes the global role to all tenants\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether this global role is read-only\n"
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of rights assigned to this global role\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of tenants to which this global role is published\n"
                }
            },
            "required": [
                "bundleKey",
                "description",
                "name",
                "publishToAllTenants",
                "readOnly",
                "tenants"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Global role description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of global role.\n"
                },
                "publishToAllTenants": {
                    "type": "boolean",
                    "description": "When true, publishes the global role to all tenants\n"
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of rights assigned to this global role\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of tenants to which this global role is published\n"
                }
            },
            "requiredInputs": [
                "description",
                "publishToAllTenants"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalRole resources.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string",
                        "description": "Key used for internationalization\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Global role description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of global role.\n"
                    },
                    "publishToAllTenants": {
                        "type": "boolean",
                        "description": "When true, publishes the global role to all tenants\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Whether this global role is read-only\n"
                    },
                    "rights": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of rights assigned to this global role\n"
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of tenants to which this global role is published\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/independentDisk:IndependentDisk": {
            "properties": {
                "attachedVmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM IDs which are using the disk\n"
                },
                "busSubType": {
                    "type": "string"
                },
                "busType": {
                    "type": "string"
                },
                "datastoreName": {
                    "type": "string",
                    "description": "Datastore name\n"
                },
                "description": {
                    "type": "string",
                    "description": "independent disk description\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "True if disk is encrypted\n"
                },
                "iops": {
                    "type": "integer",
                    "description": "IOPS request for the created disk\n"
                },
                "isAttached": {
                    "type": "boolean",
                    "description": "True if the disk is already attached\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this disk. Key and value can be any string.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/IndependentDiskMetadataEntry:IndependentDiskMetadataEntry"
                    },
                    "description": "Metadata entries for the given Disk\n"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "The owner name of the disk\n"
                },
                "sharingType": {
                    "type": "string",
                    "description": "This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`\n"
                },
                "sizeInMb": {
                    "type": "integer",
                    "description": "size in MB\n"
                },
                "storageProfile": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of this named disk's device backing\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "attachedVmIds",
                "busSubType",
                "busType",
                "datastoreName",
                "encrypted",
                "iops",
                "isAttached",
                "metadata",
                "metadataEntries",
                "name",
                "ownerName",
                "sharingType",
                "sizeInMb",
                "storageProfile",
                "uuid"
            ],
            "inputProperties": {
                "busSubType": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "busType": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "independent disk description\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this disk. Key and value can be any string.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/IndependentDiskMetadataEntry:IndependentDiskMetadataEntry"
                    },
                    "description": "Metadata entries for the given Disk\n"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "sharingType": {
                    "type": "string",
                    "description": "This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`\n",
                    "willReplaceOnChanges": true
                },
                "sizeInMb": {
                    "type": "integer",
                    "description": "size in MB\n"
                },
                "storageProfile": {
                    "type": "string"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sizeInMb"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndependentDisk resources.\n",
                "properties": {
                    "attachedVmIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of VM IDs which are using the disk\n"
                    },
                    "busSubType": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "busType": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "datastoreName": {
                        "type": "string",
                        "description": "Datastore name\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "independent disk description\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "True if disk is encrypted\n"
                    },
                    "iops": {
                        "type": "integer",
                        "description": "IOPS request for the created disk\n"
                    },
                    "isAttached": {
                        "type": "boolean",
                        "description": "True if the disk is already attached\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this disk. Key and value can be any string.\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/IndependentDiskMetadataEntry:IndependentDiskMetadataEntry"
                        },
                        "description": "Metadata entries for the given Disk\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "The owner name of the disk\n"
                    },
                    "sharingType": {
                        "type": "string",
                        "description": "This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeInMb": {
                        "type": "integer",
                        "description": "size in MB\n"
                    },
                    "storageProfile": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of this named disk's device backing\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/insertedMedia:InsertedMedia": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "catalog name where to find media file\n"
                },
                "ejectForce": {
                    "type": "boolean",
                    "description": "When ejecting answers automatically to question yes\n"
                },
                "name": {
                    "type": "string",
                    "description": "media name to use\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "vappName": {
                    "type": "string",
                    "description": "vApp to use\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                },
                "vmName": {
                    "type": "string",
                    "description": "VM in vApp in which media will be inserted or ejected\n"
                }
            },
            "required": [
                "catalog",
                "name",
                "vappName",
                "vmName"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "catalog name where to find media file\n",
                    "willReplaceOnChanges": true
                },
                "ejectForce": {
                    "type": "boolean",
                    "description": "When ejecting answers automatically to question yes\n"
                },
                "name": {
                    "type": "string",
                    "description": "media name to use\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vappName": {
                    "type": "string",
                    "description": "vApp to use\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                },
                "vmName": {
                    "type": "string",
                    "description": "VM in vApp in which media will be inserted or ejected\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "catalog",
                "vappName",
                "vmName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InsertedMedia resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "catalog name where to find media file\n",
                        "willReplaceOnChanges": true
                    },
                    "ejectForce": {
                        "type": "boolean",
                        "description": "When ejecting answers automatically to question yes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "media name to use\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "vappName": {
                        "type": "string",
                        "description": "vApp to use\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    },
                    "vmName": {
                        "type": "string",
                        "description": "VM in vApp in which media will be inserted or ejected\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/lbAppProfile:LbAppProfile": {
            "properties": {
                "cookieMode": {
                    "type": "string",
                    "description": "The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie\nwhen connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for\npersistence_mechanism 'cookie'\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Application Profile is located\n"
                },
                "enablePoolSideSsl": {
                    "type": "boolean",
                    "description": "Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side\n"
                },
                "enableSslPassthrough": {
                    "type": "boolean",
                    "description": "Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the\ndestination address.\n"
                },
                "expiration": {
                    "type": "integer",
                    "description": "Length of time in seconds that persistence stays in effect\n"
                },
                "httpRedirectUrl": {
                    "type": "string",
                    "description": "The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and\n'https'\n"
                },
                "insertXForwardedHttpHeader": {
                    "type": "boolean",
                    "description": "Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server\nthrough the load balancer. Only applies for types HTTP and HTTPS\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Application Profile name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "persistenceMechanism": {
                    "type": "string",
                    "description": "Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'\n"
                },
                "type": {
                    "type": "string",
                    "description": "Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "name",
                "type"
            ],
            "inputProperties": {
                "cookieMode": {
                    "type": "string",
                    "description": "The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie\nwhen connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for\npersistence_mechanism 'cookie'\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Application Profile is located\n",
                    "willReplaceOnChanges": true
                },
                "enablePoolSideSsl": {
                    "type": "boolean",
                    "description": "Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side\n"
                },
                "enableSslPassthrough": {
                    "type": "boolean",
                    "description": "Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the\ndestination address.\n"
                },
                "expiration": {
                    "type": "integer",
                    "description": "Length of time in seconds that persistence stays in effect\n"
                },
                "httpRedirectUrl": {
                    "type": "string",
                    "description": "The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and\n'https'\n"
                },
                "insertXForwardedHttpHeader": {
                    "type": "boolean",
                    "description": "Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server\nthrough the load balancer. Only applies for types HTTP and HTTPS\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Application Profile name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "persistenceMechanism": {
                    "type": "string",
                    "description": "Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'\n"
                },
                "type": {
                    "type": "string",
                    "description": "Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbAppProfile resources.\n",
                "properties": {
                    "cookieMode": {
                        "type": "string",
                        "description": "The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'\n"
                    },
                    "cookieName": {
                        "type": "string",
                        "description": "Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie\nwhen connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for\npersistence_mechanism 'cookie'\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which the LB Application Profile is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enablePoolSideSsl": {
                        "type": "boolean",
                        "description": "Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side\n"
                    },
                    "enableSslPassthrough": {
                        "type": "boolean",
                        "description": "Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the\ndestination address.\n"
                    },
                    "expiration": {
                        "type": "integer",
                        "description": "Length of time in seconds that persistence stays in effect\n"
                    },
                    "httpRedirectUrl": {
                        "type": "string",
                        "description": "The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and\n'https'\n"
                    },
                    "insertXForwardedHttpHeader": {
                        "type": "boolean",
                        "description": "Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server\nthrough the load balancer. Only applies for types HTTP and HTTPS\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique LB Application Profile name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "persistenceMechanism": {
                        "type": "string",
                        "description": "Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/lbAppRule:LbAppRule": {
            "properties": {
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Application Rule is located\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Application Rule name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "name",
                "script"
            ],
            "inputProperties": {
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Application Rule is located\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Application Rule name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "script": {
                    "type": "string",
                    "description": "The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbAppRule resources.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which the LB Application Rule is located\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique LB Application Rule name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "script": {
                        "type": "string",
                        "description": "The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/lbServerPool:LbServerPool": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'\n"
                },
                "algorithmParameters": {
                    "type": "string",
                    "description": "Additional options for load balancing algorithm for httpheader or url algorithms\n"
                },
                "description": {
                    "type": "string",
                    "description": "Server pool description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Server Pool is located\n"
                },
                "enableTransparency": {
                    "type": "boolean",
                    "description": "Makes client IP addresses visible to the backend servers\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/LbServerPoolMember:LbServerPoolMember"
                    }
                },
                "monitorId": {
                    "type": "string",
                    "description": "Load Balancer Service Monitor ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Server Pool name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "algorithm",
                "edgeGateway",
                "name"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'\n"
                },
                "algorithmParameters": {
                    "type": "string",
                    "description": "Additional options for load balancing algorithm for httpheader or url algorithms\n"
                },
                "description": {
                    "type": "string",
                    "description": "Server pool description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Server Pool is located\n",
                    "willReplaceOnChanges": true
                },
                "enableTransparency": {
                    "type": "boolean",
                    "description": "Makes client IP addresses visible to the backend servers\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/LbServerPoolMember:LbServerPoolMember"
                    }
                },
                "monitorId": {
                    "type": "string",
                    "description": "Load Balancer Service Monitor ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Server Pool name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "algorithm",
                "edgeGateway"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbServerPool resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'\n"
                    },
                    "algorithmParameters": {
                        "type": "string",
                        "description": "Additional options for load balancing algorithm for httpheader or url algorithms\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Server pool description\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which the LB Server Pool is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enableTransparency": {
                        "type": "boolean",
                        "description": "Makes client IP addresses visible to the backend servers\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/LbServerPoolMember:LbServerPoolMember"
                        }
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "Load Balancer Service Monitor ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique LB Server Pool name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/lbServiceMonitor:LbServiceMonitor": {
            "properties": {
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Service Monitor is located\n"
                },
                "expected": {
                    "type": "string",
                    "description": "String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)\n"
                },
                "extension": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Advanced monitor parameters as key=value pairs\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval in seconds at which a server is to be monitored (defaults to 10)\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to\n3)\n"
                },
                "method": {
                    "type": "string",
                    "description": "Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Service Monitor name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "receive": {
                    "type": "string",
                    "description": "String to be matched in the response content\n"
                },
                "send": {
                    "type": "string",
                    "description": "Data to be sent\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Maximum time in seconds within which a response from the server must be received (defaults to 15)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to be used in the server status request\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "name",
                "type"
            ],
            "inputProperties": {
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Service Monitor is located\n",
                    "willReplaceOnChanges": true
                },
                "expected": {
                    "type": "string",
                    "description": "String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)\n"
                },
                "extension": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Advanced monitor parameters as key=value pairs\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval in seconds at which a server is to be monitored (defaults to 10)\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to\n3)\n"
                },
                "method": {
                    "type": "string",
                    "description": "Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique LB Service Monitor name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "receive": {
                    "type": "string",
                    "description": "String to be matched in the response content\n"
                },
                "send": {
                    "type": "string",
                    "description": "Data to be sent\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Maximum time in seconds within which a response from the server must be received (defaults to 15)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to be used in the server status request\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbServiceMonitor resources.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which the LB Service Monitor is located\n",
                        "willReplaceOnChanges": true
                    },
                    "expected": {
                        "type": "string",
                        "description": "String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)\n"
                    },
                    "extension": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Advanced monitor parameters as key=value pairs\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "Interval in seconds at which a server is to be monitored (defaults to 10)\n"
                    },
                    "maxRetries": {
                        "type": "integer",
                        "description": "Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to\n3)\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique LB Service Monitor name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "receive": {
                        "type": "string",
                        "description": "String to be matched in the response content\n"
                    },
                    "send": {
                        "type": "string",
                        "description": "Data to be sent\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Maximum time in seconds within which a response from the server must be received (defaults to 15)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL to be used in the server status request\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/lbVirtualServer:LbVirtualServer": {
            "properties": {
                "appProfileId": {
                    "type": "string",
                    "description": "Application profile ID to be associated with the virtual server\n"
                },
                "appRuleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of attached application rule IDs\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "Maximum concurrent connections that the virtual server can process\n"
                },
                "connectionRateLimit": {
                    "type": "integer",
                    "description": "Maximum incoming new connection requests per second\n"
                },
                "description": {
                    "type": "string",
                    "description": "Virtual Server description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Virtual Server is located\n"
                },
                "enableAcceleration": {
                    "type": "boolean",
                    "description": "Enable virtual server acceleration\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if the virtual server is enabled\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address that the load balancer listens on\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique Virtual Server name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number that the load balancer listens on\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol that the virtual server accepts\n"
                },
                "serverPoolId": {
                    "type": "string",
                    "description": "The server pool that the load balancer will use\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "ipAddress",
                "name",
                "port",
                "protocol"
            ],
            "inputProperties": {
                "appProfileId": {
                    "type": "string",
                    "description": "Application profile ID to be associated with the virtual server\n"
                },
                "appRuleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of attached application rule IDs\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "Maximum concurrent connections that the virtual server can process\n"
                },
                "connectionRateLimit": {
                    "type": "integer",
                    "description": "Maximum incoming new connection requests per second\n"
                },
                "description": {
                    "type": "string",
                    "description": "Virtual Server description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which the LB Virtual Server is located\n",
                    "willReplaceOnChanges": true
                },
                "enableAcceleration": {
                    "type": "boolean",
                    "description": "Enable virtual server acceleration\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if the virtual server is enabled\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address that the load balancer listens on\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique Virtual Server name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port number that the load balancer listens on\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol that the virtual server accepts\n"
                },
                "serverPoolId": {
                    "type": "string",
                    "description": "The server pool that the load balancer will use\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "ipAddress",
                "port",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbVirtualServer resources.\n",
                "properties": {
                    "appProfileId": {
                        "type": "string",
                        "description": "Application profile ID to be associated with the virtual server\n"
                    },
                    "appRuleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of attached application rule IDs\n"
                    },
                    "connectionLimit": {
                        "type": "integer",
                        "description": "Maximum concurrent connections that the virtual server can process\n"
                    },
                    "connectionRateLimit": {
                        "type": "integer",
                        "description": "Maximum incoming new connection requests per second\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Virtual Server description\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which the LB Virtual Server is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enableAcceleration": {
                        "type": "boolean",
                        "description": "Enable virtual server acceleration\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Defines if the virtual server is enabled\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address that the load balancer listens on\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique Virtual Server name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number that the load balancer listens on\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol that the virtual server accepts\n"
                    },
                    "serverPoolId": {
                        "type": "string",
                        "description": "The server pool that the load balancer will use\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/libraryCertificate:LibraryCertificate": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Alias of certificate\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Certificate content\n"
                },
                "description": {
                    "type": "string",
                    "description": "Certificate description\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Certificate private key\n"
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "Certificate private pass phrase\n"
                }
            },
            "required": [
                "alias",
                "certificate"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "Alias of certificate\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Certificate content\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Certificate description\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "Certificate private key\n",
                    "willReplaceOnChanges": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "Certificate private pass phrase\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "alias",
                "certificate"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LibraryCertificate resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Alias of certificate\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate content\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Certificate description\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Certificate private key\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKeyPassphrase": {
                        "type": "string",
                        "description": "Certificate private pass phrase\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/networkDirect:NetworkDirect": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "externalNetwork": {
                    "type": "string",
                    "description": "The name of the external network\n"
                },
                "externalNetworkDns1": {
                    "type": "string",
                    "description": "Main DNS of the external network\n"
                },
                "externalNetworkDns2": {
                    "type": "string",
                    "description": "Secondary DNS of the external network\n"
                },
                "externalNetworkDnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix of the external network\n"
                },
                "externalNetworkGateway": {
                    "type": "string",
                    "description": "Gateway of the external network\n"
                },
                "externalNetworkNetmask": {
                    "type": "string",
                    "description": "Net mask of the external network\n"
                },
                "href": {
                    "type": "string",
                    "description": "Network Hypertext Reference\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkDirectMetadataEntry:NetworkDirectMetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for this network\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "shared": {
                    "type": "boolean",
                    "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "externalNetwork",
                "externalNetworkDns1",
                "externalNetworkDns2",
                "externalNetworkDnsSuffix",
                "externalNetworkGateway",
                "externalNetworkNetmask",
                "href",
                "metadata",
                "metadataEntries",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "externalNetwork": {
                    "type": "string",
                    "description": "The name of the external network\n",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkDirectMetadataEntry:NetworkDirectMetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for this network\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "shared": {
                    "type": "boolean",
                    "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "externalNetwork"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkDirect resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Optional description for the network\n"
                    },
                    "externalNetwork": {
                        "type": "string",
                        "description": "The name of the external network\n",
                        "willReplaceOnChanges": true
                    },
                    "externalNetworkDns1": {
                        "type": "string",
                        "description": "Main DNS of the external network\n"
                    },
                    "externalNetworkDns2": {
                        "type": "string",
                        "description": "Secondary DNS of the external network\n"
                    },
                    "externalNetworkDnsSuffix": {
                        "type": "string",
                        "description": "DNS suffix of the external network\n"
                    },
                    "externalNetworkGateway": {
                        "type": "string",
                        "description": "Gateway of the external network\n"
                    },
                    "externalNetworkNetmask": {
                        "type": "string",
                        "description": "Net mask of the external network\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Network Hypertext Reference\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkDirectMetadataEntry:NetworkDirectMetadataEntry"
                        },
                        "description": "Metadata entries for the given Network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name for this network\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "shared": {
                        "type": "boolean",
                        "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/networkIsolated:NetworkIsolated": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "dhcpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedDhcpPool:NetworkIsolatedDhcpPool"
                    },
                    "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "First DNS server to use\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "Second DNS server to use\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "A FQDN for the virtual machines on this network\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway for this network\n"
                },
                "href": {
                    "type": "string",
                    "description": "Network Hyper Reference\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedMetadataEntry:NetworkIsolatedMetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for this network\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask for the new network\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "shared": {
                    "type": "boolean",
                    "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedStaticIpPool:NetworkIsolatedStaticIpPool"
                    },
                    "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "href",
                "metadata",
                "metadataEntries",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "dhcpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedDhcpPool:NetworkIsolatedDhcpPool"
                    },
                    "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "First DNS server to use\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "Second DNS server to use\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "A FQDN for the virtual machines on this network\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway for this network\n",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedMetadataEntry:NetworkIsolatedMetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for this network\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask for the new network\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "shared": {
                    "type": "boolean",
                    "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedStaticIpPool:NetworkIsolatedStaticIpPool"
                    },
                    "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkIsolated resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Optional description for the network\n"
                    },
                    "dhcpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkIsolatedDhcpPool:NetworkIsolatedDhcpPool"
                        },
                        "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                    },
                    "dns1": {
                        "type": "string",
                        "description": "First DNS server to use\n"
                    },
                    "dns2": {
                        "type": "string",
                        "description": "Second DNS server to use\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "A FQDN for the virtual machines on this network\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway for this network\n",
                        "willReplaceOnChanges": true
                    },
                    "href": {
                        "type": "string",
                        "description": "Network Hyper Reference\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkIsolatedMetadataEntry:NetworkIsolatedMetadataEntry"
                        },
                        "description": "Metadata entries for the given Network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name for this network\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The netmask for the new network\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "shared": {
                        "type": "boolean",
                        "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkIsolatedStaticIpPool:NetworkIsolatedStaticIpPool"
                        },
                        "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/networkIsolatedV2:NetworkIsolatedV2": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address\n"
                },
                "isShared": {
                    "type": "boolean",
                    "description": "NSX-V only - share this network with other VDCs in this organization. Default - false\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedV2MetadataEntry:NetworkIsolatedV2MetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Network prefix\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedV2StaticIpPool:NetworkIsolatedV2StaticIpPool"
                    },
                    "description": "IP ranges used for static pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                }
            },
            "required": [
                "gateway",
                "isShared",
                "metadata",
                "metadataEntries",
                "name",
                "ownerId",
                "prefixLength",
                "vdc"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address\n"
                },
                "isShared": {
                    "type": "boolean",
                    "description": "NSX-V only - share this network with other VDCs in this organization. Default - false\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedV2MetadataEntry:NetworkIsolatedV2MetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Network prefix\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkIsolatedV2StaticIpPool:NetworkIsolatedV2StaticIpPool"
                    },
                    "description": "IP ranges used for static pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                }
            },
            "requiredInputs": [
                "gateway",
                "prefixLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkIsolatedV2 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Network description\n"
                    },
                    "dns1": {
                        "type": "string",
                        "description": "DNS server 1\n"
                    },
                    "dns2": {
                        "type": "string",
                        "description": "DNS server 1\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "DNS suffix\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway IP address\n"
                    },
                    "isShared": {
                        "type": "boolean",
                        "description": "NSX-V only - share this network with other VDCs in this organization. Default - false\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkIsolatedV2MetadataEntry:NetworkIsolatedV2MetadataEntry"
                        },
                        "description": "Metadata entries for the given Network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "ID of VDC or VDC Group\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "Network prefix\n"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkIsolatedV2StaticIpPool:NetworkIsolatedV2StaticIpPool"
                        },
                        "description": "IP ranges used for static pool allocation in the network\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/networkRouted:NetworkRouted": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "dhcpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedDhcpPool:NetworkRoutedDhcpPool"
                    },
                    "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "First DNS server to use\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "Second DNS server to use\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "A FQDN for the virtual machines on this network\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "The name of the edge gateway\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway of this network\n"
                },
                "href": {
                    "type": "string",
                    "description": "Network Hypertext Reference\n"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "Which interface to use (one of `internal`, `subinterface`, `distributed`)\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedMetadataEntry:NetworkRoutedMetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the network\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask for the new network\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "shared": {
                    "type": "boolean",
                    "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedStaticIpPool:NetworkRoutedStaticIpPool"
                    },
                    "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "href",
                "metadata",
                "metadataEntries",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "dhcpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedDhcpPool:NetworkRoutedDhcpPool"
                    },
                    "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "First DNS server to use\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "Second DNS server to use\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "A FQDN for the virtual machines on this network\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "The name of the edge gateway\n",
                    "willReplaceOnChanges": true
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway of this network\n",
                    "willReplaceOnChanges": true
                },
                "interfaceType": {
                    "type": "string",
                    "description": "Which interface to use (one of `internal`, `subinterface`, `distributed`)\n",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedMetadataEntry:NetworkRoutedMetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the network\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask for the new network\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "shared": {
                    "type": "boolean",
                    "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedStaticIpPool:NetworkRoutedStaticIpPool"
                    },
                    "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRouted resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Optional description for the network\n"
                    },
                    "dhcpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkRoutedDhcpPool:NetworkRoutedDhcpPool"
                        },
                        "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                    },
                    "dns1": {
                        "type": "string",
                        "description": "First DNS server to use\n"
                    },
                    "dns2": {
                        "type": "string",
                        "description": "Second DNS server to use\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "A FQDN for the virtual machines on this network\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "The name of the edge gateway\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway of this network\n",
                        "willReplaceOnChanges": true
                    },
                    "href": {
                        "type": "string",
                        "description": "Network Hypertext Reference\n"
                    },
                    "interfaceType": {
                        "type": "string",
                        "description": "Which interface to use (one of `internal`, `subinterface`, `distributed`)\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkRoutedMetadataEntry:NetworkRoutedMetadataEntry"
                        },
                        "description": "Metadata entries for the given Network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name for the network\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The netmask for the new network\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "shared": {
                        "type": "boolean",
                        "description": "Defines if this network is shared between multiple VDCs in the Org\n"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkRoutedStaticIpPool:NetworkRoutedStaticIpPool"
                        },
                        "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/networkRoutedV2:NetworkRoutedV2": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID in which Routed network should be located\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address\n"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "Optional interface type (only for NSX-V networks). One of 'INTERNAL' (default), 'DISTRIBUTED', 'SUBINTERFACE'\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedV2MetadataEntry:NetworkRoutedV2MetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Network prefix\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedV2StaticIpPool:NetworkRoutedV2StaticIpPool"
                    },
                    "description": "IP ranges used for static pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "'vdc' is deprecated and ineffective. Routed networks will inherit VDC setting from parent Edge Gateway"
                }
            },
            "required": [
                "edgeGatewayId",
                "gateway",
                "metadata",
                "metadataEntries",
                "name",
                "ownerId",
                "prefixLength",
                "vdc"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID in which Routed network should be located\n",
                    "willReplaceOnChanges": true
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address\n"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "Optional interface type (only for NSX-V networks). One of 'INTERNAL' (default), 'DISTRIBUTED', 'SUBINTERFACE'\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedV2MetadataEntry:NetworkRoutedV2MetadataEntry"
                    },
                    "description": "Metadata entries for the given Network\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Network prefix\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NetworkRoutedV2StaticIpPool:NetworkRoutedV2StaticIpPool"
                    },
                    "description": "IP ranges used for static pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "'vdc' is deprecated and ineffective. Routed networks will inherit VDC setting from parent Edge Gateway"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "gateway",
                "prefixLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRoutedV2 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Network description\n"
                    },
                    "dns1": {
                        "type": "string",
                        "description": "DNS server 1\n"
                    },
                    "dns2": {
                        "type": "string",
                        "description": "DNS server 1\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "DNS suffix\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID in which Routed network should be located\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway IP address\n"
                    },
                    "interfaceType": {
                        "type": "string",
                        "description": "Optional interface type (only for NSX-V networks). One of 'INTERNAL' (default), 'DISTRIBUTED', 'SUBINTERFACE'\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this network. Key and value can be any string\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkRoutedV2MetadataEntry:NetworkRoutedV2MetadataEntry"
                        },
                        "description": "Metadata entries for the given Network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "ID of VDC or VDC Group\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "Network prefix\n"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NetworkRoutedV2StaticIpPool:NetworkRoutedV2StaticIpPool"
                        },
                        "description": "IP ranges used for static pool allocation in the network\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "'vdc' is deprecated and ineffective. Routed networks will inherit VDC setting from parent Edge Gateway"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbCloud:NsxtAlbCloud": {
            "properties": {
                "controllerId": {
                    "type": "string",
                    "description": "NSX-T ALB Controller ID\n"
                },
                "description": {
                    "type": "string",
                    "description": "NSX-T ALB Cloud description\n"
                },
                "healthMessage": {
                    "type": "string",
                    "description": "NSX-T ALB Cloud detailed health message\n"
                },
                "healthStatus": {
                    "type": "string",
                    "description": "NSX-T ALB Cloud health status\n"
                },
                "importableCloudId": {
                    "type": "string",
                    "description": "NSX-T ALB Importable Cloud ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "NSX-T ALB Cloud name\n"
                },
                "networkPoolId": {
                    "type": "string",
                    "description": "Network pool ID for NSX-T ALB Importable Cloud\n"
                },
                "networkPoolName": {
                    "type": "string",
                    "description": "Network pool name of NSX-T ALB Cloud\n"
                }
            },
            "required": [
                "controllerId",
                "healthMessage",
                "healthStatus",
                "importableCloudId",
                "name",
                "networkPoolId",
                "networkPoolName"
            ],
            "inputProperties": {
                "controllerId": {
                    "type": "string",
                    "description": "NSX-T ALB Controller ID\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "NSX-T ALB Cloud description\n",
                    "willReplaceOnChanges": true
                },
                "importableCloudId": {
                    "type": "string",
                    "description": "NSX-T ALB Importable Cloud ID\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "NSX-T ALB Cloud name\n",
                    "willReplaceOnChanges": true
                },
                "networkPoolId": {
                    "type": "string",
                    "description": "Network pool ID for NSX-T ALB Importable Cloud\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "controllerId",
                "importableCloudId",
                "networkPoolId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbCloud resources.\n",
                "properties": {
                    "controllerId": {
                        "type": "string",
                        "description": "NSX-T ALB Controller ID\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "NSX-T ALB Cloud description\n",
                        "willReplaceOnChanges": true
                    },
                    "healthMessage": {
                        "type": "string",
                        "description": "NSX-T ALB Cloud detailed health message\n"
                    },
                    "healthStatus": {
                        "type": "string",
                        "description": "NSX-T ALB Cloud health status\n"
                    },
                    "importableCloudId": {
                        "type": "string",
                        "description": "NSX-T ALB Importable Cloud ID\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "NSX-T ALB Cloud name\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPoolId": {
                        "type": "string",
                        "description": "Network pool ID for NSX-T ALB Importable Cloud\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPoolName": {
                        "type": "string",
                        "description": "Network pool name of NSX-T ALB Cloud\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbController:NsxtAlbController": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "NSX-T ALB Controller description\n"
                },
                "licenseType": {
                    "type": "string",
                    "description": "NSX-T ALB License type. One of 'BASIC', 'ENTERPRISE'. Must not be used from VCD 10.4.0 onwards\n"
                },
                "name": {
                    "type": "string",
                    "description": "NSX-T ALB Controller name\n"
                },
                "password": {
                    "type": "string",
                    "description": "NSX-T ALB Controller Password\n"
                },
                "url": {
                    "type": "string",
                    "description": "NSX-T ALB Controller URL\n"
                },
                "username": {
                    "type": "string",
                    "description": "NSX-T ALB Controller Username\n"
                },
                "version": {
                    "type": "string",
                    "description": "NSX-T ALB Controller version\n"
                }
            },
            "required": [
                "name",
                "password",
                "url",
                "username",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "NSX-T ALB Controller description\n"
                },
                "licenseType": {
                    "type": "string",
                    "description": "NSX-T ALB License type. One of 'BASIC', 'ENTERPRISE'. Must not be used from VCD 10.4.0 onwards\n"
                },
                "name": {
                    "type": "string",
                    "description": "NSX-T ALB Controller name\n"
                },
                "password": {
                    "type": "string",
                    "description": "NSX-T ALB Controller Password\n"
                },
                "url": {
                    "type": "string",
                    "description": "NSX-T ALB Controller URL\n"
                },
                "username": {
                    "type": "string",
                    "description": "NSX-T ALB Controller Username\n"
                }
            },
            "requiredInputs": [
                "password",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbController resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "NSX-T ALB Controller description\n"
                    },
                    "licenseType": {
                        "type": "string",
                        "description": "NSX-T ALB License type. One of 'BASIC', 'ENTERPRISE'. Must not be used from VCD 10.4.0 onwards\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NSX-T ALB Controller name\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "NSX-T ALB Controller Password\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "NSX-T ALB Controller URL\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "NSX-T ALB Controller Username\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "NSX-T ALB Controller version\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbEdgegatewayServiceEngineGroup:NsxtAlbEdgegatewayServiceEngineGroup": {
            "properties": {
                "deployedVirtualServices": {
                    "type": "integer",
                    "description": "Number of deployed virtual services for this Service Engine Group\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway ID in which ALB Service Engine Group should be located\n"
                },
                "maxVirtualServices": {
                    "type": "integer",
                    "description": "Maximum number of virtual services to be used in this Service Engine Group\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "reservedVirtualServices": {
                    "type": "string",
                    "description": "Number of reserved virtual services for this Service Engine Group\n"
                },
                "serviceEngineGroupId": {
                    "type": "string",
                    "description": "Service Engine Group ID to attach to this NSX-T Edge Gateway\n"
                },
                "serviceEngineGroupName": {
                    "type": "string",
                    "description": "Service Engine Group Name which is attached to NSX-T Edge Gateway\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "required": [
                "deployedVirtualServices",
                "edgeGatewayId",
                "maxVirtualServices",
                "reservedVirtualServices",
                "serviceEngineGroupId",
                "serviceEngineGroupName",
                "vdc"
            ],
            "inputProperties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway ID in which ALB Service Engine Group should be located\n",
                    "willReplaceOnChanges": true
                },
                "maxVirtualServices": {
                    "type": "integer",
                    "description": "Maximum number of virtual services to be used in this Service Engine Group\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "reservedVirtualServices": {
                    "type": "string",
                    "description": "Number of reserved virtual services for this Service Engine Group\n"
                },
                "serviceEngineGroupId": {
                    "type": "string",
                    "description": "Service Engine Group ID to attach to this NSX-T Edge Gateway\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "serviceEngineGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbEdgegatewayServiceEngineGroup resources.\n",
                "properties": {
                    "deployedVirtualServices": {
                        "type": "integer",
                        "description": "Number of deployed virtual services for this Service Engine Group\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge Gateway ID in which ALB Service Engine Group should be located\n",
                        "willReplaceOnChanges": true
                    },
                    "maxVirtualServices": {
                        "type": "integer",
                        "description": "Maximum number of virtual services to be used in this Service Engine Group\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "reservedVirtualServices": {
                        "type": "string",
                        "description": "Number of reserved virtual services for this Service Engine Group\n"
                    },
                    "serviceEngineGroupId": {
                        "type": "string",
                        "description": "Service Engine Group ID to attach to this NSX-T Edge Gateway\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEngineGroupName": {
                        "type": "string",
                        "description": "Service Engine Group Name which is attached to NSX-T Edge Gateway\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbPool:NsxtAlbPool": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,\n`FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`\n"
                },
                "associatedVirtualServiceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of associated virtual services\n"
                },
                "associatedVirtualServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of associated virtual services\n"
                },
                "caCertificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of root certificate IDs to use when validating certificates presented by pool members\n"
                },
                "cnCheckEnabled": {
                    "type": "boolean",
                    "description": "Boolean flag if common name check of the certificate should be enabled\n"
                },
                "defaultPort": {
                    "type": "integer",
                    "description": "Default Port defines destination server port used by the traffic sent to the member (default 80)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of ALB Pool\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain names which will be used to verify common names\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID in which ALB Pool should be created\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value if ALB Pool is enabled or not (default true)\n"
                },
                "enabledMemberCount": {
                    "type": "integer",
                    "description": "Number of enabled members in the pool\n"
                },
                "gracefulTimeoutPeriod": {
                    "type": "integer",
                    "description": "Maximum time in minutes to gracefully disable pool member (default 1)\n"
                },
                "healthMessage": {
                    "type": "string",
                    "description": "Health message\n"
                },
                "healthMonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAlbPoolHealthMonitor:NsxtAlbPoolHealthMonitor"
                    }
                },
                "memberCount": {
                    "type": "integer",
                    "description": "Number of members in the pool\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAlbPoolMember:NsxtAlbPoolMember"
                    },
                    "description": "ALB Pool Members\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of ALB Pool\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "passiveMonitoringEnabled": {
                    "type": "boolean",
                    "description": "Monitors if the traffic is accepted by node (default true)\n"
                },
                "persistenceProfile": {
                    "$ref": "#/types/vcd:index/NsxtAlbPoolPersistenceProfile:NsxtAlbPoolPersistenceProfile"
                },
                "upMemberCount": {
                    "type": "integer",
                    "description": "Number of members in the pool serving the traffic\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "required": [
                "associatedVirtualServiceIds",
                "associatedVirtualServices",
                "edgeGatewayId",
                "enabledMemberCount",
                "healthMessage",
                "memberCount",
                "name",
                "upMemberCount",
                "vdc"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,\n`FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`\n"
                },
                "caCertificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of root certificate IDs to use when validating certificates presented by pool members\n"
                },
                "cnCheckEnabled": {
                    "type": "boolean",
                    "description": "Boolean flag if common name check of the certificate should be enabled\n"
                },
                "defaultPort": {
                    "type": "integer",
                    "description": "Default Port defines destination server port used by the traffic sent to the member (default 80)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of ALB Pool\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain names which will be used to verify common names\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID in which ALB Pool should be created\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value if ALB Pool is enabled or not (default true)\n"
                },
                "gracefulTimeoutPeriod": {
                    "type": "integer",
                    "description": "Maximum time in minutes to gracefully disable pool member (default 1)\n"
                },
                "healthMonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAlbPoolHealthMonitor:NsxtAlbPoolHealthMonitor"
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAlbPoolMember:NsxtAlbPoolMember"
                    },
                    "description": "ALB Pool Members\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of ALB Pool\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "passiveMonitoringEnabled": {
                    "type": "boolean",
                    "description": "Monitors if the traffic is accepted by node (default true)\n"
                },
                "persistenceProfile": {
                    "$ref": "#/types/vcd:index/NsxtAlbPoolPersistenceProfile:NsxtAlbPoolPersistenceProfile"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "requiredInputs": [
                "edgeGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbPool resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,\n`FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`\n"
                    },
                    "associatedVirtualServiceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of associated virtual services\n"
                    },
                    "associatedVirtualServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names of associated virtual services\n"
                    },
                    "caCertificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of root certificate IDs to use when validating certificates presented by pool members\n"
                    },
                    "cnCheckEnabled": {
                        "type": "boolean",
                        "description": "Boolean flag if common name check of the certificate should be enabled\n"
                    },
                    "defaultPort": {
                        "type": "integer",
                        "description": "Default Port defines destination server port used by the traffic sent to the member (default 80)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of ALB Pool\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domain names which will be used to verify common names\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID in which ALB Pool should be created\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Boolean value if ALB Pool is enabled or not (default true)\n"
                    },
                    "enabledMemberCount": {
                        "type": "integer",
                        "description": "Number of enabled members in the pool\n"
                    },
                    "gracefulTimeoutPeriod": {
                        "type": "integer",
                        "description": "Maximum time in minutes to gracefully disable pool member (default 1)\n"
                    },
                    "healthMessage": {
                        "type": "string",
                        "description": "Health message\n"
                    },
                    "healthMonitors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtAlbPoolHealthMonitor:NsxtAlbPoolHealthMonitor"
                        }
                    },
                    "memberCount": {
                        "type": "integer",
                        "description": "Number of members in the pool\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtAlbPoolMember:NsxtAlbPoolMember"
                        },
                        "description": "ALB Pool Members\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of ALB Pool\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "passiveMonitoringEnabled": {
                        "type": "boolean",
                        "description": "Monitors if the traffic is accepted by node (default true)\n"
                    },
                    "persistenceProfile": {
                        "$ref": "#/types/vcd:index/NsxtAlbPoolPersistenceProfile:NsxtAlbPoolPersistenceProfile"
                    },
                    "upMemberCount": {
                        "type": "integer",
                        "description": "Number of members in the pool serving the traffic\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbServiceEngineGroup:NsxtAlbServiceEngineGroup": {
            "properties": {
                "albCloudId": {
                    "type": "string",
                    "description": "NSX-T ALB backing Cloud ID\n"
                },
                "deployedVirtualServices": {
                    "type": "integer",
                    "description": "NSX-T ALB Service Engine Group deployed virtual services\n"
                },
                "description": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group description\n"
                },
                "haMode": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group HA mode\n"
                },
                "importableServiceEngineGroupName": {
                    "type": "string",
                    "description": "NSX-T ALB Importable Service Engine Group Name\n"
                },
                "maxVirtualServices": {
                    "type": "integer",
                    "description": "NSX-T ALB Service Engine Group maximum virtual services\n"
                },
                "name": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group name\n"
                },
                "overallocated": {
                    "type": "boolean",
                    "description": "Boolean value that shows if virtual services are overallocated\n"
                },
                "reservationModel": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'\n"
                },
                "reservedVirtualServices": {
                    "type": "integer",
                    "description": "NSX-T ALB Service Engine Group reserved virtual services\n"
                },
                "supportedFeatureSet": {
                    "type": "string",
                    "description": "Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.\n"
                },
                "syncOnRefresh": {
                    "type": "boolean",
                    "description": "Boolean value that shows if sync should be performed on every refresh\n"
                }
            },
            "required": [
                "albCloudId",
                "deployedVirtualServices",
                "haMode",
                "importableServiceEngineGroupName",
                "maxVirtualServices",
                "name",
                "reservationModel",
                "reservedVirtualServices",
                "supportedFeatureSet"
            ],
            "inputProperties": {
                "albCloudId": {
                    "type": "string",
                    "description": "NSX-T ALB backing Cloud ID\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group description\n"
                },
                "importableServiceEngineGroupName": {
                    "type": "string",
                    "description": "NSX-T ALB Importable Service Engine Group Name\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group name\n"
                },
                "overallocated": {
                    "type": "boolean",
                    "description": "Boolean value that shows if virtual services are overallocated\n"
                },
                "reservationModel": {
                    "type": "string",
                    "description": "NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'\n"
                },
                "supportedFeatureSet": {
                    "type": "string",
                    "description": "Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.\n"
                },
                "syncOnRefresh": {
                    "type": "boolean",
                    "description": "Boolean value that shows if sync should be performed on every refresh\n"
                }
            },
            "requiredInputs": [
                "albCloudId",
                "importableServiceEngineGroupName",
                "reservationModel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbServiceEngineGroup resources.\n",
                "properties": {
                    "albCloudId": {
                        "type": "string",
                        "description": "NSX-T ALB backing Cloud ID\n",
                        "willReplaceOnChanges": true
                    },
                    "deployedVirtualServices": {
                        "type": "integer",
                        "description": "NSX-T ALB Service Engine Group deployed virtual services\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "NSX-T ALB Service Engine Group description\n"
                    },
                    "haMode": {
                        "type": "string",
                        "description": "NSX-T ALB Service Engine Group HA mode\n"
                    },
                    "importableServiceEngineGroupName": {
                        "type": "string",
                        "description": "NSX-T ALB Importable Service Engine Group Name\n",
                        "willReplaceOnChanges": true
                    },
                    "maxVirtualServices": {
                        "type": "integer",
                        "description": "NSX-T ALB Service Engine Group maximum virtual services\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NSX-T ALB Service Engine Group name\n"
                    },
                    "overallocated": {
                        "type": "boolean",
                        "description": "Boolean value that shows if virtual services are overallocated\n"
                    },
                    "reservationModel": {
                        "type": "string",
                        "description": "NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'\n"
                    },
                    "reservedVirtualServices": {
                        "type": "integer",
                        "description": "NSX-T ALB Service Engine Group reserved virtual services\n"
                    },
                    "supportedFeatureSet": {
                        "type": "string",
                        "description": "Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.\n"
                    },
                    "syncOnRefresh": {
                        "type": "boolean",
                        "description": "Boolean value that shows if sync should be performed on every refresh\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbSettings:NsxtAlbSettings": {
            "properties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Defines if ALB is enabled on Edge Gateway\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "serviceNetworkSpecification": {
                    "type": "string",
                    "description": "Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)\n"
                },
                "supportedFeatureSet": {
                    "type": "string",
                    "description": "Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "required": [
                "edgeGatewayId",
                "isActive",
                "serviceNetworkSpecification",
                "supportedFeatureSet",
                "vdc"
            ],
            "inputProperties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID\n",
                    "willReplaceOnChanges": true
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Defines if ALB is enabled on Edge Gateway\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "serviceNetworkSpecification": {
                    "type": "string",
                    "description": "Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)\n",
                    "willReplaceOnChanges": true
                },
                "supportedFeatureSet": {
                    "type": "string",
                    "description": "Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "isActive"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbSettings resources.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID\n",
                        "willReplaceOnChanges": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Defines if ALB is enabled on Edge Gateway\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceNetworkSpecification": {
                        "type": "string",
                        "description": "Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)\n",
                        "willReplaceOnChanges": true
                    },
                    "supportedFeatureSet": {
                        "type": "string",
                        "description": "Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAlbVirtualService:NsxtAlbVirtualService": {
            "properties": {
                "applicationProfileType": {
                    "type": "string",
                    "description": "HTTP, HTTPS, L4, L4_TLS\n"
                },
                "caCertificateId": {
                    "type": "string",
                    "description": "Optional certificate ID to use for exposing service\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of ALB Virtual Service\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID in which ALB Pool should be created\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Virtual Service is enabled or disabled (default true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of ALB Virtual Service\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool ID\n"
                },
                "serviceEngineGroupId": {
                    "type": "string",
                    "description": "Service Engine Group ID\n"
                },
                "servicePorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAlbVirtualServiceServicePort:NsxtAlbVirtualServiceServicePort"
                    }
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                },
                "virtualIpAddress": {
                    "type": "string",
                    "description": "Virtual IP address (VIP) for Virtual Service\n"
                }
            },
            "required": [
                "applicationProfileType",
                "edgeGatewayId",
                "name",
                "poolId",
                "serviceEngineGroupId",
                "vdc",
                "virtualIpAddress"
            ],
            "inputProperties": {
                "applicationProfileType": {
                    "type": "string",
                    "description": "HTTP, HTTPS, L4, L4_TLS\n"
                },
                "caCertificateId": {
                    "type": "string",
                    "description": "Optional certificate ID to use for exposing service\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of ALB Virtual Service\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID in which ALB Pool should be created\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Virtual Service is enabled or disabled (default true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of ALB Virtual Service\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool ID\n",
                    "willReplaceOnChanges": true
                },
                "serviceEngineGroupId": {
                    "type": "string",
                    "description": "Service Engine Group ID\n",
                    "willReplaceOnChanges": true
                },
                "servicePorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAlbVirtualServiceServicePort:NsxtAlbVirtualServiceServicePort"
                    }
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                },
                "virtualIpAddress": {
                    "type": "string",
                    "description": "Virtual IP address (VIP) for Virtual Service\n"
                }
            },
            "requiredInputs": [
                "applicationProfileType",
                "edgeGatewayId",
                "poolId",
                "serviceEngineGroupId",
                "virtualIpAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAlbVirtualService resources.\n",
                "properties": {
                    "applicationProfileType": {
                        "type": "string",
                        "description": "HTTP, HTTPS, L4, L4_TLS\n"
                    },
                    "caCertificateId": {
                        "type": "string",
                        "description": "Optional certificate ID to use for exposing service\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of ALB Virtual Service\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID in which ALB Pool should be created\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Virtual Service is enabled or disabled (default true)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of ALB Virtual Service\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "poolId": {
                        "type": "string",
                        "description": "Pool ID\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEngineGroupId": {
                        "type": "string",
                        "description": "Service Engine Group ID\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtAlbVirtualServiceServicePort:NsxtAlbVirtualServiceServicePort"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    },
                    "virtualIpAddress": {
                        "type": "string",
                        "description": "Virtual IP address (VIP) for Virtual Service\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtAppPortProfile:NsxtAppPortProfile": {
            "properties": {
                "appPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAppPortProfileAppPort:NsxtAppPortProfileAppPort"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "ID of VDC, VDC Group, or NSX-T Manager\n"
                },
                "description": {
                    "type": "string",
                    "description": "Application Port Profile description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Application Port Profile name\n"
                },
                "nsxtManagerId": {
                    "type": "string",
                    "description": "ID of NSX-T manager. Only required for 'PROVIDER' scope\n",
                    "deprecationMessage": "Deprecated in favor of 'context_id'"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope - 'PROVIDER' or 'TENANT'\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Deprecated in favor of 'context_id'"
                }
            },
            "required": [
                "appPorts",
                "contextId",
                "name",
                "nsxtManagerId",
                "scope",
                "vdc"
            ],
            "inputProperties": {
                "appPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtAppPortProfileAppPort:NsxtAppPortProfileAppPort"
                    }
                },
                "contextId": {
                    "type": "string",
                    "description": "ID of VDC, VDC Group, or NSX-T Manager\n"
                },
                "description": {
                    "type": "string",
                    "description": "Application Port Profile description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Application Port Profile name\n"
                },
                "nsxtManagerId": {
                    "type": "string",
                    "description": "ID of NSX-T manager. Only required for 'PROVIDER' scope\n",
                    "deprecationMessage": "Deprecated in favor of 'context_id'"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "scope": {
                    "type": "string",
                    "description": "Scope - 'PROVIDER' or 'TENANT'\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Deprecated in favor of 'context_id'"
                }
            },
            "requiredInputs": [
                "appPorts",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtAppPortProfile resources.\n",
                "properties": {
                    "appPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtAppPortProfileAppPort:NsxtAppPortProfileAppPort"
                        }
                    },
                    "contextId": {
                        "type": "string",
                        "description": "ID of VDC, VDC Group, or NSX-T Manager\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Application Port Profile description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Application Port Profile name\n"
                    },
                    "nsxtManagerId": {
                        "type": "string",
                        "description": "ID of NSX-T manager. Only required for 'PROVIDER' scope\n",
                        "deprecationMessage": "Deprecated in favor of 'context_id'"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope - 'PROVIDER' or 'TENANT'\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Deprecated in favor of 'context_id'"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtDistributedFirewall:NsxtDistributedFirewall": {
            "properties": {
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtDistributedFirewallRule:NsxtDistributedFirewallRule"
                    },
                    "description": "Ordered list of firewall rules\n"
                },
                "vdcGroupId": {
                    "type": "string",
                    "description": "ID of VDC Group for Distributed Firewall\n"
                }
            },
            "required": [
                "rules",
                "vdcGroupId"
            ],
            "inputProperties": {
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtDistributedFirewallRule:NsxtDistributedFirewallRule"
                    },
                    "description": "Ordered list of firewall rules\n"
                },
                "vdcGroupId": {
                    "type": "string",
                    "description": "ID of VDC Group for Distributed Firewall\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "vdcGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtDistributedFirewall resources.\n",
                "properties": {
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtDistributedFirewallRule:NsxtDistributedFirewallRule"
                        },
                        "description": "Ordered list of firewall rules\n"
                    },
                    "vdcGroupId": {
                        "type": "string",
                        "description": "ID of VDC Group for Distributed Firewall\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtDynamicSecurityGroup:NsxtDynamicSecurityGroup": {
            "properties": {
                "criterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtDynamicSecurityGroupCriteria:NsxtDynamicSecurityGroupCriteria"
                    },
                    "description": "Up to 3 criteria to be used to define the Dynamic Security Group (VCD 10.2, 10.3)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Dynamic Security Group description\n"
                },
                "memberVms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtDynamicSecurityGroupMemberVm:NsxtDynamicSecurityGroupMemberVm"
                    },
                    "description": "Set of VM IDs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Dynamic Security Group name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "vdcGroupId": {
                    "type": "string",
                    "description": "VDC Group ID in which Dynamic Security Group is located\n"
                }
            },
            "required": [
                "memberVms",
                "name",
                "vdcGroupId"
            ],
            "inputProperties": {
                "criterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtDynamicSecurityGroupCriteria:NsxtDynamicSecurityGroupCriteria"
                    },
                    "description": "Up to 3 criteria to be used to define the Dynamic Security Group (VCD 10.2, 10.3)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Dynamic Security Group description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Dynamic Security Group name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vdcGroupId": {
                    "type": "string",
                    "description": "VDC Group ID in which Dynamic Security Group is located\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vdcGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtDynamicSecurityGroup resources.\n",
                "properties": {
                    "criterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtDynamicSecurityGroupCriteria:NsxtDynamicSecurityGroupCriteria"
                        },
                        "description": "Up to 3 criteria to be used to define the Dynamic Security Group (VCD 10.2, 10.3)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Dynamic Security Group description\n"
                    },
                    "memberVms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtDynamicSecurityGroupMemberVm:NsxtDynamicSecurityGroupMemberVm"
                        },
                        "description": "Set of VM IDs\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Dynamic Security Group name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "vdcGroupId": {
                        "type": "string",
                        "description": "VDC Group ID in which Dynamic Security Group is located\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtEdgegateway:NsxtEdgegateway": {
            "properties": {
                "dedicateExternalNetwork": {
                    "type": "boolean",
                    "description": "Dedicating the External Network will enable Route Advertisement for this Edge Gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Edge Gateway description\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified\n"
                },
                "externalNetworkId": {
                    "type": "string",
                    "description": "External network ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Edge Gateway name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "primaryIp": {
                    "type": "string",
                    "description": "Primary IP address of edge gateway. Read-only (can be specified in specific subnet)\n"
                },
                "startingVdcId": {
                    "type": "string",
                    "description": "Optional ID of starting VDC if the 'owner_id' is a VDC Group\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtEdgegatewaySubnet:NsxtEdgegatewaySubnet"
                    },
                    "description": "One or more blocks with external network information to be attached to this gateway's interface\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                }
            },
            "required": [
                "edgeClusterId",
                "externalNetworkId",
                "name",
                "ownerId",
                "primaryIp",
                "subnets",
                "vdc"
            ],
            "inputProperties": {
                "dedicateExternalNetwork": {
                    "type": "boolean",
                    "description": "Dedicating the External Network will enable Route Advertisement for this Edge Gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Edge Gateway description\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified\n"
                },
                "externalNetworkId": {
                    "type": "string",
                    "description": "External network ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Edge Gateway name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "startingVdcId": {
                    "type": "string",
                    "description": "Optional ID of starting VDC if the 'owner_id' is a VDC Group\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtEdgegatewaySubnet:NsxtEdgegatewaySubnet"
                    },
                    "description": "One or more blocks with external network information to be attached to this gateway's interface\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                }
            },
            "requiredInputs": [
                "externalNetworkId",
                "subnets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtEdgegateway resources.\n",
                "properties": {
                    "dedicateExternalNetwork": {
                        "type": "boolean",
                        "description": "Dedicating the External Network will enable Route Advertisement for this Edge Gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Edge Gateway description\n"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified\n"
                    },
                    "externalNetworkId": {
                        "type": "string",
                        "description": "External network ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Edge Gateway name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "ID of VDC or VDC Group\n"
                    },
                    "primaryIp": {
                        "type": "string",
                        "description": "Primary IP address of edge gateway. Read-only (can be specified in specific subnet)\n"
                    },
                    "startingVdcId": {
                        "type": "string",
                        "description": "Optional ID of starting VDC if the 'owner_id' is a VDC Group\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtEdgegatewaySubnet:NsxtEdgegatewaySubnet"
                        },
                        "description": "One or more blocks with external network information to be attached to this gateway's interface\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtEdgegatewayBgpConfiguration:NsxtEdgegatewayBgpConfiguration": {
            "properties": {
                "ecmpEnabled": {
                    "type": "boolean",
                    "description": "Defines if ECMP (Equal-cost multi-path routing) is enabled\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID for BGP Configuration\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if BGP service is enabled\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Graceful restart configuration on Edge Gateway. One of 'DISABLE', 'HELPER_ONLY', 'GRACEFUL_AND_HELPER'\n"
                },
                "gracefulRestartTimer": {
                    "type": "integer",
                    "description": "Maximum time taken (in seconds) for a BGP session to be established after a restart\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Autonomous system number\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "staleRouteTimer": {
                    "type": "integer",
                    "description": "Maximum time (in seconds) before stale routes are removed when BGP restarts\n"
                }
            },
            "required": [
                "edgeGatewayId",
                "enabled",
                "gracefulRestartMode",
                "gracefulRestartTimer",
                "localAsNumber",
                "staleRouteTimer"
            ],
            "inputProperties": {
                "ecmpEnabled": {
                    "type": "boolean",
                    "description": "Defines if ECMP (Equal-cost multi-path routing) is enabled\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID for BGP Configuration\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if BGP service is enabled\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Graceful restart configuration on Edge Gateway. One of 'DISABLE', 'HELPER_ONLY', 'GRACEFUL_AND_HELPER'\n"
                },
                "gracefulRestartTimer": {
                    "type": "integer",
                    "description": "Maximum time taken (in seconds) for a BGP session to be established after a restart\n"
                },
                "localAsNumber": {
                    "type": "string",
                    "description": "Autonomous system number\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "staleRouteTimer": {
                    "type": "integer",
                    "description": "Maximum time (in seconds) before stale routes are removed when BGP restarts\n"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtEdgegatewayBgpConfiguration resources.\n",
                "properties": {
                    "ecmpEnabled": {
                        "type": "boolean",
                        "description": "Defines if ECMP (Equal-cost multi-path routing) is enabled\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID for BGP Configuration\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Defines if BGP service is enabled\n"
                    },
                    "gracefulRestartMode": {
                        "type": "string",
                        "description": "Graceful restart configuration on Edge Gateway. One of 'DISABLE', 'HELPER_ONLY', 'GRACEFUL_AND_HELPER'\n"
                    },
                    "gracefulRestartTimer": {
                        "type": "integer",
                        "description": "Maximum time taken (in seconds) for a BGP session to be established after a restart\n"
                    },
                    "localAsNumber": {
                        "type": "string",
                        "description": "Autonomous system number\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "staleRouteTimer": {
                        "type": "integer",
                        "description": "Maximum time (in seconds) before stale routes are removed when BGP restarts\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtEdgegatewayBgpIpPrefixList:NsxtEdgegatewayBgpIpPrefixList": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "BGP IP Prefix List description\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID for BGP IP Prefix List Configuration\n"
                },
                "ipPrefixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtEdgegatewayBgpIpPrefixListIpPrefix:NsxtEdgegatewayBgpIpPrefixListIpPrefix"
                    },
                    "description": "BGP IP Prefix List entry\n"
                },
                "name": {
                    "type": "string",
                    "description": "BGP IP Prefix List name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                }
            },
            "required": [
                "edgeGatewayId",
                "ipPrefixes",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "BGP IP Prefix List description\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID for BGP IP Prefix List Configuration\n",
                    "willReplaceOnChanges": true
                },
                "ipPrefixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtEdgegatewayBgpIpPrefixListIpPrefix:NsxtEdgegatewayBgpIpPrefixListIpPrefix"
                    },
                    "description": "BGP IP Prefix List entry\n"
                },
                "name": {
                    "type": "string",
                    "description": "BGP IP Prefix List name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "ipPrefixes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtEdgegatewayBgpIpPrefixList resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "BGP IP Prefix List description\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID for BGP IP Prefix List Configuration\n",
                        "willReplaceOnChanges": true
                    },
                    "ipPrefixes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtEdgegatewayBgpIpPrefixListIpPrefix:NsxtEdgegatewayBgpIpPrefixListIpPrefix"
                        },
                        "description": "BGP IP Prefix List entry\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "BGP IP Prefix List name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtEdgegatewayBgpNeighbor:NsxtEdgegatewayBgpNeighbor": {
            "properties": {
                "allowAsIn": {
                    "type": "boolean",
                    "description": "A flag indicating whether BGP neighbors can receive routes with same Autonomous System (AS) (default 'false')\n"
                },
                "bfdDeadMultiple": {
                    "type": "integer",
                    "description": "Number of times a heartbeat packet is missed before BFD declares that the neighbor is down\n"
                },
                "bfdEnabled": {
                    "type": "boolean",
                    "description": "BFD configuration for failure detection\n"
                },
                "bfdInterval": {
                    "type": "integer",
                    "description": "Time interval (in milliseconds) between heartbeat packets\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID for BGP Neighbor Configuration\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "One of 'DISABLE', 'HELPER_ONLY', 'GRACEFUL_AND_HELPER'\n"
                },
                "holdDownTimer": {
                    "type": "integer",
                    "description": "Time interval (in seconds) before declaring a peer dead\n"
                },
                "inFilterIpPrefixListId": {
                    "type": "string",
                    "description": "An optional IP Prefix List ID for filtering 'IN' direction.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "BGP Neighbor IP address (IPv4 or IPv6)\n"
                },
                "keepAliveTimer": {
                    "type": "integer",
                    "description": "Time interval (in seconds) between sending keep alive messages to a peer\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "outFilterIpPrefixListId": {
                    "type": "string",
                    "description": "An optional IP Prefix List ID for filtering 'OUT' direction.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Neighbor password\n"
                },
                "remoteAsNumber": {
                    "type": "string",
                    "description": "Remote Autonomous System (AS) number\n"
                },
                "routeFiltering": {
                    "type": "string",
                    "description": "One of 'DISABLED', 'IPV4', 'IPV6'\n"
                }
            },
            "required": [
                "allowAsIn",
                "bfdDeadMultiple",
                "bfdEnabled",
                "bfdInterval",
                "edgeGatewayId",
                "gracefulRestartMode",
                "holdDownTimer",
                "inFilterIpPrefixListId",
                "ipAddress",
                "keepAliveTimer",
                "outFilterIpPrefixListId",
                "remoteAsNumber",
                "routeFiltering"
            ],
            "inputProperties": {
                "allowAsIn": {
                    "type": "boolean",
                    "description": "A flag indicating whether BGP neighbors can receive routes with same Autonomous System (AS) (default 'false')\n"
                },
                "bfdDeadMultiple": {
                    "type": "integer",
                    "description": "Number of times a heartbeat packet is missed before BFD declares that the neighbor is down\n"
                },
                "bfdEnabled": {
                    "type": "boolean",
                    "description": "BFD configuration for failure detection\n"
                },
                "bfdInterval": {
                    "type": "integer",
                    "description": "Time interval (in milliseconds) between heartbeat packets\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway ID for BGP Neighbor Configuration\n",
                    "willReplaceOnChanges": true
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "One of 'DISABLE', 'HELPER_ONLY', 'GRACEFUL_AND_HELPER'\n"
                },
                "holdDownTimer": {
                    "type": "integer",
                    "description": "Time interval (in seconds) before declaring a peer dead\n"
                },
                "inFilterIpPrefixListId": {
                    "type": "string",
                    "description": "An optional IP Prefix List ID for filtering 'IN' direction.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "BGP Neighbor IP address (IPv4 or IPv6)\n"
                },
                "keepAliveTimer": {
                    "type": "integer",
                    "description": "Time interval (in seconds) between sending keep alive messages to a peer\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "outFilterIpPrefixListId": {
                    "type": "string",
                    "description": "An optional IP Prefix List ID for filtering 'OUT' direction.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Neighbor password\n"
                },
                "remoteAsNumber": {
                    "type": "string",
                    "description": "Remote Autonomous System (AS) number\n"
                },
                "routeFiltering": {
                    "type": "string",
                    "description": "One of 'DISABLED', 'IPV4', 'IPV6'\n"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "ipAddress",
                "remoteAsNumber"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtEdgegatewayBgpNeighbor resources.\n",
                "properties": {
                    "allowAsIn": {
                        "type": "boolean",
                        "description": "A flag indicating whether BGP neighbors can receive routes with same Autonomous System (AS) (default 'false')\n"
                    },
                    "bfdDeadMultiple": {
                        "type": "integer",
                        "description": "Number of times a heartbeat packet is missed before BFD declares that the neighbor is down\n"
                    },
                    "bfdEnabled": {
                        "type": "boolean",
                        "description": "BFD configuration for failure detection\n"
                    },
                    "bfdInterval": {
                        "type": "integer",
                        "description": "Time interval (in milliseconds) between heartbeat packets\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway ID for BGP Neighbor Configuration\n",
                        "willReplaceOnChanges": true
                    },
                    "gracefulRestartMode": {
                        "type": "string",
                        "description": "One of 'DISABLE', 'HELPER_ONLY', 'GRACEFUL_AND_HELPER'\n"
                    },
                    "holdDownTimer": {
                        "type": "integer",
                        "description": "Time interval (in seconds) before declaring a peer dead\n"
                    },
                    "inFilterIpPrefixListId": {
                        "type": "string",
                        "description": "An optional IP Prefix List ID for filtering 'IN' direction.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "BGP Neighbor IP address (IPv4 or IPv6)\n"
                    },
                    "keepAliveTimer": {
                        "type": "integer",
                        "description": "Time interval (in seconds) between sending keep alive messages to a peer\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "outFilterIpPrefixListId": {
                        "type": "string",
                        "description": "An optional IP Prefix List ID for filtering 'OUT' direction.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Neighbor password\n"
                    },
                    "remoteAsNumber": {
                        "type": "string",
                        "description": "Remote Autonomous System (AS) number\n"
                    },
                    "routeFiltering": {
                        "type": "string",
                        "description": "One of 'DISABLED', 'IPV4', 'IPV6'\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtFirewall:NsxtFirewall": {
            "properties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway ID in which Firewall Rule are located\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtFirewallRule:NsxtFirewallRule"
                    },
                    "description": "Ordered list of firewall rules\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "required": [
                "edgeGatewayId",
                "rules",
                "vdc"
            ],
            "inputProperties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway ID in which Firewall Rule are located\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtFirewallRule:NsxtFirewallRule"
                    },
                    "description": "Ordered list of firewall rules\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtFirewall resources.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge Gateway ID in which Firewall Rule are located\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtFirewallRule:NsxtFirewallRule"
                        },
                        "description": "Ordered list of firewall rules\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtIpSet:NsxtIpSet": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "IP Set description\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway name in which IP Set is located\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP address, CIDR, IP range objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "IP Set name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. IP Sets will inherit VDC from parent Edge Gateway."
                }
            },
            "required": [
                "edgeGatewayId",
                "name",
                "ownerId",
                "vdc"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "IP Set description\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway name in which IP Set is located\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP address, CIDR, IP range objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "IP Set name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. IP Sets will inherit VDC from parent Edge Gateway."
                }
            },
            "requiredInputs": [
                "edgeGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtIpSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "IP Set description\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge Gateway name in which IP Set is located\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IP address, CIDR, IP range objects\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IP Set name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "ID of VDC or VDC Group\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. IP Sets will inherit VDC from parent Edge Gateway."
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtIpsecVpnTunnel:NsxtIpsecVpnTunnel": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description IP Sec VPN Tunnel\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway name in which IP Sec VPN configuration is located\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enables or disables this configuration (default true)\n"
                },
                "ikeFailReason": {
                    "type": "string",
                    "description": "Provides more details of failure if the IKE service is not UP\n"
                },
                "ikeServiceStatus": {
                    "type": "string",
                    "description": "Status for the actual IKE Session for the given tunnel\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.\n"
                },
                "localNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of local networks in CIDR format. At least one value is required\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Sets whether logging for the tunnel is enabled or not. (default - false)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of IP Sec VPN Tunnel\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-Shared Key (PSK)\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "Public IPv4 Address of the remote device terminating the VPN connection\n"
                },
                "remoteNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0\n"
                },
                "securityProfile": {
                    "type": "string",
                    "description": "Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some\nchanges are applied\n"
                },
                "securityProfileCustomization": {
                    "$ref": "#/types/vcd:index/NsxtIpsecVpnTunnelSecurityProfileCustomization:NsxtIpsecVpnTunnelSecurityProfileCustomization",
                    "description": "Security profile customization\n"
                },
                "status": {
                    "type": "string",
                    "description": "Overall IPsec VPN Tunnel Status\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "required": [
                "edgeGatewayId",
                "ikeFailReason",
                "ikeServiceStatus",
                "localIpAddress",
                "localNetworks",
                "name",
                "preSharedKey",
                "remoteIpAddress",
                "securityProfile",
                "status",
                "vdc"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description IP Sec VPN Tunnel\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway name in which IP Sec VPN configuration is located\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enables or disables this configuration (default true)\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.\n"
                },
                "localNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of local networks in CIDR format. At least one value is required\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Sets whether logging for the tunnel is enabled or not. (default - false)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of IP Sec VPN Tunnel\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-Shared Key (PSK)\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "Public IPv4 Address of the remote device terminating the VPN connection\n"
                },
                "remoteNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0\n"
                },
                "securityProfileCustomization": {
                    "$ref": "#/types/vcd:index/NsxtIpsecVpnTunnelSecurityProfileCustomization:NsxtIpsecVpnTunnelSecurityProfileCustomization",
                    "description": "Security profile customization\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "localIpAddress",
                "localNetworks",
                "preSharedKey",
                "remoteIpAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtIpsecVpnTunnel resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description IP Sec VPN Tunnel\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway name in which IP Sec VPN configuration is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enables or disables this configuration (default true)\n"
                    },
                    "ikeFailReason": {
                        "type": "string",
                        "description": "Provides more details of failure if the IKE service is not UP\n"
                    },
                    "ikeServiceStatus": {
                        "type": "string",
                        "description": "Status for the actual IKE Session for the given tunnel\n"
                    },
                    "localIpAddress": {
                        "type": "string",
                        "description": "IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.\n"
                    },
                    "localNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of local networks in CIDR format. At least one value is required\n"
                    },
                    "logging": {
                        "type": "boolean",
                        "description": "Sets whether logging for the tunnel is enabled or not. (default - false)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of IP Sec VPN Tunnel\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "Pre-Shared Key (PSK)\n"
                    },
                    "remoteIpAddress": {
                        "type": "string",
                        "description": "Public IPv4 Address of the remote device terminating the VPN connection\n"
                    },
                    "remoteNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0\n"
                    },
                    "securityProfile": {
                        "type": "string",
                        "description": "Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some\nchanges are applied\n"
                    },
                    "securityProfileCustomization": {
                        "$ref": "#/types/vcd:index/NsxtIpsecVpnTunnelSecurityProfileCustomization:NsxtIpsecVpnTunnelSecurityProfileCustomization",
                        "description": "Security profile customization\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Overall IPsec VPN Tunnel Status\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtNatRule:NsxtNatRule": {
            "properties": {
                "appPortProfileId": {
                    "type": "string",
                    "description": "Application Port Profile to apply for this rule\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of NAT rule\n"
                },
                "dnatExternalPort": {
                    "type": "string",
                    "description": "For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway name in which NAT Rule is located\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enables or disables this rule\n"
                },
                "externalAddress": {
                    "type": "string",
                    "description": "IP address or CIDR of external network\n"
                },
                "firewallMatch": {
                    "type": "string",
                    "description": "VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of\n'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'\n"
                },
                "internalAddress": {
                    "type": "string",
                    "description": "IP address or CIDR of the virtual machines for which you are configuring NAT\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Enable logging when this rule is applied\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of NAT rule\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a\nhigher precedence for this rule.\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'\n"
                },
                "snatDestinationAddress": {
                    "type": "string",
                    "description": "For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain\nor an IP address range in CIDR format.\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "required": [
                "edgeGatewayId",
                "firewallMatch",
                "name",
                "priority",
                "ruleType",
                "vdc"
            ],
            "inputProperties": {
                "appPortProfileId": {
                    "type": "string",
                    "description": "Application Port Profile to apply for this rule\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of NAT rule\n"
                },
                "dnatExternalPort": {
                    "type": "string",
                    "description": "For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge gateway name in which NAT Rule is located\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enables or disables this rule\n"
                },
                "externalAddress": {
                    "type": "string",
                    "description": "IP address or CIDR of external network\n"
                },
                "firewallMatch": {
                    "type": "string",
                    "description": "VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of\n'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'\n"
                },
                "internalAddress": {
                    "type": "string",
                    "description": "IP address or CIDR of the virtual machines for which you are configuring NAT\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Enable logging when this rule is applied\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of NAT rule\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a\nhigher precedence for this rule.\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'\n",
                    "willReplaceOnChanges": true
                },
                "snatDestinationAddress": {
                    "type": "string",
                    "description": "For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain\nor an IP address range in CIDR format.\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                }
            },
            "requiredInputs": [
                "edgeGatewayId",
                "ruleType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtNatRule resources.\n",
                "properties": {
                    "appPortProfileId": {
                        "type": "string",
                        "description": "Application Port Profile to apply for this rule\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of NAT rule\n"
                    },
                    "dnatExternalPort": {
                        "type": "string",
                        "description": "For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge gateway name in which NAT Rule is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enables or disables this rule\n"
                    },
                    "externalAddress": {
                        "type": "string",
                        "description": "IP address or CIDR of external network\n"
                    },
                    "firewallMatch": {
                        "type": "string",
                        "description": "VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of\n'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'\n"
                    },
                    "internalAddress": {
                        "type": "string",
                        "description": "IP address or CIDR of the virtual machines for which you are configuring NAT\n"
                    },
                    "logging": {
                        "type": "boolean",
                        "description": "Enable logging when this rule is applied\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of NAT rule\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a\nhigher precedence for this rule.\n"
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'\n",
                        "willReplaceOnChanges": true
                    },
                    "snatDestinationAddress": {
                        "type": "string",
                        "description": "For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain\nor an IP address range in CIDR format.\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtNetworkDhcp:NsxtNetworkDhcp": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS server IPs to be assigned by this DHCP service. 2 values maximum.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time in seconds\n"
                },
                "listenerIpAddress": {
                    "type": "string",
                    "description": "IP Address of DHCP server in network. Only applicable when mode=NETWORK\n"
                },
                "mode": {
                    "type": "string",
                    "description": "DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "orgNetworkId": {
                    "type": "string",
                    "description": "Parent Org VDC network ID\n"
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtNetworkDhcpPool:NsxtNetworkDhcpPool"
                    },
                    "description": "IP ranges used for DHCP pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Org network will be looked up based on 'org_network_id' field"
                }
            },
            "required": [
                "leaseTime",
                "orgNetworkId",
                "vdc"
            ],
            "inputProperties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS server IPs to be assigned by this DHCP service. 2 values maximum.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time in seconds\n"
                },
                "listenerIpAddress": {
                    "type": "string",
                    "description": "IP Address of DHCP server in network. Only applicable when mode=NETWORK\n"
                },
                "mode": {
                    "type": "string",
                    "description": "DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "orgNetworkId": {
                    "type": "string",
                    "description": "Parent Org VDC network ID\n",
                    "willReplaceOnChanges": true
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtNetworkDhcpPool:NsxtNetworkDhcpPool"
                    },
                    "description": "IP ranges used for DHCP pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Org network will be looked up based on 'org_network_id' field"
                }
            },
            "requiredInputs": [
                "orgNetworkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtNetworkDhcp resources.\n",
                "properties": {
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The DNS server IPs to be assigned by this DHCP service. 2 values maximum.\n"
                    },
                    "leaseTime": {
                        "type": "integer",
                        "description": "Lease time in seconds\n"
                    },
                    "listenerIpAddress": {
                        "type": "string",
                        "description": "IP Address of DHCP server in network. Only applicable when mode=NETWORK\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "orgNetworkId": {
                        "type": "string",
                        "description": "Parent Org VDC network ID\n",
                        "willReplaceOnChanges": true
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtNetworkDhcpPool:NsxtNetworkDhcpPool"
                        },
                        "description": "IP ranges used for DHCP pool allocation in the network\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Org network will be looked up based on 'org_network_id' field"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtNetworkImported:NsxtNetworkImported": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "nsxtLogicalSwitchId": {
                    "type": "string",
                    "description": "ID of existing NSX-T Logical Switch\n"
                },
                "nsxtLogicalSwitchName": {
                    "type": "string",
                    "description": "Name of existing NSX-T Logical Switch\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Network prefix\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtNetworkImportedStaticIpPool:NsxtNetworkImportedStaticIpPool"
                    },
                    "description": "IP ranges used for static pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                }
            },
            "required": [
                "gateway",
                "name",
                "nsxtLogicalSwitchId",
                "nsxtLogicalSwitchName",
                "ownerId",
                "prefixLength",
                "vdc"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Network description\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "DNS server 1\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "nsxtLogicalSwitchName": {
                    "type": "string",
                    "description": "Name of existing NSX-T Logical Switch\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Network prefix\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtNetworkImportedStaticIpPool:NsxtNetworkImportedStaticIpPool"
                    },
                    "description": "IP ranges used for static pool allocation in the network\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                }
            },
            "requiredInputs": [
                "gateway",
                "nsxtLogicalSwitchName",
                "prefixLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtNetworkImported resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Network description\n"
                    },
                    "dns1": {
                        "type": "string",
                        "description": "DNS server 1\n"
                    },
                    "dns2": {
                        "type": "string",
                        "description": "DNS server 1\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "DNS suffix\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway IP address\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network name\n"
                    },
                    "nsxtLogicalSwitchId": {
                        "type": "string",
                        "description": "ID of existing NSX-T Logical Switch\n"
                    },
                    "nsxtLogicalSwitchName": {
                        "type": "string",
                        "description": "Name of existing NSX-T Logical Switch\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "ID of VDC or VDC Group\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "Network prefix\n"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtNetworkImportedStaticIpPool:NsxtNetworkImportedStaticIpPool"
                        },
                        "description": "IP ranges used for static pool allocation in the network\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtRouteAdvertisement:NsxtRouteAdvertisement": {
            "properties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "NSX-T Edge Gateway ID in which route advertisement is located\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if route advertisement is active\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of subnets that will be advertised to Tier-0 gateway. Empty means none\n"
                }
            },
            "required": [
                "edgeGatewayId"
            ],
            "inputProperties": {
                "edgeGatewayId": {
                    "type": "string",
                    "description": "NSX-T Edge Gateway ID in which route advertisement is located\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if route advertisement is active\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of subnets that will be advertised to Tier-0 gateway. Empty means none\n"
                }
            },
            "requiredInputs": [
                "edgeGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtRouteAdvertisement resources.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "NSX-T Edge Gateway ID in which route advertisement is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Defines if route advertisement is active\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of subnets that will be advertised to Tier-0 gateway. Empty means none\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxtSecurityGroup:NsxtSecurityGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Security Group description\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway ID in which security group is located\n"
                },
                "memberOrgNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of Org VDC network IDs attached to this security group\n"
                },
                "memberVms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxtSecurityGroupMemberVm:NsxtSecurityGroupMemberVm"
                    },
                    "description": "Set of VM IDs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Security Group name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "ID of VDC or VDC Group\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Security Group will inherit VDC from parent Edge Gateway."
                }
            },
            "required": [
                "edgeGatewayId",
                "memberVms",
                "name",
                "ownerId",
                "vdc"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Security Group description\n"
                },
                "edgeGatewayId": {
                    "type": "string",
                    "description": "Edge Gateway ID in which security group is located\n",
                    "willReplaceOnChanges": true
                },
                "memberOrgNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of Org VDC network IDs attached to this security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Security Group name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Security Group will inherit VDC from parent Edge Gateway."
                }
            },
            "requiredInputs": [
                "edgeGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxtSecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Security Group description\n"
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "description": "Edge Gateway ID in which security group is located\n",
                        "willReplaceOnChanges": true
                    },
                    "memberOrgNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of Org VDC network IDs attached to this security group\n"
                    },
                    "memberVms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxtSecurityGroupMemberVm:NsxtSecurityGroupMemberVm"
                        },
                        "description": "Set of VM IDs\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Security Group name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "ID of VDC or VDC Group\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Security Group will inherit VDC from parent Edge Gateway."
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxvDhcpRelay:NsxvDhcpRelay": {
            "properties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP domain names of DHCP servers\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name for DHCP relay settings\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP address of DHCP servers\n"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP set names which consist DHCP servers\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "relayAgents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxvDhcpRelayRelayAgent:NsxvDhcpRelayRelayAgent"
                    }
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "relayAgents"
            ],
            "inputProperties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP domain names of DHCP servers\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name for DHCP relay settings\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP address of DHCP servers\n"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP set names which consist DHCP servers\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "relayAgents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxvDhcpRelayRelayAgent:NsxvDhcpRelayRelayAgent"
                    }
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "relayAgents"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxvDhcpRelay resources.\n",
                "properties": {
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IP domain names of DHCP servers\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name for DHCP relay settings\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IP address of DHCP servers\n"
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IP set names which consist DHCP servers\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "relayAgents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxvDhcpRelayRelayAgent:NsxvDhcpRelayRelayAgent"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxvDnat:NsxvDnat": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "NAT rule description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which NAT Rule is located\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be enabled. Default 'true'\n"
                },
                "icmpType": {
                    "type": "string",
                    "description": "ICMP type. Only supported when protocol is ICMP. One of `any`, `address-mask-request`, `address-mask-reply`,\n`destination-unreachable`, `echo-request`, `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`,\n`router-solicitation`, `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`\n"
                },
                "loggingEnabled": {
                    "type": "boolean",
                    "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Org or external network name\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type. One of 'ext', 'org'\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "originalAddress": {
                    "type": "string",
                    "description": "Original address or address range. This is the the destination address for DNAT rules.\n"
                },
                "originalPort": {
                    "type": "string",
                    "description": "Original port. This is the destination port for DNAT rules\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Such as 'tcp', 'udp', 'icmp', 'any'\n"
                },
                "ruleTag": {
                    "type": "integer",
                    "description": "Optional. Allows to set custom rule tag\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Read only. Possible values 'user', 'internal_high'\n"
                },
                "translatedAddress": {
                    "type": "string",
                    "description": "Translated address or address range\n"
                },
                "translatedPort": {
                    "type": "string",
                    "description": "Translated port\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "networkName",
                "networkType",
                "originalAddress",
                "ruleTag",
                "ruleType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "NAT rule description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which NAT Rule is located\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be enabled. Default 'true'\n"
                },
                "icmpType": {
                    "type": "string",
                    "description": "ICMP type. Only supported when protocol is ICMP. One of `any`, `address-mask-request`, `address-mask-reply`,\n`destination-unreachable`, `echo-request`, `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`,\n`router-solicitation`, `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`\n"
                },
                "loggingEnabled": {
                    "type": "boolean",
                    "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Org or external network name\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type. One of 'ext', 'org'\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "originalAddress": {
                    "type": "string",
                    "description": "Original address or address range. This is the the destination address for DNAT rules.\n"
                },
                "originalPort": {
                    "type": "string",
                    "description": "Original port. This is the destination port for DNAT rules\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Such as 'tcp', 'udp', 'icmp', 'any'\n"
                },
                "ruleTag": {
                    "type": "integer",
                    "description": "Optional. Allows to set custom rule tag\n",
                    "willReplaceOnChanges": true
                },
                "ruleType": {
                    "type": "string",
                    "description": "Read only. Possible values 'user', 'internal_high'\n"
                },
                "translatedAddress": {
                    "type": "string",
                    "description": "Translated address or address range\n"
                },
                "translatedPort": {
                    "type": "string",
                    "description": "Translated port\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "networkName",
                "networkType",
                "originalAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxvDnat resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "NAT rule description\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which NAT Rule is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should be enabled. Default 'true'\n"
                    },
                    "icmpType": {
                        "type": "string",
                        "description": "ICMP type. Only supported when protocol is ICMP. One of `any`, `address-mask-request`, `address-mask-reply`,\n`destination-unreachable`, `echo-request`, `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`,\n`router-solicitation`, `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`\n"
                    },
                    "loggingEnabled": {
                        "type": "boolean",
                        "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Org or external network name\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "Network type. One of 'ext', 'org'\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "originalAddress": {
                        "type": "string",
                        "description": "Original address or address range. This is the the destination address for DNAT rules.\n"
                    },
                    "originalPort": {
                        "type": "string",
                        "description": "Original port. This is the destination port for DNAT rules\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Such as 'tcp', 'udp', 'icmp', 'any'\n"
                    },
                    "ruleTag": {
                        "type": "integer",
                        "description": "Optional. Allows to set custom rule tag\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Read only. Possible values 'user', 'internal_high'\n"
                    },
                    "translatedAddress": {
                        "type": "string",
                        "description": "Translated address or address range\n"
                    },
                    "translatedPort": {
                        "type": "string",
                        "description": "Translated port\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxvFirewallRule:NsxvFirewallRule": {
            "properties": {
                "aboveRuleId": {
                    "type": "string",
                    "description": "This firewall rule will be inserted above the referred one\n"
                },
                "action": {
                    "type": "string",
                    "description": "'accept' or 'deny'. Default 'accept'\n"
                },
                "destination": {
                    "$ref": "#/types/vcd:index/NsxvFirewallRuleDestination:NsxvFirewallRuleDestination"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which Firewall Rule is located\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be enabled. Default 'true'\n"
                },
                "loggingEnabled": {
                    "type": "boolean",
                    "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                },
                "name": {
                    "type": "string",
                    "description": "Firewall rule name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "ruleTag": {
                    "type": "integer",
                    "description": "Optional. Allows to set custom rule tag\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Read only. Possible values 'user', 'internal_high'\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxvFirewallRuleService:NsxvFirewallRuleService"
                    }
                },
                "source": {
                    "$ref": "#/types/vcd:index/NsxvFirewallRuleSource:NsxvFirewallRuleSource"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "destination",
                "edgeGateway",
                "name",
                "ruleTag",
                "ruleType",
                "services",
                "source"
            ],
            "inputProperties": {
                "aboveRuleId": {
                    "type": "string",
                    "description": "This firewall rule will be inserted above the referred one\n",
                    "willReplaceOnChanges": true
                },
                "action": {
                    "type": "string",
                    "description": "'accept' or 'deny'. Default 'accept'\n"
                },
                "destination": {
                    "$ref": "#/types/vcd:index/NsxvFirewallRuleDestination:NsxvFirewallRuleDestination"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which Firewall Rule is located\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be enabled. Default 'true'\n"
                },
                "loggingEnabled": {
                    "type": "boolean",
                    "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                },
                "name": {
                    "type": "string",
                    "description": "Firewall rule name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "ruleTag": {
                    "type": "integer",
                    "description": "Optional. Allows to set custom rule tag\n",
                    "willReplaceOnChanges": true
                },
                "ruleType": {
                    "type": "string",
                    "description": "Read only. Possible values 'user', 'internal_high'\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/NsxvFirewallRuleService:NsxvFirewallRuleService"
                    }
                },
                "source": {
                    "$ref": "#/types/vcd:index/NsxvFirewallRuleSource:NsxvFirewallRuleSource"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destination",
                "edgeGateway",
                "services",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxvFirewallRule resources.\n",
                "properties": {
                    "aboveRuleId": {
                        "type": "string",
                        "description": "This firewall rule will be inserted above the referred one\n",
                        "willReplaceOnChanges": true
                    },
                    "action": {
                        "type": "string",
                        "description": "'accept' or 'deny'. Default 'accept'\n"
                    },
                    "destination": {
                        "$ref": "#/types/vcd:index/NsxvFirewallRuleDestination:NsxvFirewallRuleDestination"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which Firewall Rule is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should be enabled. Default 'true'\n"
                    },
                    "loggingEnabled": {
                        "type": "boolean",
                        "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Firewall rule name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleTag": {
                        "type": "integer",
                        "description": "Optional. Allows to set custom rule tag\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Read only. Possible values 'user', 'internal_high'\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/NsxvFirewallRuleService:NsxvFirewallRuleService"
                        }
                    },
                    "source": {
                        "$ref": "#/types/vcd:index/NsxvFirewallRuleSource:NsxvFirewallRuleSource"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxvIpSet:NsxvIpSet": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "IP set description\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP address, CIDR, IP range objects\n"
                },
                "isInheritanceAllowed": {
                    "type": "boolean",
                    "description": "Allows visibility in underlying scopes (Default is true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "IP set name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "ipAddresses",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "IP set description\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IP address, CIDR, IP range objects\n"
                },
                "isInheritanceAllowed": {
                    "type": "boolean",
                    "description": "Allows visibility in underlying scopes (Default is true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "IP set name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipAddresses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxvIpSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "IP set description\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IP address, CIDR, IP range objects\n"
                    },
                    "isInheritanceAllowed": {
                        "type": "boolean",
                        "description": "Allows visibility in underlying scopes (Default is true)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IP set name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/nsxvSnat:NsxvSnat": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "NAT rule description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which NAT Rule is located\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be enabled. Default 'true'\n"
                },
                "loggingEnabled": {
                    "type": "boolean",
                    "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Org or external network name\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type. One of 'ext', 'org'\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "originalAddress": {
                    "type": "string",
                    "description": "Original address or address range. This is the the source address for SNAT rules\n"
                },
                "ruleTag": {
                    "type": "integer",
                    "description": "Optional. Allows to set custom rule tag\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Read only. Possible values 'user', 'internal_high'\n"
                },
                "translatedAddress": {
                    "type": "string",
                    "description": "Translated address or address range\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "edgeGateway",
                "networkName",
                "networkType",
                "originalAddress",
                "ruleTag",
                "ruleType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "NAT rule description\n"
                },
                "edgeGateway": {
                    "type": "string",
                    "description": "Edge gateway name in which NAT Rule is located\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be enabled. Default 'true'\n"
                },
                "loggingEnabled": {
                    "type": "boolean",
                    "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Org or external network name\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type. One of 'ext', 'org'\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "originalAddress": {
                    "type": "string",
                    "description": "Original address or address range. This is the the source address for SNAT rules\n"
                },
                "ruleTag": {
                    "type": "integer",
                    "description": "Optional. Allows to set custom rule tag\n",
                    "willReplaceOnChanges": true
                },
                "ruleType": {
                    "type": "string",
                    "description": "Read only. Possible values 'user', 'internal_high'\n"
                },
                "translatedAddress": {
                    "type": "string",
                    "description": "Translated address or address range\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "edgeGateway",
                "networkName",
                "networkType",
                "originalAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsxvSnat resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "NAT rule description\n"
                    },
                    "edgeGateway": {
                        "type": "string",
                        "description": "Edge gateway name in which NAT Rule is located\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should be enabled. Default 'true'\n"
                    },
                    "loggingEnabled": {
                        "type": "boolean",
                        "description": "Whether logging should be enabled for this rule. Default 'false'\n"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Org or external network name\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "Network type. One of 'ext', 'org'\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "originalAddress": {
                        "type": "string",
                        "description": "Original address or address range. This is the the source address for SNAT rules\n"
                    },
                    "ruleTag": {
                        "type": "integer",
                        "description": "Optional. Allows to set custom rule tag\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Read only. Possible values 'user', 'internal_high'\n"
                    },
                    "translatedAddress": {
                        "type": "string",
                        "description": "Translated address or address range\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/org:Org": {
            "properties": {
                "canPublishCatalogs": {
                    "type": "boolean",
                    "description": "True if this organization is allowed to share catalogs.\n"
                },
                "canPublishExternalCatalogs": {
                    "type": "boolean",
                    "description": "True if this organization is allowed to publish external catalogs.\n"
                },
                "canSubscribeExternalCatalogs": {
                    "type": "boolean",
                    "description": "True if this organization is allowed to subscribe to external catalogs.\n"
                },
                "delayAfterPowerOnSeconds": {
                    "type": "integer",
                    "description": "Specifies this organization's default for virtual machine boot delay after power on.\n"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,\nregardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "deployedVmQuota": {
                    "type": "integer",
                    "description": "Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)\n"
                },
                "description": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "True if this organization is enabled (allows login and all other operations).\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this organization. Key and value can be any string.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgMetadataEntry:OrgMetadataEntry"
                    },
                    "description": "Metadata entries for the given Organization\n"
                },
                "name": {
                    "type": "string"
                },
                "storedVmQuota": {
                    "type": "integer",
                    "description": "Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of\nthis organization. (0 = unlimited)\n"
                },
                "vappLease": {
                    "$ref": "#/types/vcd:index/OrgVappLease:OrgVappLease",
                    "description": "Defines lease parameters for vApps created in this organization\n"
                },
                "vappTemplateLease": {
                    "$ref": "#/types/vcd:index/OrgVappTemplateLease:OrgVappTemplateLease",
                    "description": "Defines lease parameters for vApp templates created in this organization\n"
                }
            },
            "required": [
                "deleteForce",
                "deleteRecursive",
                "fullName",
                "metadata",
                "metadataEntries",
                "name",
                "vappLease",
                "vappTemplateLease"
            ],
            "inputProperties": {
                "canPublishCatalogs": {
                    "type": "boolean",
                    "description": "True if this organization is allowed to share catalogs.\n"
                },
                "canPublishExternalCatalogs": {
                    "type": "boolean",
                    "description": "True if this organization is allowed to publish external catalogs.\n"
                },
                "canSubscribeExternalCatalogs": {
                    "type": "boolean",
                    "description": "True if this organization is allowed to subscribe to external catalogs.\n"
                },
                "delayAfterPowerOnSeconds": {
                    "type": "integer",
                    "description": "Specifies this organization's default for virtual machine boot delay after power on.\n"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,\nregardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "deployedVmQuota": {
                    "type": "integer",
                    "description": "Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)\n"
                },
                "description": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "True if this organization is enabled (allows login and all other operations).\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this organization. Key and value can be any string.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgMetadataEntry:OrgMetadataEntry"
                    },
                    "description": "Metadata entries for the given Organization\n"
                },
                "name": {
                    "type": "string"
                },
                "storedVmQuota": {
                    "type": "integer",
                    "description": "Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of\nthis organization. (0 = unlimited)\n"
                },
                "vappLease": {
                    "$ref": "#/types/vcd:index/OrgVappLease:OrgVappLease",
                    "description": "Defines lease parameters for vApps created in this organization\n"
                },
                "vappTemplateLease": {
                    "$ref": "#/types/vcd:index/OrgVappTemplateLease:OrgVappTemplateLease",
                    "description": "Defines lease parameters for vApp templates created in this organization\n"
                }
            },
            "requiredInputs": [
                "deleteForce",
                "deleteRecursive",
                "fullName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Org resources.\n",
                "properties": {
                    "canPublishCatalogs": {
                        "type": "boolean",
                        "description": "True if this organization is allowed to share catalogs.\n"
                    },
                    "canPublishExternalCatalogs": {
                        "type": "boolean",
                        "description": "True if this organization is allowed to publish external catalogs.\n"
                    },
                    "canSubscribeExternalCatalogs": {
                        "type": "boolean",
                        "description": "True if this organization is allowed to subscribe to external catalogs.\n"
                    },
                    "delayAfterPowerOnSeconds": {
                        "type": "integer",
                        "description": "Specifies this organization's default for virtual machine boot delay after power on.\n"
                    },
                    "deleteForce": {
                        "type": "boolean",
                        "description": "When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,\nregardless of their state.\n"
                    },
                    "deleteRecursive": {
                        "type": "boolean",
                        "description": "When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that\nnormally allows removal.\n"
                    },
                    "deployedVmQuota": {
                        "type": "integer",
                        "description": "Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "True if this organization is enabled (allows login and all other operations).\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this organization. Key and value can be any string.\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/OrgMetadataEntry:OrgMetadataEntry"
                        },
                        "description": "Metadata entries for the given Organization\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "storedVmQuota": {
                        "type": "integer",
                        "description": "Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of\nthis organization. (0 = unlimited)\n"
                    },
                    "vappLease": {
                        "$ref": "#/types/vcd:index/OrgVappLease:OrgVappLease",
                        "description": "Defines lease parameters for vApps created in this organization\n"
                    },
                    "vappTemplateLease": {
                        "$ref": "#/types/vcd:index/OrgVappTemplateLease:OrgVappTemplateLease",
                        "description": "Defines lease parameters for vApp templates created in this organization\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/orgGroup:OrgGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Group name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Identity provider type - 'SAML' or 'INTEGRATED' for LDAP\n"
                },
                "role": {
                    "type": "string",
                    "description": "Existing role name to assign\n"
                },
                "userNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Read only. Set of user names that belong to the group\n"
                }
            },
            "required": [
                "name",
                "providerType",
                "role",
                "userNames"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Group name\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "providerType": {
                    "type": "string",
                    "description": "Identity provider type - 'SAML' or 'INTEGRATED' for LDAP\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Existing role name to assign\n"
                }
            },
            "requiredInputs": [
                "providerType",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Identity provider type - 'SAML' or 'INTEGRATED' for LDAP\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "Existing role name to assign\n"
                    },
                    "userNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Read only. Set of user names that belong to the group\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/orgLdap:OrgLdap": {
            "properties": {
                "customSettings": {
                    "$ref": "#/types/vcd:index/OrgLdapCustomSettings:OrgLdapCustomSettings",
                    "description": "Custom settings when `ldap_mode` is CUSTOM\n"
                },
                "ldapMode": {
                    "type": "string",
                    "description": "Type of LDAP settings (one of NONE, SYSTEM, CUSTOM)\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization ID\n"
                }
            },
            "required": [
                "ldapMode",
                "orgId"
            ],
            "inputProperties": {
                "customSettings": {
                    "$ref": "#/types/vcd:index/OrgLdapCustomSettings:OrgLdapCustomSettings",
                    "description": "Custom settings when `ldap_mode` is CUSTOM\n"
                },
                "ldapMode": {
                    "type": "string",
                    "description": "Type of LDAP settings (one of NONE, SYSTEM, CUSTOM)\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ldapMode",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgLdap resources.\n",
                "properties": {
                    "customSettings": {
                        "$ref": "#/types/vcd:index/OrgLdapCustomSettings:OrgLdapCustomSettings",
                        "description": "Custom settings when `ldap_mode` is CUSTOM\n"
                    },
                    "ldapMode": {
                        "type": "string",
                        "description": "Type of LDAP settings (one of NONE, SYSTEM, CUSTOM)\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/orgUser:OrgUser": {
            "properties": {
                "deployedVmQuota": {
                    "type": "integer",
                    "description": "Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The user's description\n"
                },
                "emailAddress": {
                    "type": "string",
                    "description": "The user's email address\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True if the user is enabled and can log in.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The user's full name\n"
                },
                "groupNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Read only. Set of group names that this user belongs to\n"
                },
                "instantMessaging": {
                    "type": "string",
                    "description": "The user's telephone\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "True if this user is imported from an external resource, like an LDAP.\n"
                },
                "isGroupRole": {
                    "type": "boolean",
                    "description": "True if this user has a group role.\n"
                },
                "isLocked": {
                    "type": "boolean",
                    "description": "If the user account has been locked due to too many invalid login attempts, the value will change to true (only the\nsystem can lock the user). To unlock the user re-set this flag to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User's name. Only lowercase letters allowed. Cannot be changed after creation\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user's password. This value is never returned on read. Either \"password\" or \"password_file\" must be included on\ncreation unless is_external is true.\n"
                },
                "passwordFile": {
                    "type": "string",
                    "description": "Name of a file containing the user's password. Either \"password_file\" or \"password\" must be included on creation unless\nis_external is true.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value\n'INTEGRATED' is used.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role within the organization\n"
                },
                "storedVmQuota": {
                    "type": "integer",
                    "description": "Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.\n"
                },
                "takeOwnership": {
                    "type": "boolean",
                    "description": "Take ownership of user's objects on deletion.\n"
                },
                "telephone": {
                    "type": "string",
                    "description": "The user's telephone\n"
                }
            },
            "required": [
                "deployedVmQuota",
                "emailAddress",
                "fullName",
                "groupNames",
                "instantMessaging",
                "name",
                "role",
                "storedVmQuota",
                "telephone"
            ],
            "inputProperties": {
                "deployedVmQuota": {
                    "type": "integer",
                    "description": "Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The user's description\n"
                },
                "emailAddress": {
                    "type": "string",
                    "description": "The user's email address\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True if the user is enabled and can log in.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The user's full name\n"
                },
                "instantMessaging": {
                    "type": "string",
                    "description": "The user's telephone\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "True if this user is imported from an external resource, like an LDAP.\n",
                    "willReplaceOnChanges": true
                },
                "isGroupRole": {
                    "type": "boolean",
                    "description": "True if this user has a group role.\n"
                },
                "isLocked": {
                    "type": "boolean",
                    "description": "If the user account has been locked due to too many invalid login attempts, the value will change to true (only the\nsystem can lock the user). To unlock the user re-set this flag to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User's name. Only lowercase letters allowed. Cannot be changed after creation\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The user's password. This value is never returned on read. Either \"password\" or \"password_file\" must be included on\ncreation unless is_external is true.\n"
                },
                "passwordFile": {
                    "type": "string",
                    "description": "Name of a file containing the user's password. Either \"password_file\" or \"password\" must be included on creation unless\nis_external is true.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value\n'INTEGRATED' is used.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role within the organization\n"
                },
                "storedVmQuota": {
                    "type": "integer",
                    "description": "Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.\n"
                },
                "takeOwnership": {
                    "type": "boolean",
                    "description": "Take ownership of user's objects on deletion.\n"
                },
                "telephone": {
                    "type": "string",
                    "description": "The user's telephone\n"
                }
            },
            "requiredInputs": [
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgUser resources.\n",
                "properties": {
                    "deployedVmQuota": {
                        "type": "integer",
                        "description": "Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The user's description\n"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The user's email address\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "True if the user is enabled and can log in.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The user's full name\n"
                    },
                    "groupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Read only. Set of group names that this user belongs to\n"
                    },
                    "instantMessaging": {
                        "type": "string",
                        "description": "The user's telephone\n"
                    },
                    "isExternal": {
                        "type": "boolean",
                        "description": "True if this user is imported from an external resource, like an LDAP.\n",
                        "willReplaceOnChanges": true
                    },
                    "isGroupRole": {
                        "type": "boolean",
                        "description": "True if this user has a group role.\n"
                    },
                    "isLocked": {
                        "type": "boolean",
                        "description": "If the user account has been locked due to too many invalid login attempts, the value will change to true (only the\nsystem can lock the user). To unlock the user re-set this flag to false.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User's name. Only lowercase letters allowed. Cannot be changed after creation\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The user's password. This value is never returned on read. Either \"password\" or \"password_file\" must be included on\ncreation unless is_external is true.\n"
                    },
                    "passwordFile": {
                        "type": "string",
                        "description": "Name of a file containing the user's password. Either \"password_file\" or \"password\" must be included on creation unless\nis_external is true.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value\n'INTEGRATED' is used.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Role within the organization\n"
                    },
                    "storedVmQuota": {
                        "type": "integer",
                        "description": "Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.\n"
                    },
                    "takeOwnership": {
                        "type": "boolean",
                        "description": "Take ownership of user's objects on deletion.\n"
                    },
                    "telephone": {
                        "type": "string",
                        "description": "The user's telephone\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/orgVdc:OrgVdc": {
            "properties": {
                "allocationModel": {
                    "type": "string",
                    "description": "The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}\n"
                },
                "allowOverCommit": {
                    "type": "boolean",
                    "description": "Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the\nComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.\n"
                },
                "computeCapacity": {
                    "$ref": "#/types/vcd:index/OrgVdcComputeCapacity:OrgVdcComputeCapacity",
                    "description": "The compute capacity allocated to this VDC.\n"
                },
                "cpuGuaranteed": {
                    "type": "number",
                    "description": "Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then\n75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the\nelement is empty, vCD sets a value\n"
                },
                "cpuSpeed": {
                    "type": "integer",
                    "description": "Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will\nconsume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or\nAllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.\n"
                },
                "defaultComputePolicyId": {
                    "type": "string",
                    "description": "ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy\n"
                },
                "defaultVmSizingPolicyId": {
                    "type": "string",
                    "description": "ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy\n",
                    "deprecationMessage": "Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "description": {
                    "type": "string"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)\n"
                },
                "elasticity": {
                    "type": "boolean",
                    "description": "Set to true to indicate if the Flex VDC is to be elastic.\n"
                },
                "enableFastProvisioning": {
                    "type": "boolean",
                    "description": "Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning\ncan reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast\nprovisioning, all provisioning operations will result in full clones.\n"
                },
                "enableThinProvisioning": {
                    "type": "boolean",
                    "description": "Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin\nprovisioning saves storage space by committing it on demand. This allows over-allocation of storage.\n"
                },
                "enableVmDiscovery": {
                    "type": "boolean",
                    "description": "True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual\nbehaviour depends on enablement at the organization level and at the system level.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True if this VDC is enabled for use by the organization VDCs. Default is true.\n"
                },
                "includeVmMemoryOverhead": {
                    "type": "boolean",
                    "description": "Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.\n"
                },
                "memoryGuaranteed": {
                    "type": "number",
                    "description": "Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,\nthen 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When\nAllocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for Org VDC metadata\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgVdcMetadataEntry:OrgVdcMetadataEntry"
                    },
                    "description": "Metadata entries for the given VDC\n"
                },
                "name": {
                    "type": "string"
                },
                "networkPoolName": {
                    "type": "string",
                    "description": "The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.\n"
                },
                "networkQuota": {
                    "type": "integer",
                    "description": "Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be\ndeployed.\n"
                },
                "nicQuota": {
                    "type": "integer",
                    "description": "Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "providerVdcName": {
                    "type": "string",
                    "description": "A reference to the Provider VDC from which this organization VDC is provisioned.\n"
                },
                "storageProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgVdcStorageProfile:OrgVdcStorageProfile"
                    },
                    "description": "Storage profiles supported by this VDC.\n"
                },
                "vmPlacementPolicyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM Placement Policy IDs\n"
                },
                "vmQuota": {
                    "type": "integer",
                    "description": "The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp\ntemplates. Defaults to 0, which specifies an unlimited number.\n"
                },
                "vmSizingPolicyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM Sizing Policy IDs\n"
                }
            },
            "required": [
                "allocationModel",
                "allowOverCommit",
                "computeCapacity",
                "cpuGuaranteed",
                "cpuSpeed",
                "defaultComputePolicyId",
                "defaultVmSizingPolicyId",
                "deleteForce",
                "deleteRecursive",
                "elasticity",
                "includeVmMemoryOverhead",
                "memoryGuaranteed",
                "metadata",
                "metadataEntries",
                "name",
                "providerVdcName",
                "storageProfiles",
                "vmPlacementPolicyIds",
                "vmSizingPolicyIds"
            ],
            "inputProperties": {
                "allocationModel": {
                    "type": "string",
                    "description": "The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}\n",
                    "willReplaceOnChanges": true
                },
                "allowOverCommit": {
                    "type": "boolean",
                    "description": "Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the\nComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.\n"
                },
                "computeCapacity": {
                    "$ref": "#/types/vcd:index/OrgVdcComputeCapacity:OrgVdcComputeCapacity",
                    "description": "The compute capacity allocated to this VDC.\n"
                },
                "cpuGuaranteed": {
                    "type": "number",
                    "description": "Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then\n75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the\nelement is empty, vCD sets a value\n"
                },
                "cpuSpeed": {
                    "type": "integer",
                    "description": "Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will\nconsume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or\nAllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.\n"
                },
                "defaultComputePolicyId": {
                    "type": "string",
                    "description": "ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy\n"
                },
                "defaultVmSizingPolicyId": {
                    "type": "string",
                    "description": "ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy\n",
                    "deprecationMessage": "Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "description": {
                    "type": "string"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)\n"
                },
                "elasticity": {
                    "type": "boolean",
                    "description": "Set to true to indicate if the Flex VDC is to be elastic.\n"
                },
                "enableFastProvisioning": {
                    "type": "boolean",
                    "description": "Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning\ncan reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast\nprovisioning, all provisioning operations will result in full clones.\n"
                },
                "enableThinProvisioning": {
                    "type": "boolean",
                    "description": "Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin\nprovisioning saves storage space by committing it on demand. This allows over-allocation of storage.\n"
                },
                "enableVmDiscovery": {
                    "type": "boolean",
                    "description": "True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual\nbehaviour depends on enablement at the organization level and at the system level.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True if this VDC is enabled for use by the organization VDCs. Default is true.\n"
                },
                "includeVmMemoryOverhead": {
                    "type": "boolean",
                    "description": "Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.\n"
                },
                "memoryGuaranteed": {
                    "type": "number",
                    "description": "Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,\nthen 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When\nAllocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for Org VDC metadata\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgVdcMetadataEntry:OrgVdcMetadataEntry"
                    },
                    "description": "Metadata entries for the given VDC\n"
                },
                "name": {
                    "type": "string"
                },
                "networkPoolName": {
                    "type": "string",
                    "description": "The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.\n"
                },
                "networkQuota": {
                    "type": "integer",
                    "description": "Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be\ndeployed.\n"
                },
                "nicQuota": {
                    "type": "integer",
                    "description": "Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "providerVdcName": {
                    "type": "string",
                    "description": "A reference to the Provider VDC from which this organization VDC is provisioned.\n",
                    "willReplaceOnChanges": true
                },
                "storageProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgVdcStorageProfile:OrgVdcStorageProfile"
                    },
                    "description": "Storage profiles supported by this VDC.\n"
                },
                "vmPlacementPolicyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM Placement Policy IDs\n"
                },
                "vmQuota": {
                    "type": "integer",
                    "description": "The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp\ntemplates. Defaults to 0, which specifies an unlimited number.\n"
                },
                "vmSizingPolicyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM Sizing Policy IDs\n"
                }
            },
            "requiredInputs": [
                "allocationModel",
                "computeCapacity",
                "deleteForce",
                "deleteRecursive",
                "providerVdcName",
                "storageProfiles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgVdc resources.\n",
                "properties": {
                    "allocationModel": {
                        "type": "string",
                        "description": "The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}\n",
                        "willReplaceOnChanges": true
                    },
                    "allowOverCommit": {
                        "type": "boolean",
                        "description": "Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the\nComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.\n"
                    },
                    "computeCapacity": {
                        "$ref": "#/types/vcd:index/OrgVdcComputeCapacity:OrgVdcComputeCapacity",
                        "description": "The compute capacity allocated to this VDC.\n"
                    },
                    "cpuGuaranteed": {
                        "type": "number",
                        "description": "Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then\n75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the\nelement is empty, vCD sets a value\n"
                    },
                    "cpuSpeed": {
                        "type": "integer",
                        "description": "Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will\nconsume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or\nAllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.\n"
                    },
                    "defaultComputePolicyId": {
                        "type": "string",
                        "description": "ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy\n"
                    },
                    "defaultVmSizingPolicyId": {
                        "type": "string",
                        "description": "ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy\n",
                        "deprecationMessage": "Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies"
                    },
                    "deleteForce": {
                        "type": "boolean",
                        "description": "When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.\n"
                    },
                    "deleteRecursive": {
                        "type": "boolean",
                        "description": "When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that\nnormally allows removal.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)\n"
                    },
                    "elasticity": {
                        "type": "boolean",
                        "description": "Set to true to indicate if the Flex VDC is to be elastic.\n"
                    },
                    "enableFastProvisioning": {
                        "type": "boolean",
                        "description": "Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning\ncan reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast\nprovisioning, all provisioning operations will result in full clones.\n"
                    },
                    "enableThinProvisioning": {
                        "type": "boolean",
                        "description": "Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin\nprovisioning saves storage space by committing it on demand. This allows over-allocation of storage.\n"
                    },
                    "enableVmDiscovery": {
                        "type": "boolean",
                        "description": "True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual\nbehaviour depends on enablement at the organization level and at the system level.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "True if this VDC is enabled for use by the organization VDCs. Default is true.\n"
                    },
                    "includeVmMemoryOverhead": {
                        "type": "boolean",
                        "description": "Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.\n"
                    },
                    "memoryGuaranteed": {
                        "type": "number",
                        "description": "Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,\nthen 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When\nAllocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for Org VDC metadata\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/OrgVdcMetadataEntry:OrgVdcMetadataEntry"
                        },
                        "description": "Metadata entries for the given VDC\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkPoolName": {
                        "type": "string",
                        "description": "The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.\n"
                    },
                    "networkQuota": {
                        "type": "integer",
                        "description": "Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be\ndeployed.\n"
                    },
                    "nicQuota": {
                        "type": "integer",
                        "description": "Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "providerVdcName": {
                        "type": "string",
                        "description": "A reference to the Provider VDC from which this organization VDC is provisioned.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/OrgVdcStorageProfile:OrgVdcStorageProfile"
                        },
                        "description": "Storage profiles supported by this VDC.\n"
                    },
                    "vmPlacementPolicyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of VM Placement Policy IDs\n"
                    },
                    "vmQuota": {
                        "type": "integer",
                        "description": "The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp\ntemplates. Defaults to 0, which specifies an unlimited number.\n"
                    },
                    "vmSizingPolicyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of VM Sizing Policy IDs\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/orgVdcAccessControl:OrgVdcAccessControl": {
            "properties": {
                "everyoneAccessLevel": {
                    "type": "string",
                    "description": "Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is\nset\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "sharedWithEveryone": {
                    "type": "boolean",
                    "description": "Whether the VDC is shared with everyone\n"
                },
                "sharedWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgVdcAccessControlSharedWith:OrgVdcAccessControlSharedWith"
                    }
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "sharedWithEveryone"
            ],
            "inputProperties": {
                "everyoneAccessLevel": {
                    "type": "string",
                    "description": "Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is\nset\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "sharedWithEveryone": {
                    "type": "boolean",
                    "description": "Whether the VDC is shared with everyone\n"
                },
                "sharedWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/OrgVdcAccessControlSharedWith:OrgVdcAccessControlSharedWith"
                    }
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sharedWithEveryone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgVdcAccessControl resources.\n",
                "properties": {
                    "everyoneAccessLevel": {
                        "type": "string",
                        "description": "Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is\nset\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "sharedWithEveryone": {
                        "type": "boolean",
                        "description": "Whether the VDC is shared with everyone\n"
                    },
                    "sharedWiths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/OrgVdcAccessControlSharedWith:OrgVdcAccessControlSharedWith"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/rightsBundle:RightsBundle": {
            "properties": {
                "bundleKey": {
                    "type": "string",
                    "description": "Key used for internationalization\n"
                },
                "description": {
                    "type": "string",
                    "description": "Rights bundle description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of rights bundle.\n"
                },
                "publishToAllTenants": {
                    "type": "boolean",
                    "description": "When true, publishes the rights bundle to all tenants\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether this rights bundle is read-only\n"
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of rights assigned to this rights bundle\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of tenants to which this rights bundle is published\n"
                }
            },
            "required": [
                "bundleKey",
                "description",
                "name",
                "publishToAllTenants",
                "readOnly"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Rights bundle description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of rights bundle.\n"
                },
                "publishToAllTenants": {
                    "type": "boolean",
                    "description": "When true, publishes the rights bundle to all tenants\n"
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of rights assigned to this rights bundle\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of tenants to which this rights bundle is published\n"
                }
            },
            "requiredInputs": [
                "description",
                "publishToAllTenants"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RightsBundle resources.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string",
                        "description": "Key used for internationalization\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Rights bundle description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of rights bundle.\n"
                    },
                    "publishToAllTenants": {
                        "type": "boolean",
                        "description": "When true, publishes the rights bundle to all tenants\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Whether this rights bundle is read-only\n"
                    },
                    "rights": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of rights assigned to this rights bundle\n"
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of tenants to which this rights bundle is published\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/role:Role": {
            "properties": {
                "bundleKey": {
                    "type": "string",
                    "description": "Key used for internationalization\n"
                },
                "description": {
                    "type": "string",
                    "description": "Role description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Role.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether this role is read-only\n"
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of rights assigned to this role\n"
                }
            },
            "required": [
                "bundleKey",
                "description",
                "name",
                "readOnly"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Role description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Role.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of rights assigned to this role\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string",
                        "description": "Key used for internationalization\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Role description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of Role.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Whether this role is read-only\n"
                    },
                    "rights": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of rights assigned to this role\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/securityTag:SecurityTag": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Security tag name to be created\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VM IDs that the security tags is going to be tied to\n"
                }
            },
            "required": [
                "name",
                "vmIds"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Security tag name to be created\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VM IDs that the security tags is going to be tied to\n"
                }
            },
            "requiredInputs": [
                "vmIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityTag resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Security tag name to be created\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "vmIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VM IDs that the security tags is going to be tied to\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/subscribedCatalog:SubscribedCatalog": {
            "properties": {
                "cancelFailedTasks": {
                    "type": "boolean",
                    "description": "When true, the subscribed catalog will attempt canceling failed tasks\n"
                },
                "catalogVersion": {
                    "type": "integer",
                    "description": "Catalog version number. Inherited from publishing catalog and updated on sync.\n"
                },
                "created": {
                    "type": "string",
                    "description": "Time stamp of when the catalog was created\n"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,\nregardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A subscribed catalog description is inherited from the publisher catalog and cannot be changed. It is updated on sync\n"
                },
                "failedTasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of failed synchronization tasks\n"
                },
                "href": {
                    "type": "string",
                    "description": "Catalog HREF\n"
                },
                "isLocal": {
                    "type": "boolean",
                    "description": "True if this catalog belongs to the current organization.\n"
                },
                "isPublished": {
                    "type": "boolean",
                    "description": "True if this catalog is published. (Always false)\n"
                },
                "isShared": {
                    "type": "boolean",
                    "description": "True if this catalog is shared.\n"
                },
                "makeLocalCopy": {
                    "type": "boolean",
                    "description": "If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local\ncopy of catalog items unless a sync operation is performed.\n"
                },
                "mediaItemLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Media items in this catalog\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key and value pairs for catalog metadata. Inherited from publishing catalog\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the catalog\n"
                },
                "numberOfMedia": {
                    "type": "integer",
                    "description": "Number of Media items this catalog contains.\n"
                },
                "numberOfVappTemplates": {
                    "type": "integer",
                    "description": "Number of vApp templates this catalog contains.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level.\n"
                },
                "ownerName": {
                    "type": "string",
                    "description": "Owner name from the catalog.\n"
                },
                "publishSubscriptionType": {
                    "type": "string",
                    "description": "PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise. (Always\nSUBSCRIBED)\n"
                },
                "runningTasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of running synchronization tasks\n"
                },
                "storageProfileId": {
                    "type": "string",
                    "description": "Optional storage profile ID\n"
                },
                "storeTasks": {
                    "type": "boolean",
                    "description": "If true, saves list of tasks to file for later update\n"
                },
                "subscriptionPassword": {
                    "type": "string",
                    "description": "An optional password to access the catalog. Only ASCII characters are allowed in a valid password. Passing in six\nasterisks '******' indicates to keep current password. Passing in null or empty string indicates to remove password.\n"
                },
                "subscriptionUrl": {
                    "type": "string",
                    "description": "The URL to subscribe to the external catalog.\n"
                },
                "syncAll": {
                    "type": "boolean",
                    "description": "If true, synchronise this catalog and all items\n"
                },
                "syncAllMediaItems": {
                    "type": "boolean",
                    "description": "If true, synchronises all media items\n"
                },
                "syncAllVappTemplates": {
                    "type": "boolean",
                    "description": "If true, synchronises all vApp templates\n"
                },
                "syncCatalog": {
                    "type": "boolean",
                    "description": "If true, synchronise this catalog. This operation fetches the list of items. If `make_local_copy` is set, it also\nfetches the items data.\n"
                },
                "syncMediaItems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Synchronises media items from this list of names.\n"
                },
                "syncOnRefresh": {
                    "type": "boolean",
                    "description": "Boolean value that shows if sync should be performed on every refresh.\n"
                },
                "syncVappTemplates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Synchronises vApp templates from this list of names.\n"
                },
                "tasksFileName": {
                    "type": "string",
                    "description": "Where the running tasks IDs have been stored. Only if `store_tasks` is set\n"
                },
                "vappTemplateLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of catalog items in this catalog\n"
                }
            },
            "required": [
                "catalogVersion",
                "created",
                "description",
                "failedTasks",
                "href",
                "isLocal",
                "isPublished",
                "isShared",
                "mediaItemLists",
                "metadata",
                "name",
                "numberOfMedia",
                "numberOfVappTemplates",
                "ownerName",
                "publishSubscriptionType",
                "runningTasks",
                "subscriptionPassword",
                "subscriptionUrl",
                "tasksFileName",
                "vappTemplateLists"
            ],
            "inputProperties": {
                "cancelFailedTasks": {
                    "type": "boolean",
                    "description": "When true, the subscribed catalog will attempt canceling failed tasks\n"
                },
                "deleteForce": {
                    "type": "boolean",
                    "description": "When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,\nregardless of their state.\n"
                },
                "deleteRecursive": {
                    "type": "boolean",
                    "description": "When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that\nnormally allows removal.\n"
                },
                "makeLocalCopy": {
                    "type": "boolean",
                    "description": "If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local\ncopy of catalog items unless a sync operation is performed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the catalog\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level.\n",
                    "willReplaceOnChanges": true
                },
                "storageProfileId": {
                    "type": "string",
                    "description": "Optional storage profile ID\n"
                },
                "storeTasks": {
                    "type": "boolean",
                    "description": "If true, saves list of tasks to file for later update\n"
                },
                "subscriptionPassword": {
                    "type": "string",
                    "description": "An optional password to access the catalog. Only ASCII characters are allowed in a valid password. Passing in six\nasterisks '******' indicates to keep current password. Passing in null or empty string indicates to remove password.\n"
                },
                "subscriptionUrl": {
                    "type": "string",
                    "description": "The URL to subscribe to the external catalog.\n",
                    "willReplaceOnChanges": true
                },
                "syncAll": {
                    "type": "boolean",
                    "description": "If true, synchronise this catalog and all items\n"
                },
                "syncAllMediaItems": {
                    "type": "boolean",
                    "description": "If true, synchronises all media items\n"
                },
                "syncAllVappTemplates": {
                    "type": "boolean",
                    "description": "If true, synchronises all vApp templates\n"
                },
                "syncCatalog": {
                    "type": "boolean",
                    "description": "If true, synchronise this catalog. This operation fetches the list of items. If `make_local_copy` is set, it also\nfetches the items data.\n"
                },
                "syncMediaItems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Synchronises media items from this list of names.\n"
                },
                "syncOnRefresh": {
                    "type": "boolean",
                    "description": "Boolean value that shows if sync should be performed on every refresh.\n"
                },
                "syncVappTemplates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Synchronises vApp templates from this list of names.\n"
                }
            },
            "requiredInputs": [
                "subscriptionUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SubscribedCatalog resources.\n",
                "properties": {
                    "cancelFailedTasks": {
                        "type": "boolean",
                        "description": "When true, the subscribed catalog will attempt canceling failed tasks\n"
                    },
                    "catalogVersion": {
                        "type": "integer",
                        "description": "Catalog version number. Inherited from publishing catalog and updated on sync.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Time stamp of when the catalog was created\n"
                    },
                    "deleteForce": {
                        "type": "boolean",
                        "description": "When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,\nregardless of their state.\n"
                    },
                    "deleteRecursive": {
                        "type": "boolean",
                        "description": "When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that\nnormally allows removal.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A subscribed catalog description is inherited from the publisher catalog and cannot be changed. It is updated on sync\n"
                    },
                    "failedTasks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of failed synchronization tasks\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Catalog HREF\n"
                    },
                    "isLocal": {
                        "type": "boolean",
                        "description": "True if this catalog belongs to the current organization.\n"
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "True if this catalog is published. (Always false)\n"
                    },
                    "isShared": {
                        "type": "boolean",
                        "description": "True if this catalog is shared.\n"
                    },
                    "makeLocalCopy": {
                        "type": "boolean",
                        "description": "If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local\ncopy of catalog items unless a sync operation is performed.\n"
                    },
                    "mediaItemLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Media items in this catalog\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key and value pairs for catalog metadata. Inherited from publishing catalog\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the catalog\n"
                    },
                    "numberOfMedia": {
                        "type": "integer",
                        "description": "Number of Media items this catalog contains.\n"
                    },
                    "numberOfVappTemplates": {
                        "type": "integer",
                        "description": "Number of vApp templates this catalog contains.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "Owner name from the catalog.\n"
                    },
                    "publishSubscriptionType": {
                        "type": "string",
                        "description": "PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise. (Always\nSUBSCRIBED)\n"
                    },
                    "runningTasks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of running synchronization tasks\n"
                    },
                    "storageProfileId": {
                        "type": "string",
                        "description": "Optional storage profile ID\n"
                    },
                    "storeTasks": {
                        "type": "boolean",
                        "description": "If true, saves list of tasks to file for later update\n"
                    },
                    "subscriptionPassword": {
                        "type": "string",
                        "description": "An optional password to access the catalog. Only ASCII characters are allowed in a valid password. Passing in six\nasterisks '******' indicates to keep current password. Passing in null or empty string indicates to remove password.\n"
                    },
                    "subscriptionUrl": {
                        "type": "string",
                        "description": "The URL to subscribe to the external catalog.\n",
                        "willReplaceOnChanges": true
                    },
                    "syncAll": {
                        "type": "boolean",
                        "description": "If true, synchronise this catalog and all items\n"
                    },
                    "syncAllMediaItems": {
                        "type": "boolean",
                        "description": "If true, synchronises all media items\n"
                    },
                    "syncAllVappTemplates": {
                        "type": "boolean",
                        "description": "If true, synchronises all vApp templates\n"
                    },
                    "syncCatalog": {
                        "type": "boolean",
                        "description": "If true, synchronise this catalog. This operation fetches the list of items. If `make_local_copy` is set, it also\nfetches the items data.\n"
                    },
                    "syncMediaItems": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Synchronises media items from this list of names.\n"
                    },
                    "syncOnRefresh": {
                        "type": "boolean",
                        "description": "Boolean value that shows if sync should be performed on every refresh.\n"
                    },
                    "syncVappTemplates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Synchronises vApp templates from this list of names.\n"
                    },
                    "tasksFileName": {
                        "type": "string",
                        "description": "Where the running tasks IDs have been stored. Only if `store_tasks` is set\n"
                    },
                    "vappTemplateLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of catalog items in this catalog\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vapp:Vapp": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Optional description of the vApp\n"
                },
                "guestProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value settings for guest properties. Will be picked up by new VMs when created.\n"
                },
                "href": {
                    "type": "string",
                    "description": "vApp Hyper Reference\n"
                },
                "lease": {
                    "$ref": "#/types/vcd:index/VappLease:VappLease",
                    "description": "Defines lease parameters for this vApp\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this vApp. Key and value can be any string.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappMetadataEntry:VappMetadataEntry"
                    },
                    "description": "Metadata entries for the given vApp\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the vApp, unique withing the VDC\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "powerOn": {
                    "type": "boolean",
                    "description": "A boolean value stating if this vApp should be powered on\n"
                },
                "status": {
                    "type": "integer",
                    "description": "Shows the status code of the vApp\n"
                },
                "statusText": {
                    "type": "string",
                    "description": "Shows the status of the vApp\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "href",
                "lease",
                "metadata",
                "metadataEntries",
                "name",
                "status",
                "statusText"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Optional description of the vApp\n"
                },
                "guestProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value settings for guest properties. Will be picked up by new VMs when created.\n"
                },
                "lease": {
                    "$ref": "#/types/vcd:index/VappLease:VappLease",
                    "description": "Defines lease parameters for this vApp\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this vApp. Key and value can be any string.\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappMetadataEntry:VappMetadataEntry"
                    },
                    "description": "Metadata entries for the given vApp\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the vApp, unique withing the VDC\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "powerOn": {
                    "type": "boolean",
                    "description": "A boolean value stating if this vApp should be powered on\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vapp resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Optional description of the vApp\n"
                    },
                    "guestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value settings for guest properties. Will be picked up by new VMs when created.\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "vApp Hyper Reference\n"
                    },
                    "lease": {
                        "$ref": "#/types/vcd:index/VappLease:VappLease",
                        "description": "Defines lease parameters for this vApp\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this vApp. Key and value can be any string.\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappMetadataEntry:VappMetadataEntry"
                        },
                        "description": "Metadata entries for the given vApp\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name for the vApp, unique withing the VDC\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "powerOn": {
                        "type": "boolean",
                        "description": "A boolean value stating if this vApp should be powered on\n"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Shows the status code of the vApp\n"
                    },
                    "statusText": {
                        "type": "string",
                        "description": "Shows the status of the vApp\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappAccessControl:VappAccessControl": {
            "properties": {
                "everyoneAccessLevel": {
                    "type": "string",
                    "description": "Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when\nshared_with_everyone is set\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "sharedWithEveryone": {
                    "type": "boolean",
                    "description": "Whether the vApp is shared with everyone\n"
                },
                "sharedWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappAccessControlSharedWith:VappAccessControlSharedWith"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "sharedWithEveryone",
                "vappId"
            ],
            "inputProperties": {
                "everyoneAccessLevel": {
                    "type": "string",
                    "description": "Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when\nshared_with_everyone is set\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "sharedWithEveryone": {
                    "type": "boolean",
                    "description": "Whether the vApp is shared with everyone\n"
                },
                "sharedWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappAccessControlSharedWith:VappAccessControlSharedWith"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sharedWithEveryone",
                "vappId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappAccessControl resources.\n",
                "properties": {
                    "everyoneAccessLevel": {
                        "type": "string",
                        "description": "Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when\nshared_with_everyone is set\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "sharedWithEveryone": {
                        "type": "boolean",
                        "description": "Whether the vApp is shared with everyone\n"
                    },
                    "sharedWiths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappAccessControlSharedWith:VappAccessControlSharedWith"
                        }
                    },
                    "vappId": {
                        "type": "string",
                        "description": "vApp identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappFirewallRules:VappFirewallRules": {
            "properties": {
                "defaultAction": {
                    "type": "string",
                    "description": "Specifies what to do should none of the rules match. Either `allow` or `drop`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable firewall service. Default is `true`\n"
                },
                "logDefaultAction": {
                    "type": "boolean",
                    "description": "Flag to enable logging for default action. Default value is false.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "vApp network identifier\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappFirewallRulesRule:VappFirewallRulesRule"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "defaultAction",
                "networkId",
                "vappId"
            ],
            "inputProperties": {
                "defaultAction": {
                    "type": "string",
                    "description": "Specifies what to do should none of the rules match. Either `allow` or `drop`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable firewall service. Default is `true`\n"
                },
                "logDefaultAction": {
                    "type": "boolean",
                    "description": "Flag to enable logging for default action. Default value is false.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "vApp network identifier\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappFirewallRulesRule:VappFirewallRulesRule"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaultAction",
                "networkId",
                "vappId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappFirewallRules resources.\n",
                "properties": {
                    "defaultAction": {
                        "type": "string",
                        "description": "Specifies what to do should none of the rules match. Either `allow` or `drop`\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable firewall service. Default is `true`\n"
                    },
                    "logDefaultAction": {
                        "type": "boolean",
                        "description": "Flag to enable logging for default action. Default value is false.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "vApp network identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappFirewallRulesRule:VappFirewallRulesRule"
                        }
                    },
                    "vappId": {
                        "type": "string",
                        "description": "vApp identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappNatRules:VappNatRules": {
            "properties": {
                "enableIpMasquerade": {
                    "type": "boolean",
                    "description": "When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable NAT service. Default is `true`.\n"
                },
                "natType": {
                    "type": "string",
                    "description": "One of: `ipTranslation` (use IP translation), `portForwarding` (use port forwarding).\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "vApp network identifier\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappNatRulesRule:VappNatRulesRule"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "natType",
                "networkId",
                "vappId"
            ],
            "inputProperties": {
                "enableIpMasquerade": {
                    "type": "boolean",
                    "description": "When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable NAT service. Default is `true`.\n"
                },
                "natType": {
                    "type": "string",
                    "description": "One of: `ipTranslation` (use IP translation), `portForwarding` (use port forwarding).\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "vApp network identifier\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappNatRulesRule:VappNatRulesRule"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "natType",
                "networkId",
                "vappId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappNatRules resources.\n",
                "properties": {
                    "enableIpMasquerade": {
                        "type": "boolean",
                        "description": "When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable NAT service. Default is `true`.\n"
                    },
                    "natType": {
                        "type": "string",
                        "description": "One of: `ipTranslation` (use IP translation), `portForwarding` (use port forwarding).\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "vApp network identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappNatRulesRule:VappNatRulesRule"
                        }
                    },
                    "vappId": {
                        "type": "string",
                        "description": "vApp identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappNetwork:VappNetwork": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "dhcpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappNetworkDhcpPool:VappNetworkDhcpPool"
                    },
                    "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "Primary DNS server\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "Secondary DNS server\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway of the network\n"
                },
                "guestVlanAllowed": {
                    "type": "boolean",
                    "description": "True if Network allows guest VLAN tagging\n"
                },
                "name": {
                    "type": "string",
                    "description": "vApp network name\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "Netmask address for a subnet. Default is 255.255.255.0\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "orgNetworkName": {
                    "type": "string",
                    "description": "org network name to which vapp network is connected\n"
                },
                "retainIpMacEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappNetworkStaticIpPool:VappNetworkStaticIpPool"
                    },
                    "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                },
                "vappName": {
                    "type": "string",
                    "description": "vApp to use\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "gateway",
                "name",
                "vappName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Optional description for the network\n"
                },
                "dhcpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappNetworkDhcpPool:VappNetworkDhcpPool"
                    },
                    "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                },
                "dns1": {
                    "type": "string",
                    "description": "Primary DNS server\n"
                },
                "dns2": {
                    "type": "string",
                    "description": "Secondary DNS server\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "DNS suffix\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway of the network\n",
                    "willReplaceOnChanges": true
                },
                "guestVlanAllowed": {
                    "type": "boolean",
                    "description": "True if Network allows guest VLAN tagging\n"
                },
                "name": {
                    "type": "string",
                    "description": "vApp network name\n",
                    "willReplaceOnChanges": true
                },
                "netmask": {
                    "type": "string",
                    "description": "Netmask address for a subnet. Default is 255.255.255.0\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "orgNetworkName": {
                    "type": "string",
                    "description": "org network name to which vapp network is connected\n"
                },
                "retainIpMacEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                },
                "staticIpPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappNetworkStaticIpPool:VappNetworkStaticIpPool"
                    },
                    "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                },
                "vappName": {
                    "type": "string",
                    "description": "vApp to use\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gateway",
                "vappName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappNetwork resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Optional description for the network\n"
                    },
                    "dhcpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappNetworkDhcpPool:VappNetworkDhcpPool"
                        },
                        "description": "A range of IPs to issue to virtual machines that don't have a static IP\n"
                    },
                    "dns1": {
                        "type": "string",
                        "description": "Primary DNS server\n"
                    },
                    "dns2": {
                        "type": "string",
                        "description": "Secondary DNS server\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "DNS suffix\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway of the network\n",
                        "willReplaceOnChanges": true
                    },
                    "guestVlanAllowed": {
                        "type": "boolean",
                        "description": "True if Network allows guest VLAN tagging\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "vApp network name\n",
                        "willReplaceOnChanges": true
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Netmask address for a subnet. Default is 255.255.255.0\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "orgNetworkName": {
                        "type": "string",
                        "description": "org network name to which vapp network is connected\n"
                    },
                    "retainIpMacEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappNetworkStaticIpPool:VappNetworkStaticIpPool"
                        },
                        "description": "A range of IPs permitted to be used as static IPs for virtual machines\n"
                    },
                    "vappName": {
                        "type": "string",
                        "description": "vApp to use\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappOrgNetwork:VappOrgNetwork": {
            "properties": {
                "isFenced": {
                    "type": "boolean",
                    "description": "Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are\naccessed in this vApp\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "orgNetworkName": {
                    "type": "string",
                    "description": "Organization network name to which vApp network is connected to\n"
                },
                "retainIpMacEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                },
                "vappName": {
                    "type": "string",
                    "description": "vApp network name\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "orgNetworkName",
                "vappName"
            ],
            "inputProperties": {
                "isFenced": {
                    "type": "boolean",
                    "description": "Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are\naccessed in this vApp\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "orgNetworkName": {
                    "type": "string",
                    "description": "Organization network name to which vApp network is connected to\n",
                    "willReplaceOnChanges": true
                },
                "retainIpMacEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                },
                "vappName": {
                    "type": "string",
                    "description": "vApp network name\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "orgNetworkName",
                "vappName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappOrgNetwork resources.\n",
                "properties": {
                    "isFenced": {
                        "type": "boolean",
                        "description": "Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are\naccessed in this vApp\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "orgNetworkName": {
                        "type": "string",
                        "description": "Organization network name to which vApp network is connected to\n",
                        "willReplaceOnChanges": true
                    },
                    "retainIpMacEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.\n"
                    },
                    "vappName": {
                        "type": "string",
                        "description": "vApp network name\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappStaticRouting:VappStaticRouting": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable static Routing. Default is `true`.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "vApp network identifier\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappStaticRoutingRule:VappStaticRoutingRule"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                }
            },
            "required": [
                "networkId",
                "vappId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable static Routing. Default is `true`.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "vApp network identifier\n",
                    "willReplaceOnChanges": true
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappStaticRoutingRule:VappStaticRoutingRule"
                    }
                },
                "vappId": {
                    "type": "string",
                    "description": "vApp identifier\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "networkId",
                "vappId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappStaticRouting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable static Routing. Default is `true`.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "vApp network identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappStaticRoutingRule:VappStaticRoutingRule"
                        }
                    },
                    "vappId": {
                        "type": "string",
                        "description": "vApp identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vappVm:VappVm": {
            "properties": {
                "acceptAllEulas": {
                    "type": "boolean",
                    "description": "Automatically accept EULA if OVA has it\n"
                },
                "bootImage": {
                    "type": "string",
                    "description": "Media name to add as boot image.\n",
                    "deprecationMessage": "Use `boot_image_id` instead"
                },
                "bootImageId": {
                    "type": "string",
                    "description": "The URN of the media to use as boot image.\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "The catalog name in which to find the given vApp Template or media for boot_image\n",
                    "deprecationMessage": "You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name"
                },
                "computerName": {
                    "type": "string",
                    "description": "Computer name to assign to this virtual machine\n"
                },
                "cpuCores": {
                    "type": "integer",
                    "description": "The number of cores per socket\n"
                },
                "cpuHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of virtual CPUs while powered on.\n"
                },
                "cpuLimit": {
                    "type": "integer",
                    "description": "The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when\nthe resource allocation is not unlimited.\n"
                },
                "cpuPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "cpuReservation": {
                    "type": "integer",
                    "description": "The amount of MHz reservation on the underlying virtualization infrastructure\n"
                },
                "cpuShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM\n"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of virtual CPUs to allocate to the VM\n"
                },
                "customization": {
                    "$ref": "#/types/vcd:index/VappVmCustomization:VappVmCustomization",
                    "description": "Guest customization block\n"
                },
                "description": {
                    "type": "string",
                    "description": "The VM description\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmDisk:VappVmDisk"
                    }
                },
                "exposeHardwareVirtualization": {
                    "type": "boolean",
                    "description": "Expose hardware-assisted CPU virtualization to guest OS.\n"
                },
                "guestProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value settings for guest properties\n"
                },
                "hardwareVersion": {
                    "type": "string",
                    "description": "Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)\n"
                },
                "href": {
                    "type": "string",
                    "description": "VM Hyper Reference\n"
                },
                "internalDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmInternalDisk:VappVmInternalDisk"
                    },
                    "description": "A block will show internal disk details\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) to allocate to the VM\n"
                },
                "memoryHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of memory while powered on.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid\nwhen the resource allocation is not unlimited.\n"
                },
                "memoryPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "memoryReservation": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) reservation on the underlying virtualization infrastructure\n"
                },
                "memoryShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this VM\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmMetadataEntry:VappVmMetadataEntry"
                    },
                    "description": "Metadata entries for the given VM\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the VM, unique within the vApp\n"
                },
                "networkDhcpWaitSeconds": {
                    "type": "integer",
                    "description": "Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmNetwork:VappVmNetwork"
                    },
                    "description": "A block to define network interface. Multiple can be used.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Operating System type. Possible values can be found in documentation.\n"
                },
                "overrideTemplateDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmOverrideTemplateDisk:VappVmOverrideTemplateDisk"
                    },
                    "description": "A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number\nand unit_number.\n"
                },
                "placementPolicyId": {
                    "type": "string",
                    "description": "VM placement policy ID. Has to be assigned to Org VDC.\n"
                },
                "powerOn": {
                    "type": "boolean",
                    "description": "A boolean value stating if this VM should be powered on\n"
                },
                "preventUpdatePowerOff": {
                    "type": "boolean",
                    "description": "True if the update of resource should fail when virtual machine power off needed.\n"
                },
                "sizingPolicyId": {
                    "type": "string",
                    "description": "VM sizing policy ID. Has to be assigned to Org VDC.\n"
                },
                "status": {
                    "type": "integer",
                    "description": "Shows the status code of the VM\n"
                },
                "statusText": {
                    "type": "string",
                    "description": "Shows the status of the VM\n"
                },
                "storageProfile": {
                    "type": "string",
                    "description": "Storage profile to override the default one\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the vApp Template to use\n",
                    "deprecationMessage": "Use `vapp_template_id` instead"
                },
                "vappName": {
                    "type": "string",
                    "description": "The vApp this VM belongs to - Required, unless it is a standalone VM\n"
                },
                "vappTemplateId": {
                    "type": "string",
                    "description": "The URN of the vApp Template to use\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                },
                "vmNameInTemplate": {
                    "type": "string",
                    "description": "The name of the VM in vApp Template to use. In cases when vApp template has more than one VM\n"
                },
                "vmType": {
                    "type": "string",
                    "description": "Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'\n"
                }
            },
            "required": [
                "computerName",
                "cpuCores",
                "cpuLimit",
                "cpuPriority",
                "cpuReservation",
                "cpuShares",
                "cpus",
                "customization",
                "description",
                "hardwareVersion",
                "href",
                "internalDisks",
                "memory",
                "memoryLimit",
                "memoryPriority",
                "memoryReservation",
                "memoryShares",
                "metadata",
                "metadataEntries",
                "name",
                "osType",
                "placementPolicyId",
                "sizingPolicyId",
                "status",
                "statusText",
                "storageProfile",
                "vappName",
                "vmType"
            ],
            "inputProperties": {
                "acceptAllEulas": {
                    "type": "boolean",
                    "description": "Automatically accept EULA if OVA has it\n"
                },
                "bootImage": {
                    "type": "string",
                    "description": "Media name to add as boot image.\n",
                    "deprecationMessage": "Use `boot_image_id` instead"
                },
                "bootImageId": {
                    "type": "string",
                    "description": "The URN of the media to use as boot image.\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "The catalog name in which to find the given vApp Template or media for boot_image\n",
                    "deprecationMessage": "You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name"
                },
                "computerName": {
                    "type": "string",
                    "description": "Computer name to assign to this virtual machine\n"
                },
                "cpuCores": {
                    "type": "integer",
                    "description": "The number of cores per socket\n"
                },
                "cpuHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of virtual CPUs while powered on.\n"
                },
                "cpuLimit": {
                    "type": "integer",
                    "description": "The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when\nthe resource allocation is not unlimited.\n"
                },
                "cpuPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "cpuReservation": {
                    "type": "integer",
                    "description": "The amount of MHz reservation on the underlying virtualization infrastructure\n"
                },
                "cpuShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM\n"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of virtual CPUs to allocate to the VM\n"
                },
                "customization": {
                    "$ref": "#/types/vcd:index/VappVmCustomization:VappVmCustomization",
                    "description": "Guest customization block\n"
                },
                "description": {
                    "type": "string",
                    "description": "The VM description\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmDisk:VappVmDisk"
                    }
                },
                "exposeHardwareVirtualization": {
                    "type": "boolean",
                    "description": "Expose hardware-assisted CPU virtualization to guest OS.\n"
                },
                "guestProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value settings for guest properties\n"
                },
                "hardwareVersion": {
                    "type": "string",
                    "description": "Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)\n"
                },
                "href": {
                    "type": "string",
                    "description": "VM Hyper Reference\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) to allocate to the VM\n"
                },
                "memoryHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of memory while powered on.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid\nwhen the resource allocation is not unlimited.\n"
                },
                "memoryPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "memoryReservation": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) reservation on the underlying virtualization infrastructure\n"
                },
                "memoryShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this VM\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmMetadataEntry:VappVmMetadataEntry"
                    },
                    "description": "Metadata entries for the given VM\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the VM, unique within the vApp\n",
                    "willReplaceOnChanges": true
                },
                "networkDhcpWaitSeconds": {
                    "type": "integer",
                    "description": "Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmNetwork:VappVmNetwork"
                    },
                    "description": "A block to define network interface. Multiple can be used.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "osType": {
                    "type": "string",
                    "description": "Operating System type. Possible values can be found in documentation.\n"
                },
                "overrideTemplateDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VappVmOverrideTemplateDisk:VappVmOverrideTemplateDisk"
                    },
                    "description": "A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number\nand unit_number.\n",
                    "willReplaceOnChanges": true
                },
                "placementPolicyId": {
                    "type": "string",
                    "description": "VM placement policy ID. Has to be assigned to Org VDC.\n"
                },
                "powerOn": {
                    "type": "boolean",
                    "description": "A boolean value stating if this VM should be powered on\n"
                },
                "preventUpdatePowerOff": {
                    "type": "boolean",
                    "description": "True if the update of resource should fail when virtual machine power off needed.\n"
                },
                "sizingPolicyId": {
                    "type": "string",
                    "description": "VM sizing policy ID. Has to be assigned to Org VDC.\n"
                },
                "storageProfile": {
                    "type": "string",
                    "description": "Storage profile to override the default one\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the vApp Template to use\n",
                    "deprecationMessage": "Use `vapp_template_id` instead",
                    "willReplaceOnChanges": true
                },
                "vappName": {
                    "type": "string",
                    "description": "The vApp this VM belongs to - Required, unless it is a standalone VM\n",
                    "willReplaceOnChanges": true
                },
                "vappTemplateId": {
                    "type": "string",
                    "description": "The URN of the vApp Template to use\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                },
                "vmNameInTemplate": {
                    "type": "string",
                    "description": "The name of the VM in vApp Template to use. In cases when vApp template has more than one VM\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vappName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VappVm resources.\n",
                "properties": {
                    "acceptAllEulas": {
                        "type": "boolean",
                        "description": "Automatically accept EULA if OVA has it\n"
                    },
                    "bootImage": {
                        "type": "string",
                        "description": "Media name to add as boot image.\n",
                        "deprecationMessage": "Use `boot_image_id` instead"
                    },
                    "bootImageId": {
                        "type": "string",
                        "description": "The URN of the media to use as boot image.\n"
                    },
                    "catalogName": {
                        "type": "string",
                        "description": "The catalog name in which to find the given vApp Template or media for boot_image\n",
                        "deprecationMessage": "You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name"
                    },
                    "computerName": {
                        "type": "string",
                        "description": "Computer name to assign to this virtual machine\n"
                    },
                    "cpuCores": {
                        "type": "integer",
                        "description": "The number of cores per socket\n"
                    },
                    "cpuHotAddEnabled": {
                        "type": "boolean",
                        "description": "True if the virtual machine supports addition of virtual CPUs while powered on.\n"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when\nthe resource allocation is not unlimited.\n"
                    },
                    "cpuPriority": {
                        "type": "string",
                        "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                    },
                    "cpuReservation": {
                        "type": "integer",
                        "description": "The amount of MHz reservation on the underlying virtualization infrastructure\n"
                    },
                    "cpuShares": {
                        "type": "integer",
                        "description": "Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM\n"
                    },
                    "cpus": {
                        "type": "integer",
                        "description": "The number of virtual CPUs to allocate to the VM\n"
                    },
                    "customization": {
                        "$ref": "#/types/vcd:index/VappVmCustomization:VappVmCustomization",
                        "description": "Guest customization block\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The VM description\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappVmDisk:VappVmDisk"
                        }
                    },
                    "exposeHardwareVirtualization": {
                        "type": "boolean",
                        "description": "Expose hardware-assisted CPU virtualization to guest OS.\n"
                    },
                    "guestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value settings for guest properties\n"
                    },
                    "hardwareVersion": {
                        "type": "string",
                        "description": "Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "VM Hyper Reference\n"
                    },
                    "internalDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappVmInternalDisk:VappVmInternalDisk"
                        },
                        "description": "A block will show internal disk details\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of RAM (in MB) to allocate to the VM\n"
                    },
                    "memoryHotAddEnabled": {
                        "type": "boolean",
                        "description": "True if the virtual machine supports addition of memory while powered on.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid\nwhen the resource allocation is not unlimited.\n"
                    },
                    "memoryPriority": {
                        "type": "string",
                        "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                    },
                    "memoryReservation": {
                        "type": "integer",
                        "description": "The amount of RAM (in MB) reservation on the underlying virtualization infrastructure\n"
                    },
                    "memoryShares": {
                        "type": "integer",
                        "description": "Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this VM\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappVmMetadataEntry:VappVmMetadataEntry"
                        },
                        "description": "Metadata entries for the given VM\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name for the VM, unique within the vApp\n",
                        "willReplaceOnChanges": true
                    },
                    "networkDhcpWaitSeconds": {
                        "type": "integer",
                        "description": "Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappVmNetwork:VappVmNetwork"
                        },
                        "description": "A block to define network interface. Multiple can be used.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "osType": {
                        "type": "string",
                        "description": "Operating System type. Possible values can be found in documentation.\n"
                    },
                    "overrideTemplateDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VappVmOverrideTemplateDisk:VappVmOverrideTemplateDisk"
                        },
                        "description": "A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number\nand unit_number.\n",
                        "willReplaceOnChanges": true
                    },
                    "placementPolicyId": {
                        "type": "string",
                        "description": "VM placement policy ID. Has to be assigned to Org VDC.\n"
                    },
                    "powerOn": {
                        "type": "boolean",
                        "description": "A boolean value stating if this VM should be powered on\n"
                    },
                    "preventUpdatePowerOff": {
                        "type": "boolean",
                        "description": "True if the update of resource should fail when virtual machine power off needed.\n"
                    },
                    "sizingPolicyId": {
                        "type": "string",
                        "description": "VM sizing policy ID. Has to be assigned to Org VDC.\n"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Shows the status code of the VM\n"
                    },
                    "statusText": {
                        "type": "string",
                        "description": "Shows the status of the VM\n"
                    },
                    "storageProfile": {
                        "type": "string",
                        "description": "Storage profile to override the default one\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "The name of the vApp Template to use\n",
                        "deprecationMessage": "Use `vapp_template_id` instead",
                        "willReplaceOnChanges": true
                    },
                    "vappName": {
                        "type": "string",
                        "description": "The vApp this VM belongs to - Required, unless it is a standalone VM\n",
                        "willReplaceOnChanges": true
                    },
                    "vappTemplateId": {
                        "type": "string",
                        "description": "The URN of the vApp Template to use\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    },
                    "vmNameInTemplate": {
                        "type": "string",
                        "description": "The name of the VM in vApp Template to use. In cases when vApp template has more than one VM\n",
                        "willReplaceOnChanges": true
                    },
                    "vmType": {
                        "type": "string",
                        "description": "Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vdcGroup:VdcGroup": {
            "properties": {
                "defaultPolicyStatus": {
                    "type": "boolean",
                    "description": "Default Policy Status\n"
                },
                "description": {
                    "type": "string",
                    "description": "VDC group description\n"
                },
                "dfwEnabled": {
                    "type": "boolean",
                    "description": "Distributed firewall status\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "More detailed error message when VDC group has error status\n"
                },
                "localEgress": {
                    "type": "boolean",
                    "description": "Status whether local egress is enabled for a universal router belonging to a universal VDC group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of VDC group\n"
                },
                "networkPoolId": {
                    "type": "string",
                    "description": "ID of used network pool\n"
                },
                "networkPoolUniversalId": {
                    "type": "string",
                    "description": "The network provider’s universal id that is backing the universal network pool\n"
                },
                "networkProviderType": {
                    "type": "string",
                    "description": "Defines the networking provider backing the VDC Group\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "participatingOrgVdcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VdcGroupParticipatingOrgVdc:VdcGroupParticipatingOrgVdc"
                    },
                    "description": "The list of organization VDCs that are participating in this group\n"
                },
                "participatingVdcIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Participating VDC IDs\n"
                },
                "startingVdcId": {
                    "type": "string",
                    "description": "Starting VDC ID\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED',\n'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED')\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the group as LOCAL or UNIVERSAL\n"
                },
                "universalNetworkingEnabled": {
                    "type": "boolean",
                    "description": "True means that a VDC group router has been created\n"
                }
            },
            "required": [
                "defaultPolicyStatus",
                "dfwEnabled",
                "errorMessage",
                "localEgress",
                "name",
                "networkPoolId",
                "networkPoolUniversalId",
                "networkProviderType",
                "participatingOrgVdcs",
                "participatingVdcIds",
                "startingVdcId",
                "status",
                "type",
                "universalNetworkingEnabled"
            ],
            "inputProperties": {
                "defaultPolicyStatus": {
                    "type": "boolean",
                    "description": "Default Policy Status\n"
                },
                "description": {
                    "type": "string",
                    "description": "VDC group description\n"
                },
                "dfwEnabled": {
                    "type": "boolean",
                    "description": "Distributed firewall status\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of VDC group\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "participatingVdcIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Participating VDC IDs\n"
                },
                "startingVdcId": {
                    "type": "string",
                    "description": "Starting VDC ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "participatingVdcIds",
                "startingVdcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VdcGroup resources.\n",
                "properties": {
                    "defaultPolicyStatus": {
                        "type": "boolean",
                        "description": "Default Policy Status\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "VDC group description\n"
                    },
                    "dfwEnabled": {
                        "type": "boolean",
                        "description": "Distributed firewall status\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "More detailed error message when VDC group has error status\n"
                    },
                    "localEgress": {
                        "type": "boolean",
                        "description": "Status whether local egress is enabled for a universal router belonging to a universal VDC group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of VDC group\n"
                    },
                    "networkPoolId": {
                        "type": "string",
                        "description": "ID of used network pool\n"
                    },
                    "networkPoolUniversalId": {
                        "type": "string",
                        "description": "The network provider’s universal id that is backing the universal network pool\n"
                    },
                    "networkProviderType": {
                        "type": "string",
                        "description": "Defines the networking provider backing the VDC Group\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "participatingOrgVdcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VdcGroupParticipatingOrgVdc:VdcGroupParticipatingOrgVdc"
                        },
                        "description": "The list of organization VDCs that are participating in this group\n"
                    },
                    "participatingVdcIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Participating VDC IDs\n"
                    },
                    "startingVdcId": {
                        "type": "string",
                        "description": "Starting VDC ID\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED',\n'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED')\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the group as LOCAL or UNIVERSAL\n"
                    },
                    "universalNetworkingEnabled": {
                        "type": "boolean",
                        "description": "True means that a VDC group router has been created\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vm:Vm": {
            "properties": {
                "acceptAllEulas": {
                    "type": "boolean",
                    "description": "Automatically accept EULA if OVA has it\n"
                },
                "bootImage": {
                    "type": "string",
                    "description": "Media name to add as boot image.\n",
                    "deprecationMessage": "Use `boot_image_id` instead"
                },
                "bootImageId": {
                    "type": "string",
                    "description": "The URN of the media to use as boot image.\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "The catalog name in which to find the given vApp Template or media for boot_image\n",
                    "deprecationMessage": "You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name"
                },
                "computerName": {
                    "type": "string",
                    "description": "Computer name to assign to this virtual machine\n"
                },
                "cpuCores": {
                    "type": "integer",
                    "description": "The number of cores per socket\n"
                },
                "cpuHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of virtual CPUs while powered on.\n"
                },
                "cpuLimit": {
                    "type": "integer",
                    "description": "The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when\nthe resource allocation is not unlimited.\n"
                },
                "cpuPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "cpuReservation": {
                    "type": "integer",
                    "description": "The amount of MHz reservation on the underlying virtualization infrastructure\n"
                },
                "cpuShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM\n"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of virtual CPUs to allocate to the VM\n"
                },
                "customization": {
                    "$ref": "#/types/vcd:index/VmCustomization:VmCustomization",
                    "description": "Guest customization block\n"
                },
                "description": {
                    "type": "string",
                    "description": "The VM description\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmDisk:VmDisk"
                    }
                },
                "exposeHardwareVirtualization": {
                    "type": "boolean",
                    "description": "Expose hardware-assisted CPU virtualization to guest OS.\n"
                },
                "guestProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value settings for guest properties\n"
                },
                "hardwareVersion": {
                    "type": "string",
                    "description": "Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)\n"
                },
                "href": {
                    "type": "string",
                    "description": "VM Hyper Reference\n"
                },
                "internalDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmInternalDisk:VmInternalDisk"
                    },
                    "description": "A block will show internal disk details\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) to allocate to the VM\n"
                },
                "memoryHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of memory while powered on.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid\nwhen the resource allocation is not unlimited.\n"
                },
                "memoryPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "memoryReservation": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) reservation on the underlying virtualization infrastructure\n"
                },
                "memoryShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this VM\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmMetadataEntry:VmMetadataEntry"
                    },
                    "description": "Metadata entries for the given VM\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the VM, unique within the vApp\n"
                },
                "networkDhcpWaitSeconds": {
                    "type": "integer",
                    "description": "Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmNetwork:VmNetwork"
                    },
                    "description": "A block to define network interface. Multiple can be used.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Operating System type. Possible values can be found in documentation.\n"
                },
                "overrideTemplateDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmOverrideTemplateDisk:VmOverrideTemplateDisk"
                    },
                    "description": "A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number\nand unit_number.\n"
                },
                "placementPolicyId": {
                    "type": "string",
                    "description": "VM placement policy ID. Has to be assigned to Org VDC.\n"
                },
                "powerOn": {
                    "type": "boolean",
                    "description": "A boolean value stating if this VM should be powered on\n"
                },
                "preventUpdatePowerOff": {
                    "type": "boolean",
                    "description": "True if the update of resource should fail when virtual machine power off needed.\n"
                },
                "sizingPolicyId": {
                    "type": "string",
                    "description": "VM sizing policy ID. Has to be assigned to Org VDC.\n"
                },
                "status": {
                    "type": "integer",
                    "description": "Shows the status code of the VM\n"
                },
                "statusText": {
                    "type": "string",
                    "description": "Shows the status of the VM\n"
                },
                "storageProfile": {
                    "type": "string",
                    "description": "Storage profile to override the default one\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the vApp Template to use\n",
                    "deprecationMessage": "Use `vapp_template_id` instead"
                },
                "vappName": {
                    "type": "string",
                    "description": "The vApp this VM belongs to - Required, unless it is a standalone VM\n"
                },
                "vappTemplateId": {
                    "type": "string",
                    "description": "The URN of the vApp Template to use\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                },
                "vmNameInTemplate": {
                    "type": "string",
                    "description": "The name of the VM in vApp Template to use. In cases when vApp template has more than one VM\n"
                },
                "vmType": {
                    "type": "string",
                    "description": "Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'\n"
                }
            },
            "required": [
                "computerName",
                "cpuCores",
                "cpuLimit",
                "cpuPriority",
                "cpuReservation",
                "cpuShares",
                "cpus",
                "customization",
                "description",
                "hardwareVersion",
                "href",
                "internalDisks",
                "memory",
                "memoryLimit",
                "memoryPriority",
                "memoryReservation",
                "memoryShares",
                "metadata",
                "metadataEntries",
                "name",
                "osType",
                "placementPolicyId",
                "sizingPolicyId",
                "status",
                "statusText",
                "storageProfile",
                "vappName",
                "vmType"
            ],
            "inputProperties": {
                "acceptAllEulas": {
                    "type": "boolean",
                    "description": "Automatically accept EULA if OVA has it\n"
                },
                "bootImage": {
                    "type": "string",
                    "description": "Media name to add as boot image.\n",
                    "deprecationMessage": "Use `boot_image_id` instead"
                },
                "bootImageId": {
                    "type": "string",
                    "description": "The URN of the media to use as boot image.\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "The catalog name in which to find the given vApp Template or media for boot_image\n",
                    "deprecationMessage": "You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name"
                },
                "computerName": {
                    "type": "string",
                    "description": "Computer name to assign to this virtual machine\n"
                },
                "cpuCores": {
                    "type": "integer",
                    "description": "The number of cores per socket\n"
                },
                "cpuHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of virtual CPUs while powered on.\n"
                },
                "cpuLimit": {
                    "type": "integer",
                    "description": "The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when\nthe resource allocation is not unlimited.\n"
                },
                "cpuPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "cpuReservation": {
                    "type": "integer",
                    "description": "The amount of MHz reservation on the underlying virtualization infrastructure\n"
                },
                "cpuShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM\n"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of virtual CPUs to allocate to the VM\n"
                },
                "customization": {
                    "$ref": "#/types/vcd:index/VmCustomization:VmCustomization",
                    "description": "Guest customization block\n"
                },
                "description": {
                    "type": "string",
                    "description": "The VM description\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmDisk:VmDisk"
                    }
                },
                "exposeHardwareVirtualization": {
                    "type": "boolean",
                    "description": "Expose hardware-assisted CPU virtualization to guest OS.\n"
                },
                "guestProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value settings for guest properties\n"
                },
                "hardwareVersion": {
                    "type": "string",
                    "description": "Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)\n"
                },
                "href": {
                    "type": "string",
                    "description": "VM Hyper Reference\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) to allocate to the VM\n"
                },
                "memoryHotAddEnabled": {
                    "type": "boolean",
                    "description": "True if the virtual machine supports addition of memory while powered on.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid\nwhen the resource allocation is not unlimited.\n"
                },
                "memoryPriority": {
                    "type": "string",
                    "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                },
                "memoryReservation": {
                    "type": "integer",
                    "description": "The amount of RAM (in MB) reservation on the underlying virtualization infrastructure\n"
                },
                "memoryShares": {
                    "type": "integer",
                    "description": "Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key value map of metadata to assign to this VM\n",
                    "deprecationMessage": "Use metadata_entry instead"
                },
                "metadataEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmMetadataEntry:VmMetadataEntry"
                    },
                    "description": "Metadata entries for the given VM\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the VM, unique within the vApp\n",
                    "willReplaceOnChanges": true
                },
                "networkDhcpWaitSeconds": {
                    "type": "integer",
                    "description": "Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmNetwork:VmNetwork"
                    },
                    "description": "A block to define network interface. Multiple can be used.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "osType": {
                    "type": "string",
                    "description": "Operating System type. Possible values can be found in documentation.\n"
                },
                "overrideTemplateDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vcd:index/VmOverrideTemplateDisk:VmOverrideTemplateDisk"
                    },
                    "description": "A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number\nand unit_number.\n",
                    "willReplaceOnChanges": true
                },
                "placementPolicyId": {
                    "type": "string",
                    "description": "VM placement policy ID. Has to be assigned to Org VDC.\n"
                },
                "powerOn": {
                    "type": "boolean",
                    "description": "A boolean value stating if this VM should be powered on\n"
                },
                "preventUpdatePowerOff": {
                    "type": "boolean",
                    "description": "True if the update of resource should fail when virtual machine power off needed.\n"
                },
                "sizingPolicyId": {
                    "type": "string",
                    "description": "VM sizing policy ID. Has to be assigned to Org VDC.\n"
                },
                "storageProfile": {
                    "type": "string",
                    "description": "Storage profile to override the default one\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the vApp Template to use\n",
                    "deprecationMessage": "Use `vapp_template_id` instead",
                    "willReplaceOnChanges": true
                },
                "vappName": {
                    "type": "string",
                    "description": "The vApp this VM belongs to - Required, unless it is a standalone VM\n"
                },
                "vappTemplateId": {
                    "type": "string",
                    "description": "The URN of the vApp Template to use\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                },
                "vmNameInTemplate": {
                    "type": "string",
                    "description": "The name of the VM in vApp Template to use. In cases when vApp template has more than one VM\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vm resources.\n",
                "properties": {
                    "acceptAllEulas": {
                        "type": "boolean",
                        "description": "Automatically accept EULA if OVA has it\n"
                    },
                    "bootImage": {
                        "type": "string",
                        "description": "Media name to add as boot image.\n",
                        "deprecationMessage": "Use `boot_image_id` instead"
                    },
                    "bootImageId": {
                        "type": "string",
                        "description": "The URN of the media to use as boot image.\n"
                    },
                    "catalogName": {
                        "type": "string",
                        "description": "The catalog name in which to find the given vApp Template or media for boot_image\n",
                        "deprecationMessage": "You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name"
                    },
                    "computerName": {
                        "type": "string",
                        "description": "Computer name to assign to this virtual machine\n"
                    },
                    "cpuCores": {
                        "type": "integer",
                        "description": "The number of cores per socket\n"
                    },
                    "cpuHotAddEnabled": {
                        "type": "boolean",
                        "description": "True if the virtual machine supports addition of virtual CPUs while powered on.\n"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when\nthe resource allocation is not unlimited.\n"
                    },
                    "cpuPriority": {
                        "type": "string",
                        "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                    },
                    "cpuReservation": {
                        "type": "integer",
                        "description": "The amount of MHz reservation on the underlying virtualization infrastructure\n"
                    },
                    "cpuShares": {
                        "type": "integer",
                        "description": "Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM\n"
                    },
                    "cpus": {
                        "type": "integer",
                        "description": "The number of virtual CPUs to allocate to the VM\n"
                    },
                    "customization": {
                        "$ref": "#/types/vcd:index/VmCustomization:VmCustomization",
                        "description": "Guest customization block\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The VM description\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VmDisk:VmDisk"
                        }
                    },
                    "exposeHardwareVirtualization": {
                        "type": "boolean",
                        "description": "Expose hardware-assisted CPU virtualization to guest OS.\n"
                    },
                    "guestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value settings for guest properties\n"
                    },
                    "hardwareVersion": {
                        "type": "string",
                        "description": "Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "VM Hyper Reference\n"
                    },
                    "internalDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VmInternalDisk:VmInternalDisk"
                        },
                        "description": "A block will show internal disk details\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of RAM (in MB) to allocate to the VM\n"
                    },
                    "memoryHotAddEnabled": {
                        "type": "boolean",
                        "description": "True if the virtual machine supports addition of memory while powered on.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid\nwhen the resource allocation is not unlimited.\n"
                    },
                    "memoryPriority": {
                        "type": "string",
                        "description": "Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the\nvirtualized workload\n"
                    },
                    "memoryReservation": {
                        "type": "integer",
                        "description": "The amount of RAM (in MB) reservation on the underlying virtualization infrastructure\n"
                    },
                    "memoryShares": {
                        "type": "integer",
                        "description": "Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key value map of metadata to assign to this VM\n",
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VmMetadataEntry:VmMetadataEntry"
                        },
                        "description": "Metadata entries for the given VM\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name for the VM, unique within the vApp\n",
                        "willReplaceOnChanges": true
                    },
                    "networkDhcpWaitSeconds": {
                        "type": "integer",
                        "description": "Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VmNetwork:VmNetwork"
                        },
                        "description": "A block to define network interface. Multiple can be used.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "osType": {
                        "type": "string",
                        "description": "Operating System type. Possible values can be found in documentation.\n"
                    },
                    "overrideTemplateDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/VmOverrideTemplateDisk:VmOverrideTemplateDisk"
                        },
                        "description": "A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number\nand unit_number.\n",
                        "willReplaceOnChanges": true
                    },
                    "placementPolicyId": {
                        "type": "string",
                        "description": "VM placement policy ID. Has to be assigned to Org VDC.\n"
                    },
                    "powerOn": {
                        "type": "boolean",
                        "description": "A boolean value stating if this VM should be powered on\n"
                    },
                    "preventUpdatePowerOff": {
                        "type": "boolean",
                        "description": "True if the update of resource should fail when virtual machine power off needed.\n"
                    },
                    "sizingPolicyId": {
                        "type": "string",
                        "description": "VM sizing policy ID. Has to be assigned to Org VDC.\n"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Shows the status code of the VM\n"
                    },
                    "statusText": {
                        "type": "string",
                        "description": "Shows the status of the VM\n"
                    },
                    "storageProfile": {
                        "type": "string",
                        "description": "Storage profile to override the default one\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "The name of the vApp Template to use\n",
                        "deprecationMessage": "Use `vapp_template_id` instead",
                        "willReplaceOnChanges": true
                    },
                    "vappName": {
                        "type": "string",
                        "description": "The vApp this VM belongs to - Required, unless it is a standalone VM\n"
                    },
                    "vappTemplateId": {
                        "type": "string",
                        "description": "The URN of the vApp Template to use\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    },
                    "vmNameInTemplate": {
                        "type": "string",
                        "description": "The name of the VM in vApp Template to use. In cases when vApp template has more than one VM\n",
                        "willReplaceOnChanges": true
                    },
                    "vmType": {
                        "type": "string",
                        "description": "Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vmAffinityRule:VmAffinityRule": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "True if this affinity rule is enabled\n"
                },
                "name": {
                    "type": "string",
                    "description": "VM affinity rule name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "polarity": {
                    "type": "string",
                    "description": "One of 'Affinity', 'Anti-Affinity'\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "True if this affinity rule is required. When a rule is mandatory, a host failover will not power on the VM if doing so\nwould violate the rule\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM IDs assigned to this rule\n"
                }
            },
            "required": [
                "name",
                "polarity",
                "vmIds"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "True if this affinity rule is enabled\n"
                },
                "name": {
                    "type": "string",
                    "description": "VM affinity rule name\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "polarity": {
                    "type": "string",
                    "description": "One of 'Affinity', 'Anti-Affinity'\n",
                    "willReplaceOnChanges": true
                },
                "required": {
                    "type": "boolean",
                    "description": "True if this affinity rule is required. When a rule is mandatory, a host failover will not power on the VM if doing so\nwould violate the rule\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                },
                "vmIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of VM IDs assigned to this rule\n"
                }
            },
            "requiredInputs": [
                "polarity",
                "vmIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VmAffinityRule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "True if this affinity rule is enabled\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "VM affinity rule name\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "polarity": {
                        "type": "string",
                        "description": "One of 'Affinity', 'Anti-Affinity'\n",
                        "willReplaceOnChanges": true
                    },
                    "required": {
                        "type": "boolean",
                        "description": "True if this affinity rule is required. When a rule is mandatory, a host failover will not power on the VM if doing so\nwould violate the rule\n"
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    },
                    "vmIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of VM IDs assigned to this rule\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vmInternalDisk:VmInternalDisk": {
            "properties": {
                "allowVmReboot": {
                    "type": "boolean",
                    "description": "Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is\ncomplete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.\n"
                },
                "busNumber": {
                    "type": "integer",
                    "description": "The number of the SCSI or IDE controller itself.\n"
                },
                "busType": {
                    "type": "string",
                    "description": "The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),\nparavirtual(Paravirtual (SCSI)), sata, nvme\n"
                },
                "iops": {
                    "type": "integer",
                    "description": "Specifies the IOPS for the disk.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n"
                },
                "sizeInMb": {
                    "type": "integer",
                    "description": "The size of the disk in MB.\n"
                },
                "storageProfile": {
                    "type": "string",
                    "description": "Storage profile to override the VM default one\n"
                },
                "thinProvisioned": {
                    "type": "boolean",
                    "description": "Specifies whether the disk storage is pre-allocated or allocated on demand.\n"
                },
                "unitNumber": {
                    "type": "integer",
                    "description": "The device number on the SCSI or IDE controller of the disk.\n"
                },
                "vappName": {
                    "type": "string",
                    "description": "The vApp this VM internal disk belongs to\n"
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n"
                },
                "vmName": {
                    "type": "string",
                    "description": "VM in vApp in which internal disk is created\n"
                }
            },
            "required": [
                "busNumber",
                "busType",
                "iops",
                "sizeInMb",
                "storageProfile",
                "thinProvisioned",
                "unitNumber",
                "vappName",
                "vmName"
            ],
            "inputProperties": {
                "allowVmReboot": {
                    "type": "boolean",
                    "description": "Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is\ncomplete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.\n"
                },
                "busNumber": {
                    "type": "integer",
                    "description": "The number of the SCSI or IDE controller itself.\n",
                    "willReplaceOnChanges": true
                },
                "busType": {
                    "type": "string",
                    "description": "The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),\nparavirtual(Paravirtual (SCSI)), sata, nvme\n",
                    "willReplaceOnChanges": true
                },
                "iops": {
                    "type": "integer",
                    "description": "Specifies the IOPS for the disk.\n"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                    "willReplaceOnChanges": true
                },
                "sizeInMb": {
                    "type": "integer",
                    "description": "The size of the disk in MB.\n"
                },
                "storageProfile": {
                    "type": "string",
                    "description": "Storage profile to override the VM default one\n"
                },
                "unitNumber": {
                    "type": "integer",
                    "description": "The device number on the SCSI or IDE controller of the disk.\n",
                    "willReplaceOnChanges": true
                },
                "vappName": {
                    "type": "string",
                    "description": "The vApp this VM internal disk belongs to\n",
                    "willReplaceOnChanges": true
                },
                "vdc": {
                    "type": "string",
                    "description": "The name of VDC to use, optional if defined at provider level\n",
                    "willReplaceOnChanges": true
                },
                "vmName": {
                    "type": "string",
                    "description": "VM in vApp in which internal disk is created\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "busNumber",
                "busType",
                "sizeInMb",
                "unitNumber",
                "vappName",
                "vmName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VmInternalDisk resources.\n",
                "properties": {
                    "allowVmReboot": {
                        "type": "boolean",
                        "description": "Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is\ncomplete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.\n"
                    },
                    "busNumber": {
                        "type": "integer",
                        "description": "The number of the SCSI or IDE controller itself.\n",
                        "willReplaceOnChanges": true
                    },
                    "busType": {
                        "type": "string",
                        "description": "The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),\nparavirtual(Paravirtual (SCSI)), sata, nvme\n",
                        "willReplaceOnChanges": true
                    },
                    "iops": {
                        "type": "integer",
                        "description": "Specifies the IOPS for the disk.\n"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across\ndifferent organizations\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeInMb": {
                        "type": "integer",
                        "description": "The size of the disk in MB.\n"
                    },
                    "storageProfile": {
                        "type": "string",
                        "description": "Storage profile to override the VM default one\n"
                    },
                    "thinProvisioned": {
                        "type": "boolean",
                        "description": "Specifies whether the disk storage is pre-allocated or allocated on demand.\n"
                    },
                    "unitNumber": {
                        "type": "integer",
                        "description": "The device number on the SCSI or IDE controller of the disk.\n",
                        "willReplaceOnChanges": true
                    },
                    "vappName": {
                        "type": "string",
                        "description": "The vApp this VM internal disk belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "description": "The name of VDC to use, optional if defined at provider level\n",
                        "willReplaceOnChanges": true
                    },
                    "vmName": {
                        "type": "string",
                        "description": "VM in vApp in which internal disk is created\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vmPlacementPolicy:VmPlacementPolicy": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VM Placement Policy\n"
                },
                "logicalVmGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the\nentries set in this attribute\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VM Placement Policy\n"
                },
                "providerVdcId": {
                    "type": "string",
                    "description": "ID of the Provider VDC to which the VM Placement Policy belongs\n"
                },
                "vmGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the collection of VMs with similar host requirements\n"
                }
            },
            "required": [
                "name",
                "providerVdcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VM Placement Policy\n"
                },
                "logicalVmGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the\nentries set in this attribute\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VM Placement Policy\n"
                },
                "providerVdcId": {
                    "type": "string",
                    "description": "ID of the Provider VDC to which the VM Placement Policy belongs\n"
                },
                "vmGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the collection of VMs with similar host requirements\n"
                }
            },
            "requiredInputs": [
                "providerVdcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VmPlacementPolicy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VM Placement Policy\n"
                    },
                    "logicalVmGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the\nentries set in this attribute\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VM Placement Policy\n"
                    },
                    "providerVdcId": {
                        "type": "string",
                        "description": "ID of the Provider VDC to which the VM Placement Policy belongs\n"
                    },
                    "vmGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the collection of VMs with similar host requirements\n"
                    }
                },
                "type": "object"
            }
        },
        "vcd:index/vmSizingPolicy:VmSizingPolicy": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/vcd:index/VmSizingPolicyCpu:VmSizingPolicyCpu"
                },
                "description": {
                    "type": "string"
                },
                "memory": {
                    "$ref": "#/types/vcd:index/VmSizingPolicyMemory:VmSizingPolicyMemory"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use - Deprecated and unneeded: will be ignored if used\n",
                    "deprecationMessage": "Unneeded property, which was included by mistake"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "cpu": {
                    "$ref": "#/types/vcd:index/VmSizingPolicyCpu:VmSizingPolicyCpu"
                },
                "description": {
                    "type": "string"
                },
                "memory": {
                    "$ref": "#/types/vcd:index/VmSizingPolicyMemory:VmSizingPolicyMemory"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string",
                    "description": "The name of organization to use - Deprecated and unneeded: will be ignored if used\n",
                    "deprecationMessage": "Unneeded property, which was included by mistake"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VmSizingPolicy resources.\n",
                "properties": {
                    "cpu": {
                        "$ref": "#/types/vcd:index/VmSizingPolicyCpu:VmSizingPolicyCpu"
                    },
                    "description": {
                        "type": "string"
                    },
                    "memory": {
                        "$ref": "#/types/vcd:index/VmSizingPolicyMemory:VmSizingPolicyMemory"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "description": "The name of organization to use - Deprecated and unneeded: will be ignored if used\n",
                        "deprecationMessage": "Unneeded property, which was included by mistake"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "vcd:index/getCatalog:getCatalog": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalog.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogFilter:getCatalogFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCatalog.\n",
                "properties": {
                    "cacheEnabled": {
                        "type": "boolean"
                    },
                    "catalogVersion": {
                        "type": "integer"
                    },
                    "created": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogFilter:getCatalogFilter"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isLocal": {
                        "type": "boolean"
                    },
                    "isPublished": {
                        "type": "boolean"
                    },
                    "isShared": {
                        "type": "boolean"
                    },
                    "mediaItemLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getCatalogMetadataEntry:getCatalogMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "numberOfMedia": {
                        "type": "integer"
                    },
                    "numberOfVappTemplates": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "preserveIdentityInformation": {
                        "type": "boolean"
                    },
                    "publishEnabled": {
                        "type": "boolean"
                    },
                    "publishSubscriptionType": {
                        "type": "string"
                    },
                    "publishSubscriptionUrl": {
                        "type": "string"
                    },
                    "storageProfileId": {
                        "type": "string"
                    },
                    "vappTemplateLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cacheEnabled",
                    "catalogVersion",
                    "created",
                    "description",
                    "href",
                    "isLocal",
                    "isPublished",
                    "isShared",
                    "mediaItemLists",
                    "metadata",
                    "metadataEntries",
                    "numberOfMedia",
                    "numberOfVappTemplates",
                    "ownerName",
                    "preserveIdentityInformation",
                    "publishEnabled",
                    "publishSubscriptionType",
                    "publishSubscriptionUrl",
                    "storageProfileId",
                    "vappTemplateLists",
                    "id"
                ]
            }
        },
        "vcd:index/getCatalogItem:getCatalogItem": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogItem.\n",
                "properties": {
                    "catalog": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogItemFilter:getCatalogItemFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "catalog"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogItem.\n",
                "properties": {
                    "catalog": {
                        "type": "string"
                    },
                    "catalogItemMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "created": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogItemFilter:getCatalogItemFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getCatalogItemMetadataEntry:getCatalogItemMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "catalog",
                    "catalogItemMetadata",
                    "created",
                    "description",
                    "metadata",
                    "metadataEntries",
                    "id"
                ]
            }
        },
        "vcd:index/getCatalogMedia:getCatalogMedia": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogMedia.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "deprecationMessage": "use catalog_id instead, especially if using a shared catalog"
                    },
                    "catalogId": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogMediaFilter:getCatalogMediaFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogMedia.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "deprecationMessage": "use catalog_id instead, especially if using a shared catalog"
                    },
                    "catalogId": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogMediaFilter:getCatalogMediaFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isIso": {
                        "type": "boolean"
                    },
                    "isPublished": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getCatalogMediaMetadataEntry:getCatalogMediaMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "storageProfileName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "catalog",
                    "creationDate",
                    "description",
                    "isIso",
                    "isPublished",
                    "metadata",
                    "metadataEntries",
                    "ownerName",
                    "size",
                    "status",
                    "storageProfileName",
                    "id"
                ]
            }
        },
        "vcd:index/getCatalogVappTemplate:getCatalogVappTemplate": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogVappTemplate.\n",
                "properties": {
                    "catalogId": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogVappTemplateFilter:getCatalogVappTemplateFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdcId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogVappTemplate.\n",
                "properties": {
                    "catalogId": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getCatalogVappTemplateFilter:getCatalogVappTemplateFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getCatalogVappTemplateMetadataEntry:getCatalogVappTemplateMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdcId": {
                        "type": "string"
                    },
                    "vmNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "description",
                    "metadata",
                    "metadataEntries",
                    "vmNames",
                    "id"
                ]
            }
        },
        "vcd:index/getEdgegateway:getEdgegateway": {
            "inputs": {
                "description": "A collection of arguments for invoking getEdgegateway.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getEdgegatewayFilter:getEdgegatewayFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEdgegateway.\n",
                "properties": {
                    "configuration": {
                        "type": "string"
                    },
                    "defaultExternalNetworkIp": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "distributedRouting": {
                        "type": "boolean"
                    },
                    "externalNetworkIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "externalNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getEdgegatewayExternalNetwork:getEdgegatewayExternalNetwork"
                        }
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getEdgegatewayFilter:getEdgegatewayFilter"
                    },
                    "fipsModeEnabled": {
                        "type": "boolean"
                    },
                    "fwDefaultRuleAction": {
                        "type": "string"
                    },
                    "fwDefaultRuleLoggingEnabled": {
                        "type": "boolean"
                    },
                    "fwEnabled": {
                        "type": "boolean"
                    },
                    "haEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lbAccelerationEnabled": {
                        "type": "boolean"
                    },
                    "lbEnabled": {
                        "type": "boolean"
                    },
                    "lbLoggingEnabled": {
                        "type": "boolean"
                    },
                    "lbLoglevel": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "useDefaultRouteForDnsRelay": {
                        "type": "boolean"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "defaultExternalNetworkIp",
                    "description",
                    "distributedRouting",
                    "externalNetworks",
                    "externalNetworkIps",
                    "fipsModeEnabled",
                    "fwDefaultRuleAction",
                    "fwDefaultRuleLoggingEnabled",
                    "fwEnabled",
                    "haEnabled",
                    "lbAccelerationEnabled",
                    "lbEnabled",
                    "lbLoggingEnabled",
                    "lbLoglevel",
                    "useDefaultRouteForDnsRelay",
                    "id"
                ]
            }
        },
        "vcd:index/getExternalNetwork:getExternalNetwork": {
            "inputs": {
                "description": "A collection of arguments for invoking getExternalNetwork.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExternalNetwork.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getExternalNetworkIpScope:getExternalNetworkIpScope"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "retainNetInfoAcrossDeployments": {
                        "type": "boolean"
                    },
                    "vsphereNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getExternalNetworkVsphereNetwork:getExternalNetworkVsphereNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipScopes",
                    "name",
                    "retainNetInfoAcrossDeployments",
                    "vsphereNetworks",
                    "id"
                ]
            }
        },
        "vcd:index/getExternalNetworkV2:getExternalNetworkV2": {
            "inputs": {
                "description": "A collection of arguments for invoking getExternalNetworkV2.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExternalNetworkV2.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getExternalNetworkV2IpScope:getExternalNetworkV2IpScope"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nsxtNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getExternalNetworkV2NsxtNetwork:getExternalNetworkV2NsxtNetwork"
                        }
                    },
                    "vsphereNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getExternalNetworkV2VsphereNetwork:getExternalNetworkV2VsphereNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipScopes",
                    "name",
                    "nsxtNetworks",
                    "vsphereNetworks",
                    "id"
                ]
            }
        },
        "vcd:index/getGlobalRole:getGlobalRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalRole.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "publishToAllTenants": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "rights": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "bundleKey",
                    "description",
                    "name",
                    "publishToAllTenants",
                    "readOnly",
                    "rights",
                    "tenants",
                    "id"
                ]
            }
        },
        "vcd:index/getIndependentDisk:getIndependentDisk": {
            "inputs": {
                "description": "A collection of arguments for invoking getIndependentDisk.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIndependentDisk.\n",
                "properties": {
                    "attachedVmIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "busSubType": {
                        "type": "string"
                    },
                    "busType": {
                        "type": "string"
                    },
                    "datastoreName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "encrypted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "iops": {
                        "type": "integer"
                    },
                    "isAttached": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getIndependentDiskMetadataEntry:getIndependentDiskMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "sharingType": {
                        "type": "string"
                    },
                    "sizeInMb": {
                        "type": "integer"
                    },
                    "storageProfile": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "attachedVmIds",
                    "busSubType",
                    "busType",
                    "datastoreName",
                    "description",
                    "encrypted",
                    "iops",
                    "isAttached",
                    "metadata",
                    "metadataEntries",
                    "ownerName",
                    "sharingType",
                    "sizeInMb",
                    "storageProfile",
                    "uuid"
                ]
            }
        },
        "vcd:index/getLbAppProfile:getLbAppProfile": {
            "inputs": {
                "description": "A collection of arguments for invoking getLbAppProfile.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbAppProfile.\n",
                "properties": {
                    "cookieMode": {
                        "type": "string"
                    },
                    "cookieName": {
                        "type": "string"
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "enablePoolSideSsl": {
                        "type": "boolean"
                    },
                    "enableSslPassthrough": {
                        "type": "boolean"
                    },
                    "expiration": {
                        "type": "integer"
                    },
                    "httpRedirectUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "insertXForwardedHttpHeader": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "persistenceMechanism": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cookieMode",
                    "cookieName",
                    "edgeGateway",
                    "enablePoolSideSsl",
                    "enableSslPassthrough",
                    "expiration",
                    "httpRedirectUrl",
                    "insertXForwardedHttpHeader",
                    "name",
                    "persistenceMechanism",
                    "type",
                    "id"
                ]
            }
        },
        "vcd:index/getLbAppRule:getLbAppRule": {
            "inputs": {
                "description": "A collection of arguments for invoking getLbAppRule.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbAppRule.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "script": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "name",
                    "script",
                    "id"
                ]
            }
        },
        "vcd:index/getLbServerPool:getLbServerPool": {
            "inputs": {
                "description": "A collection of arguments for invoking getLbServerPool.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbServerPool.\n",
                "properties": {
                    "algorithm": {
                        "type": "string"
                    },
                    "algorithmParameters": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "enableTransparency": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getLbServerPoolMember:getLbServerPoolMember"
                        }
                    },
                    "monitorId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "algorithmParameters",
                    "description",
                    "edgeGateway",
                    "enableTransparency",
                    "members",
                    "monitorId",
                    "name",
                    "id"
                ]
            }
        },
        "vcd:index/getLbServiceMonitor:getLbServiceMonitor": {
            "inputs": {
                "description": "A collection of arguments for invoking getLbServiceMonitor.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbServiceMonitor.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string"
                    },
                    "expected": {
                        "type": "string"
                    },
                    "extension": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interval": {
                        "type": "integer"
                    },
                    "maxRetries": {
                        "type": "integer"
                    },
                    "method": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "receive": {
                        "type": "string"
                    },
                    "send": {
                        "type": "string"
                    },
                    "timeout": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "expected",
                    "extension",
                    "interval",
                    "maxRetries",
                    "method",
                    "name",
                    "receive",
                    "send",
                    "timeout",
                    "type",
                    "url",
                    "id"
                ]
            }
        },
        "vcd:index/getLbVirtualServer:getLbVirtualServer": {
            "inputs": {
                "description": "A collection of arguments for invoking getLbVirtualServer.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbVirtualServer.\n",
                "properties": {
                    "appProfileId": {
                        "type": "string"
                    },
                    "appRuleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "connectionLimit": {
                        "type": "integer"
                    },
                    "connectionRateLimit": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "enableAcceleration": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "serverPoolId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "appProfileId",
                    "appRuleIds",
                    "connectionLimit",
                    "connectionRateLimit",
                    "description",
                    "edgeGateway",
                    "enableAcceleration",
                    "enabled",
                    "ipAddress",
                    "name",
                    "port",
                    "protocol",
                    "serverPoolId",
                    "id"
                ]
            }
        },
        "vcd:index/getLibraryCertificate:getLibraryCertificate": {
            "inputs": {
                "description": "A collection of arguments for invoking getLibraryCertificate.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLibraryCertificate.\n",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "certificate",
                    "description",
                    "id"
                ]
            }
        },
        "vcd:index/getNetworkDirect:getNetworkDirect": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkDirect.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkDirectFilter:getNetworkDirectFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkDirect.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "externalNetwork": {
                        "type": "string"
                    },
                    "externalNetworkDns1": {
                        "type": "string"
                    },
                    "externalNetworkDns2": {
                        "type": "string"
                    },
                    "externalNetworkDnsSuffix": {
                        "type": "string"
                    },
                    "externalNetworkGateway": {
                        "type": "string"
                    },
                    "externalNetworkNetmask": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkDirectFilter:getNetworkDirectFilter"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkDirectMetadataEntry:getNetworkDirectMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "shared": {
                        "type": "boolean"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "externalNetwork",
                    "externalNetworkDns1",
                    "externalNetworkDns2",
                    "externalNetworkDnsSuffix",
                    "externalNetworkGateway",
                    "externalNetworkNetmask",
                    "href",
                    "metadata",
                    "metadataEntries",
                    "shared",
                    "id"
                ]
            }
        },
        "vcd:index/getNetworkIsolated:getNetworkIsolated": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkIsolated.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkIsolatedFilter:getNetworkIsolatedFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkIsolated.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dhcpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkIsolatedDhcpPool:getNetworkIsolatedDhcpPool"
                        }
                    },
                    "dns1": {
                        "type": "string"
                    },
                    "dns2": {
                        "type": "string"
                    },
                    "dnsSuffix": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkIsolatedFilter:getNetworkIsolatedFilter"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkIsolatedMetadataEntry:getNetworkIsolatedMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "shared": {
                        "type": "boolean"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkIsolatedStaticIpPool:getNetworkIsolatedStaticIpPool"
                        }
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dhcpPools",
                    "dns1",
                    "dns2",
                    "dnsSuffix",
                    "gateway",
                    "href",
                    "metadata",
                    "metadataEntries",
                    "netmask",
                    "shared",
                    "staticIpPools",
                    "id"
                ]
            }
        },
        "vcd:index/getNetworkIsolatedV2:getNetworkIsolatedV2": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkIsolatedV2.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkIsolatedV2Filter:getNetworkIsolatedV2Filter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkIsolatedV2.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dns1": {
                        "type": "string"
                    },
                    "dns2": {
                        "type": "string"
                    },
                    "dnsSuffix": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkIsolatedV2Filter:getNetworkIsolatedV2Filter"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isShared": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkIsolatedV2MetadataEntry:getNetworkIsolatedV2MetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "prefixLength": {
                        "type": "integer"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkIsolatedV2StaticIpPool:getNetworkIsolatedV2StaticIpPool"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dns1",
                    "dns2",
                    "dnsSuffix",
                    "gateway",
                    "isShared",
                    "metadata",
                    "metadataEntries",
                    "ownerId",
                    "prefixLength",
                    "staticIpPools",
                    "vdc",
                    "id"
                ]
            }
        },
        "vcd:index/getNetworkRouted:getNetworkRouted": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkRouted.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkRoutedFilter:getNetworkRoutedFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkRouted.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dhcpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkRoutedDhcpPool:getNetworkRoutedDhcpPool"
                        }
                    },
                    "dns1": {
                        "type": "string"
                    },
                    "dns2": {
                        "type": "string"
                    },
                    "dnsSuffix": {
                        "type": "string"
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkRoutedFilter:getNetworkRoutedFilter"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceType": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkRoutedMetadataEntry:getNetworkRoutedMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "shared": {
                        "type": "boolean"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkRoutedStaticIpPool:getNetworkRoutedStaticIpPool"
                        }
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dhcpPools",
                    "dns1",
                    "dns2",
                    "dnsSuffix",
                    "edgeGateway",
                    "gateway",
                    "href",
                    "interfaceType",
                    "metadata",
                    "metadataEntries",
                    "netmask",
                    "shared",
                    "staticIpPools",
                    "id"
                ]
            }
        },
        "vcd:index/getNetworkRoutedV2:getNetworkRoutedV2": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkRoutedV2.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkRoutedV2Filter:getNetworkRoutedV2Filter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Routed networks will inherit VDC from parent Edge Gateway.",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkRoutedV2.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dns1": {
                        "type": "string"
                    },
                    "dns2": {
                        "type": "string"
                    },
                    "dnsSuffix": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNetworkRoutedV2Filter:getNetworkRoutedV2Filter"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceType": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkRoutedV2MetadataEntry:getNetworkRoutedV2MetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "prefixLength": {
                        "type": "integer"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNetworkRoutedV2StaticIpPool:getNetworkRoutedV2StaticIpPool"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Routed networks will inherit VDC from parent Edge Gateway."
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dns1",
                    "dns2",
                    "dnsSuffix",
                    "edgeGatewayId",
                    "gateway",
                    "interfaceType",
                    "metadata",
                    "metadataEntries",
                    "ownerId",
                    "prefixLength",
                    "staticIpPools",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbCloud:getNsxtAlbCloud": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbCloud.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbCloud.\n",
                "properties": {
                    "controllerId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "healthMessage": {
                        "type": "string"
                    },
                    "healthStatus": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "importableCloudId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkPoolId": {
                        "type": "string"
                    },
                    "networkPoolName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controllerId",
                    "description",
                    "healthMessage",
                    "healthStatus",
                    "importableCloudId",
                    "name",
                    "networkPoolId",
                    "networkPoolName",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbController:getNsxtAlbController": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbController.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbController.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "licenseType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "licenseType",
                    "name",
                    "url",
                    "username",
                    "version",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbEdgegatewayServiceEngineGroup:getNsxtAlbEdgegatewayServiceEngineGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbEdgegatewayServiceEngineGroup.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "serviceEngineGroupId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "serviceEngineGroupName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbEdgegatewayServiceEngineGroup.\n",
                "properties": {
                    "deployedVirtualServices": {
                        "type": "integer"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxVirtualServices": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "reservedVirtualServices": {
                        "type": "string"
                    },
                    "serviceEngineGroupId": {
                        "type": "string"
                    },
                    "serviceEngineGroupName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "deployedVirtualServices",
                    "edgeGatewayId",
                    "maxVirtualServices",
                    "reservedVirtualServices",
                    "serviceEngineGroupId",
                    "serviceEngineGroupName",
                    "vdc",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbImportableCloud:getNsxtAlbImportableCloud": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbImportableCloud.\n",
                "properties": {
                    "controllerId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "controllerId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbImportableCloud.\n",
                "properties": {
                    "alreadyImported": {
                        "type": "boolean"
                    },
                    "controllerId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkPoolId": {
                        "type": "string"
                    },
                    "networkPoolName": {
                        "type": "string"
                    },
                    "transportZoneName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "alreadyImported",
                    "controllerId",
                    "name",
                    "networkPoolId",
                    "networkPoolName",
                    "transportZoneName",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbPool:getNsxtAlbPool": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbPool.\n",
                "properties": {
                    "associatedVirtualServiceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "passiveMonitoringEnabled": {
                        "type": "boolean"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbPool.\n",
                "properties": {
                    "algorithm": {
                        "type": "string"
                    },
                    "associatedVirtualServiceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "associatedVirtualServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "caCertificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cnCheckEnabled": {
                        "type": "boolean"
                    },
                    "defaultPort": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enabledMemberCount": {
                        "type": "integer"
                    },
                    "gracefulTimeoutPeriod": {
                        "type": "integer"
                    },
                    "healthMessage": {
                        "type": "string"
                    },
                    "healthMonitors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtAlbPoolHealthMonitor:getNsxtAlbPoolHealthMonitor"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memberCount": {
                        "type": "integer"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtAlbPoolMember:getNsxtAlbPoolMember"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "passiveMonitoringEnabled": {
                        "type": "boolean"
                    },
                    "persistenceProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtAlbPoolPersistenceProfile:getNsxtAlbPoolPersistenceProfile"
                        }
                    },
                    "upMemberCount": {
                        "type": "integer"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "associatedVirtualServices",
                    "caCertificateIds",
                    "cnCheckEnabled",
                    "defaultPort",
                    "description",
                    "domainNames",
                    "edgeGatewayId",
                    "enabled",
                    "enabledMemberCount",
                    "gracefulTimeoutPeriod",
                    "healthMessage",
                    "healthMonitors",
                    "members",
                    "memberCount",
                    "name",
                    "persistenceProfiles",
                    "upMemberCount",
                    "vdc",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbServiceEngineGroup:getNsxtAlbServiceEngineGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbServiceEngineGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "overallocated": {
                        "type": "boolean"
                    },
                    "syncOnRefresh": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbServiceEngineGroup.\n",
                "properties": {
                    "albCloudId": {
                        "type": "string"
                    },
                    "deployedVirtualServices": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "haMode": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxVirtualServices": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "overallocated": {
                        "type": "boolean"
                    },
                    "reservationModel": {
                        "type": "string"
                    },
                    "reservedVirtualServices": {
                        "type": "integer"
                    },
                    "supportedFeatureSet": {
                        "type": "string"
                    },
                    "syncOnRefresh": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "albCloudId",
                    "deployedVirtualServices",
                    "description",
                    "haMode",
                    "maxVirtualServices",
                    "name",
                    "reservationModel",
                    "reservedVirtualServices",
                    "supportedFeatureSet",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbSettings:getNsxtAlbSettings": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbSettings.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "serviceNetworkSpecification": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbSettings.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "org": {
                        "type": "string"
                    },
                    "serviceNetworkSpecification": {
                        "type": "string"
                    },
                    "supportedFeatureSet": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "isActive",
                    "serviceNetworkSpecification",
                    "supportedFeatureSet",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAlbVirtualService:getNsxtAlbVirtualService": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAlbVirtualService.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAlbVirtualService.\n",
                "properties": {
                    "applicationProfileType": {
                        "type": "string"
                    },
                    "caCertificateId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "serviceEngineGroupId": {
                        "type": "string"
                    },
                    "servicePorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtAlbVirtualServiceServicePort:getNsxtAlbVirtualServiceServicePort"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    },
                    "virtualIpAddress": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "applicationProfileType",
                    "caCertificateId",
                    "description",
                    "edgeGatewayId",
                    "enabled",
                    "name",
                    "poolId",
                    "serviceEngineGroupId",
                    "servicePorts",
                    "vdc",
                    "virtualIpAddress",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtAppPortProfile:getNsxtAppPortProfile": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtAppPortProfile.\n",
                "properties": {
                    "contextId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nsxtManagerId": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of 'context_id'",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "scope": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of 'context_id'",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "scope"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtAppPortProfile.\n",
                "properties": {
                    "appPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtAppPortProfileAppPort:getNsxtAppPortProfileAppPort"
                        }
                    },
                    "contextId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nsxtManagerId": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of 'context_id'"
                    },
                    "org": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of 'context_id'"
                    }
                },
                "type": "object",
                "required": [
                    "appPorts",
                    "contextId",
                    "description",
                    "name",
                    "scope",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtDistributedFirewall:getNsxtDistributedFirewall": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtDistributedFirewall.\n",
                "properties": {
                    "org": {
                        "type": "string"
                    },
                    "vdcGroupId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "vdcGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtDistributedFirewall.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "org": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtDistributedFirewallRule:getNsxtDistributedFirewallRule"
                        }
                    },
                    "vdcGroupId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "rules",
                    "vdcGroupId",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtDynamicSecurityGroup:getNsxtDynamicSecurityGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtDynamicSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdcGroupId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "vdcGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtDynamicSecurityGroup.\n",
                "properties": {
                    "criterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtDynamicSecurityGroupCriteria:getNsxtDynamicSecurityGroupCriteria"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memberVms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtDynamicSecurityGroupMemberVm:getNsxtDynamicSecurityGroupMemberVm"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdcGroupId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "criterias",
                    "memberVms",
                    "name",
                    "vdcGroupId",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtEdgeCluster:getNsxtEdgeCluster": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtEdgeCluster.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "providerVdcId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'vdc_id', 'vdc_group_id', and 'provider_vdc_id' which accept IDs of VDC, VDC Group and Provider VDC respectively"
                    },
                    "vdcGroupId": {
                        "type": "string"
                    },
                    "vdcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtEdgeCluster.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeCount": {
                        "type": "integer"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "providerVdcId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'vdc_id', 'vdc_group_id', and 'provider_vdc_id' which accept IDs of VDC, VDC Group and Provider VDC respectively"
                    },
                    "vdcGroupId": {
                        "type": "string"
                    },
                    "vdcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deploymentType",
                    "description",
                    "name",
                    "nodeCount",
                    "nodeType",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtEdgegateway:getNsxtEdgegateway": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtEdgegateway.\n",
                "properties": {
                    "edgeClusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtEdgegateway.\n",
                "properties": {
                    "dedicateExternalNetwork": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "edgeClusterId": {
                        "type": "string"
                    },
                    "externalNetworkId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "primaryIp": {
                        "type": "string"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtEdgegatewaySubnet:getNsxtEdgegatewaySubnet"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object",
                "required": [
                    "dedicateExternalNetwork",
                    "description",
                    "externalNetworkId",
                    "name",
                    "ownerId",
                    "primaryIp",
                    "subnets",
                    "vdc",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtEdgegatewayBgpConfiguration:getNsxtEdgegatewayBgpConfiguration": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtEdgegatewayBgpConfiguration.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtEdgegatewayBgpConfiguration.\n",
                "properties": {
                    "ecmpEnabled": {
                        "type": "boolean"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "gracefulRestartMode": {
                        "type": "string"
                    },
                    "gracefulRestartTimer": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "localAsNumber": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "staleRouteTimer": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "ecmpEnabled",
                    "edgeGatewayId",
                    "enabled",
                    "gracefulRestartMode",
                    "gracefulRestartTimer",
                    "localAsNumber",
                    "staleRouteTimer",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtEdgegatewayBgpIpPrefixList:getNsxtEdgegatewayBgpIpPrefixList": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtEdgegatewayBgpIpPrefixList.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtEdgegatewayBgpIpPrefixList.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipPrefixes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtEdgegatewayBgpIpPrefixListIpPrefix:getNsxtEdgegatewayBgpIpPrefixListIpPrefix"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "edgeGatewayId",
                    "ipPrefixes",
                    "name",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtEdgegatewayBgpNeighbor:getNsxtEdgegatewayBgpNeighbor": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtEdgegatewayBgpNeighbor.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "ipAddress"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtEdgegatewayBgpNeighbor.\n",
                "properties": {
                    "allowAsIn": {
                        "type": "boolean"
                    },
                    "bfdDeadMultiple": {
                        "type": "integer"
                    },
                    "bfdEnabled": {
                        "type": "boolean"
                    },
                    "bfdInterval": {
                        "type": "integer"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "gracefulRestartMode": {
                        "type": "string"
                    },
                    "holdDownTimer": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inFilterIpPrefixListId": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "keepAliveTimer": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "outFilterIpPrefixListId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "remoteAsNumber": {
                        "type": "string"
                    },
                    "routeFiltering": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "allowAsIn",
                    "bfdDeadMultiple",
                    "bfdEnabled",
                    "bfdInterval",
                    "edgeGatewayId",
                    "gracefulRestartMode",
                    "holdDownTimer",
                    "inFilterIpPrefixListId",
                    "ipAddress",
                    "keepAliveTimer",
                    "outFilterIpPrefixListId",
                    "password",
                    "remoteAsNumber",
                    "routeFiltering",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtFirewall:getNsxtFirewall": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtFirewall.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtFirewall.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "org": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtFirewallRule:getNsxtFirewallRule"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "rules",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtIpSet:getNsxtIpSet": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtIpSet.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. IP Set will inherit VDC from parent Edge Gateway.",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtIpSet.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. IP Set will inherit VDC from parent Edge Gateway."
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "edgeGatewayId",
                    "ipAddresses",
                    "name",
                    "ownerId",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtIpsecVpnTunnel:getNsxtIpsecVpnTunnel": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtIpsecVpnTunnel.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtIpsecVpnTunnel.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ikeFailReason": {
                        "type": "string"
                    },
                    "ikeServiceStatus": {
                        "type": "string"
                    },
                    "localIpAddress": {
                        "type": "string"
                    },
                    "localNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "logging": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "preSharedKey": {
                        "type": "string"
                    },
                    "remoteIpAddress": {
                        "type": "string"
                    },
                    "remoteNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "securityProfile": {
                        "type": "string"
                    },
                    "securityProfileCustomizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtIpsecVpnTunnelSecurityProfileCustomization:getNsxtIpsecVpnTunnelSecurityProfileCustomization"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "edgeGatewayId",
                    "enabled",
                    "ikeFailReason",
                    "ikeServiceStatus",
                    "localIpAddress",
                    "localNetworks",
                    "logging",
                    "name",
                    "preSharedKey",
                    "remoteIpAddress",
                    "remoteNetworks",
                    "securityProfile",
                    "securityProfileCustomizations",
                    "status",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtManager:getNsxtManager": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtManager.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtManager.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtNatRule:getNsxtNatRule": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtNatRule.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtNatRule.\n",
                "properties": {
                    "appPortProfileId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dnatExternalPort": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "externalAddress": {
                        "type": "string"
                    },
                    "firewallMatch": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalAddress": {
                        "type": "string"
                    },
                    "logging": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "integer"
                    },
                    "ruleType": {
                        "type": "string"
                    },
                    "snatDestinationAddress": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Edge Gateway will be looked up based on 'edge_gateway_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "appPortProfileId",
                    "description",
                    "dnatExternalPort",
                    "edgeGatewayId",
                    "enabled",
                    "externalAddress",
                    "firewallMatch",
                    "internalAddress",
                    "logging",
                    "name",
                    "priority",
                    "ruleType",
                    "snatDestinationAddress",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtNetworkContextProfile:getNsxtNetworkContextProfile": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtNetworkContextProfile.\n",
                "properties": {
                    "contextId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "contextId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtNetworkContextProfile.\n",
                "properties": {
                    "contextId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "contextId",
                    "name",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtNetworkDhcp:getNsxtNetworkDhcp": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtNetworkDhcp.\n",
                "properties": {
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "orgNetworkId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Org network will be looked up based on 'org_network_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "orgNetworkId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtNetworkDhcp.\n",
                "properties": {
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "leaseTime": {
                        "type": "integer"
                    },
                    "listenerIpAddress": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "orgNetworkId": {
                        "type": "string"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtNetworkDhcpPool:getNsxtNetworkDhcpPool"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Org network will be looked up based on 'org_network_id' field"
                    }
                },
                "type": "object",
                "required": [
                    "leaseTime",
                    "listenerIpAddress",
                    "mode",
                    "orgNetworkId",
                    "pools",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtNetworkImported:getNsxtNetworkImported": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtNetworkImported.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getNsxtNetworkImportedFilter:getNsxtNetworkImportedFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtNetworkImported.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dns1": {
                        "type": "string"
                    },
                    "dns2": {
                        "type": "string"
                    },
                    "dnsSuffix": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getNsxtNetworkImportedFilter:getNsxtNetworkImportedFilter"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nsxtLogicalSwitchId": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "prefixLength": {
                        "type": "integer"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtNetworkImportedStaticIpPool:getNsxtNetworkImportedStaticIpPool"
                        }
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dns1",
                    "dns2",
                    "dnsSuffix",
                    "gateway",
                    "nsxtLogicalSwitchId",
                    "ownerId",
                    "prefixLength",
                    "staticIpPools",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtRouteAdvertisement:getNsxtRouteAdvertisement": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtRouteAdvertisement.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtRouteAdvertisement.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "org": {
                        "type": "string"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "enabled",
                    "subnets",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtSecurityGroup:getNsxtSecurityGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtSecurityGroup.\n",
                "properties": {
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Security Group will inherit VDC from parent Edge Gateway."
                    }
                },
                "type": "object",
                "required": [
                    "edgeGatewayId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "edgeGatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memberOrgNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "memberVms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxtSecurityGroupMemberVm:getNsxtSecurityGroupMemberVm"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "deprecationMessage": "Deprecated in favor of `edge_gateway_id`. Security Group will inherit VDC from parent Edge Gateway."
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "edgeGatewayId",
                    "memberOrgNetworkIds",
                    "memberVms",
                    "name",
                    "ownerId",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxtTier0Router:getNsxtTier0Router": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxtTier0Router.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "nsxtManagerId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "nsxtManagerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxtTier0Router.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isAssigned": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nsxtManagerId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "isAssigned",
                    "name",
                    "nsxtManagerId",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxvDhcpRelay:getNsxvDhcpRelay": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxvDhcpRelay.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxvDhcpRelay.\n",
                "properties": {
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "org": {
                        "type": "string"
                    },
                    "relayAgents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxvDhcpRelayRelayAgent:getNsxvDhcpRelayRelayAgent"
                        }
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "domainNames",
                    "edgeGateway",
                    "ipAddresses",
                    "ipSets",
                    "relayAgents",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxvDnat:getNsxvDnat": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxvDnat.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "ruleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxvDnat.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "icmpType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loggingEnabled": {
                        "type": "boolean"
                    },
                    "networkName": {
                        "type": "string"
                    },
                    "networkType": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "originalAddress": {
                        "type": "string"
                    },
                    "originalPort": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "ruleTag": {
                        "type": "integer"
                    },
                    "ruleType": {
                        "type": "string"
                    },
                    "translatedAddress": {
                        "type": "string"
                    },
                    "translatedPort": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "edgeGateway",
                    "enabled",
                    "icmpType",
                    "loggingEnabled",
                    "networkName",
                    "networkType",
                    "originalAddress",
                    "originalPort",
                    "protocol",
                    "ruleId",
                    "ruleTag",
                    "ruleType",
                    "translatedAddress",
                    "translatedPort",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxvFirewallRule:getNsxvFirewallRule": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxvFirewallRule.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "ruleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxvFirewallRule.\n",
                "properties": {
                    "action": {
                        "type": "string"
                    },
                    "destinations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxvFirewallRuleDestination:getNsxvFirewallRuleDestination"
                        }
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loggingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "ruleTag": {
                        "type": "integer"
                    },
                    "ruleType": {
                        "type": "string"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxvFirewallRuleService:getNsxvFirewallRuleService"
                        }
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getNsxvFirewallRuleSource:getNsxvFirewallRuleSource"
                        }
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "destinations",
                    "edgeGateway",
                    "enabled",
                    "loggingEnabled",
                    "name",
                    "ruleId",
                    "ruleTag",
                    "ruleType",
                    "services",
                    "sources",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxvIpSet:getNsxvIpSet": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxvIpSet.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxvIpSet.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isInheritanceAllowed": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipAddresses",
                    "isInheritanceAllowed",
                    "name",
                    "id"
                ]
            }
        },
        "vcd:index/getNsxvSnat:getNsxvSnat": {
            "inputs": {
                "description": "A collection of arguments for invoking getNsxvSnat.\n",
                "properties": {
                    "edgeGateway": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "edgeGateway",
                    "ruleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNsxvSnat.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "edgeGateway": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loggingEnabled": {
                        "type": "boolean"
                    },
                    "networkName": {
                        "type": "string"
                    },
                    "networkType": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "originalAddress": {
                        "type": "string"
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "ruleTag": {
                        "type": "integer"
                    },
                    "ruleType": {
                        "type": "string"
                    },
                    "translatedAddress": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "edgeGateway",
                    "enabled",
                    "loggingEnabled",
                    "networkName",
                    "networkType",
                    "originalAddress",
                    "ruleId",
                    "ruleTag",
                    "ruleType",
                    "translatedAddress",
                    "id"
                ]
            }
        },
        "vcd:index/getOrg:getOrg": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrg.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrg.\n",
                "properties": {
                    "canPublishCatalogs": {
                        "type": "boolean"
                    },
                    "canPublishExternalCatalogs": {
                        "type": "boolean"
                    },
                    "canSubscribeExternalCatalogs": {
                        "type": "boolean"
                    },
                    "delayAfterPowerOnSeconds": {
                        "type": "integer"
                    },
                    "deployedVmQuota": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgMetadataEntry:getOrgMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "storedVmQuota": {
                        "type": "integer"
                    },
                    "vappLeases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgVappLease:getOrgVappLease"
                        }
                    },
                    "vappTemplateLeases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgVappTemplateLease:getOrgVappTemplateLease"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "canPublishCatalogs",
                    "canPublishExternalCatalogs",
                    "canSubscribeExternalCatalogs",
                    "delayAfterPowerOnSeconds",
                    "deployedVmQuota",
                    "description",
                    "fullName",
                    "isEnabled",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "storedVmQuota",
                    "vappLeases",
                    "vappTemplateLeases",
                    "id"
                ]
            }
        },
        "vcd:index/getOrgGroup:getOrgGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrgGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "providerType": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "userNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "providerType",
                    "role",
                    "userNames",
                    "id"
                ]
            }
        },
        "vcd:index/getOrgLdap:getOrgLdap": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrgLdap.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgLdap.\n",
                "properties": {
                    "customSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgLdapCustomSetting:getOrgLdapCustomSetting"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ldapMode": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customSettings",
                    "ldapMode",
                    "orgId",
                    "id"
                ]
            }
        },
        "vcd:index/getOrgUser:getOrgUser": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrgUser.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrgUser.\n",
                "properties": {
                    "deployedVmQuota": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "emailAddress": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "groupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instantMessaging": {
                        "type": "string"
                    },
                    "isExternal": {
                        "type": "boolean"
                    },
                    "isGroupRole": {
                        "type": "boolean"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "providerType": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "storedVmQuota": {
                        "type": "integer"
                    },
                    "telephone": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deployedVmQuota",
                    "description",
                    "emailAddress",
                    "enabled",
                    "fullName",
                    "groupNames",
                    "instantMessaging",
                    "isExternal",
                    "isGroupRole",
                    "isLocked",
                    "providerType",
                    "role",
                    "storedVmQuota",
                    "telephone",
                    "id"
                ]
            }
        },
        "vcd:index/getOrgVdc:getOrgVdc": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrgVdc.\n",
                "properties": {
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgVdcMetadataEntry:getOrgVdcMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgVdc.\n",
                "properties": {
                    "allocationModel": {
                        "type": "string"
                    },
                    "allowOverCommit": {
                        "type": "boolean"
                    },
                    "computeCapacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgVdcComputeCapacity:getOrgVdcComputeCapacity"
                        }
                    },
                    "cpuGuaranteed": {
                        "type": "number"
                    },
                    "cpuSpeed": {
                        "type": "integer"
                    },
                    "defaultComputePolicyId": {
                        "type": "string"
                    },
                    "defaultVmSizingPolicyId": {
                        "type": "string",
                        "deprecationMessage": "Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies"
                    },
                    "description": {
                        "type": "string"
                    },
                    "edgeClusterId": {
                        "type": "string"
                    },
                    "elasticity": {
                        "type": "boolean"
                    },
                    "enableFastProvisioning": {
                        "type": "boolean"
                    },
                    "enableThinProvisioning": {
                        "type": "boolean"
                    },
                    "enableVmDiscovery": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeVmMemoryOverhead": {
                        "type": "boolean"
                    },
                    "memoryGuaranteed": {
                        "type": "number"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgVdcMetadataEntry:getOrgVdcMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkPoolName": {
                        "type": "string"
                    },
                    "networkQuota": {
                        "type": "integer"
                    },
                    "nicQuota": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "providerVdcName": {
                        "type": "string"
                    },
                    "storageProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getOrgVdcStorageProfile:getOrgVdcStorageProfile"
                        }
                    },
                    "vmPlacementPolicyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vmQuota": {
                        "type": "integer"
                    },
                    "vmSizingPolicyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "allocationModel",
                    "allowOverCommit",
                    "computeCapacities",
                    "cpuGuaranteed",
                    "cpuSpeed",
                    "defaultComputePolicyId",
                    "defaultVmSizingPolicyId",
                    "description",
                    "edgeClusterId",
                    "elasticity",
                    "enableFastProvisioning",
                    "enableThinProvisioning",
                    "enableVmDiscovery",
                    "enabled",
                    "includeVmMemoryOverhead",
                    "memoryGuaranteed",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "networkPoolName",
                    "networkQuota",
                    "nicQuota",
                    "providerVdcName",
                    "storageProfiles",
                    "vmPlacementPolicyIds",
                    "vmQuota",
                    "vmSizingPolicyIds",
                    "id"
                ]
            }
        },
        "vcd:index/getPortgroup:getPortgroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getPortgroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPortgroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "vcd:index/getProviderVdc:getProviderVdc": {
            "inputs": {
                "description": "A collection of arguments for invoking getProviderVdc.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProviderVdc.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "computeCapacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getProviderVdcComputeCapacity:getProviderVdcComputeCapacity"
                        }
                    },
                    "computeProviderScope": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "externalNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "highestSupportedHardwareVersion": {
                        "type": "string"
                    },
                    "hostIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getProviderVdcMetadataEntry:getProviderVdcMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkPoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nsxtManagerId": {
                        "type": "string"
                    },
                    "resourcePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "integer"
                    },
                    "storageContainerIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "storageProfileIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "universalNetworkPoolId": {
                        "type": "string"
                    },
                    "vcenterId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "capabilities",
                    "computeCapacities",
                    "computeProviderScope",
                    "description",
                    "externalNetworkIds",
                    "highestSupportedHardwareVersion",
                    "hostIds",
                    "isEnabled",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "networkPoolIds",
                    "nsxtManagerId",
                    "resourcePoolIds",
                    "status",
                    "storageContainerIds",
                    "storageProfileIds",
                    "universalNetworkPoolId",
                    "vcenterId",
                    "id"
                ]
            }
        },
        "vcd:index/getResourceList:getResourceList": {
            "inputs": {
                "description": "A collection of arguments for invoking getResourceList.\n",
                "properties": {
                    "listMode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameIdSeparator": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "string"
                    },
                    "resourceType": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "resourceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getResourceList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "listMode": {
                        "type": "string"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameIdSeparator": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "string"
                    },
                    "resourceType": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "name",
                    "resourceType",
                    "id"
                ]
            }
        },
        "vcd:index/getResourceSchema:getResourceSchema": {
            "inputs": {
                "description": "A collection of arguments for invoking getResourceSchema.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "resourceType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "resourceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getResourceSchema.\n",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getResourceSchemaAttribute:getResourceSchemaAttribute"
                        }
                    },
                    "blockAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getResourceSchemaBlockAttribute:getResourceSchemaBlockAttribute"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resourceType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "attributes",
                    "blockAttributes",
                    "name",
                    "resourceType",
                    "id"
                ]
            }
        },
        "vcd:index/getRight:getRight": {
            "inputs": {
                "description": "A collection of arguments for invoking getRight.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRight.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string"
                    },
                    "categoryId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "impliedRights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getRightImpliedRight:getRightImpliedRight"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "rightType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bundleKey",
                    "categoryId",
                    "description",
                    "impliedRights",
                    "name",
                    "rightType",
                    "id"
                ]
            }
        },
        "vcd:index/getRightsBundle:getRightsBundle": {
            "inputs": {
                "description": "A collection of arguments for invoking getRightsBundle.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRightsBundle.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "publishToAllTenants": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "rights": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "bundleKey",
                    "description",
                    "name",
                    "publishToAllTenants",
                    "readOnly",
                    "rights",
                    "tenants",
                    "id"
                ]
            }
        },
        "vcd:index/getRole:getRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "bundleKey": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "rights": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "bundleKey",
                    "description",
                    "name",
                    "readOnly",
                    "rights",
                    "id"
                ]
            }
        },
        "vcd:index/getStorageProfile:getStorageProfile": {
            "inputs": {
                "description": "A collection of arguments for invoking getStorageProfile.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStorageProfile.\n",
                "properties": {
                    "default": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "iopsAllocated": {
                        "type": "integer"
                    },
                    "iopsSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getStorageProfileIopsSetting:getStorageProfileIopsSetting"
                        }
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getStorageProfileMetadataEntry:getStorageProfileMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "units": {
                        "type": "string"
                    },
                    "usedStorage": {
                        "type": "integer"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "default",
                    "enabled",
                    "iopsAllocated",
                    "iopsSettings",
                    "limit",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "units",
                    "usedStorage",
                    "id"
                ]
            }
        },
        "vcd:index/getSubscribedCatalog:getSubscribedCatalog": {
            "inputs": {
                "description": "A collection of arguments for invoking getSubscribedCatalog.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/vcd:index/getSubscribedCatalogFilter:getSubscribedCatalogFilter"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSubscribedCatalog.\n",
                "properties": {
                    "catalogVersion": {
                        "type": "integer"
                    },
                    "created": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "failedTasks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter": {
                        "$ref": "#/types/vcd:index/getSubscribedCatalogFilter:getSubscribedCatalogFilter"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isLocal": {
                        "type": "boolean"
                    },
                    "isPublished": {
                        "type": "boolean"
                    },
                    "isShared": {
                        "type": "boolean"
                    },
                    "makeLocalCopy": {
                        "type": "boolean"
                    },
                    "mediaItemLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "numberOfMedia": {
                        "type": "integer"
                    },
                    "numberOfVappTemplates": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "publishSubscriptionType": {
                        "type": "string"
                    },
                    "runningTasks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "storageProfileId": {
                        "type": "string"
                    },
                    "subscriptionUrl": {
                        "type": "string"
                    },
                    "vappTemplateLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "catalogVersion",
                    "created",
                    "description",
                    "failedTasks",
                    "href",
                    "isLocal",
                    "isPublished",
                    "isShared",
                    "makeLocalCopy",
                    "mediaItemLists",
                    "name",
                    "numberOfMedia",
                    "numberOfVappTemplates",
                    "ownerName",
                    "publishSubscriptionType",
                    "runningTasks",
                    "storageProfileId",
                    "subscriptionUrl",
                    "vappTemplateLists",
                    "id"
                ]
            }
        },
        "vcd:index/getTask:getTask": {
            "inputs": {
                "description": "A collection of arguments for invoking getTask.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTask.\n",
                "properties": {
                    "cancelRequested": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    },
                    "expiryTime": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "operation": {
                        "type": "string"
                    },
                    "operationName": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgName": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "ownerName": {
                        "type": "string"
                    },
                    "ownerType": {
                        "type": "string"
                    },
                    "progress": {
                        "type": "integer"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cancelRequested",
                    "description",
                    "endTime",
                    "error",
                    "expiryTime",
                    "href",
                    "id",
                    "name",
                    "operation",
                    "operationName",
                    "orgId",
                    "orgName",
                    "ownerId",
                    "ownerName",
                    "ownerType",
                    "progress",
                    "startTime",
                    "status",
                    "type",
                    "userId",
                    "userName"
                ]
            }
        },
        "vcd:index/getVapp:getVapp": {
            "inputs": {
                "description": "A collection of arguments for invoking getVapp.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVapp.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "guestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "leases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappLease:getVappLease"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappMetadataEntry:getVappMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "statusText": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "guestProperties",
                    "href",
                    "leases",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "status",
                    "statusText",
                    "id"
                ]
            }
        },
        "vcd:index/getVappNetwork:getVappNetwork": {
            "inputs": {
                "description": "A collection of arguments for invoking getVappNetwork.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "vappName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVappNetwork.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dhcpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappNetworkDhcpPool:getVappNetworkDhcpPool"
                        }
                    },
                    "dns1": {
                        "type": "string"
                    },
                    "dns2": {
                        "type": "string"
                    },
                    "dnsSuffix": {
                        "type": "string"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "guestVlanAllowed": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "orgNetworkName": {
                        "type": "string"
                    },
                    "retainIpMacEnabled": {
                        "type": "boolean"
                    },
                    "staticIpPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappNetworkStaticIpPool:getVappNetworkStaticIpPool"
                        }
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dhcpPools",
                    "dns1",
                    "dns2",
                    "dnsSuffix",
                    "gateway",
                    "guestVlanAllowed",
                    "name",
                    "netmask",
                    "orgNetworkName",
                    "retainIpMacEnabled",
                    "staticIpPools",
                    "vappName",
                    "id"
                ]
            }
        },
        "vcd:index/getVappOrgNetwork:getVappOrgNetwork": {
            "inputs": {
                "description": "A collection of arguments for invoking getVappOrgNetwork.\n",
                "properties": {
                    "org": {
                        "type": "string"
                    },
                    "orgNetworkName": {
                        "type": "string"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgNetworkName",
                    "vappName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVappOrgNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFenced": {
                        "type": "boolean"
                    },
                    "org": {
                        "type": "string"
                    },
                    "orgNetworkName": {
                        "type": "string"
                    },
                    "retainIpMacEnabled": {
                        "type": "boolean"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "isFenced",
                    "orgNetworkName",
                    "retainIpMacEnabled",
                    "vappName",
                    "id"
                ]
            }
        },
        "vcd:index/getVappVm:getVappVm": {
            "inputs": {
                "description": "A collection of arguments for invoking getVappVm.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "networkDhcpWaitSeconds": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "placementPolicyId": {
                        "type": "string"
                    },
                    "sizingPolicyId": {
                        "type": "string"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "vappName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVappVm.\n",
                "properties": {
                    "computerName": {
                        "type": "string"
                    },
                    "cpuCores": {
                        "type": "integer"
                    },
                    "cpuHotAddEnabled": {
                        "type": "boolean"
                    },
                    "cpuLimit": {
                        "type": "integer"
                    },
                    "cpuPriority": {
                        "type": "string"
                    },
                    "cpuReservation": {
                        "type": "integer"
                    },
                    "cpuShares": {
                        "type": "integer"
                    },
                    "cpus": {
                        "type": "integer"
                    },
                    "customizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappVmCustomization:getVappVmCustomization"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappVmDisk:getVappVmDisk"
                        }
                    },
                    "exposeHardwareVirtualization": {
                        "type": "boolean"
                    },
                    "guestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "hardwareVersion": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappVmInternalDisk:getVappVmInternalDisk"
                        }
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "memoryHotAddEnabled": {
                        "type": "boolean"
                    },
                    "memoryLimit": {
                        "type": "integer"
                    },
                    "memoryPriority": {
                        "type": "string"
                    },
                    "memoryReservation": {
                        "type": "integer"
                    },
                    "memoryShares": {
                        "type": "integer"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappVmMetadataEntry:getVappVmMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkDhcpWaitSeconds": {
                        "type": "integer"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVappVmNetwork:getVappVmNetwork"
                        }
                    },
                    "org": {
                        "type": "string"
                    },
                    "osType": {
                        "type": "string"
                    },
                    "placementPolicyId": {
                        "type": "string"
                    },
                    "sizingPolicyId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "statusText": {
                        "type": "string"
                    },
                    "storageProfile": {
                        "type": "string"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    },
                    "vmType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "computerName",
                    "cpuCores",
                    "cpuHotAddEnabled",
                    "cpuLimit",
                    "cpuPriority",
                    "cpuReservation",
                    "cpuShares",
                    "cpus",
                    "customizations",
                    "description",
                    "disks",
                    "exposeHardwareVirtualization",
                    "guestProperties",
                    "hardwareVersion",
                    "href",
                    "internalDisks",
                    "memory",
                    "memoryHotAddEnabled",
                    "memoryLimit",
                    "memoryPriority",
                    "memoryReservation",
                    "memoryShares",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "networks",
                    "osType",
                    "placementPolicyId",
                    "sizingPolicyId",
                    "status",
                    "statusText",
                    "storageProfile",
                    "vappName",
                    "vmType",
                    "id"
                ]
            }
        },
        "vcd:index/getVcenter:getVcenter": {
            "inputs": {
                "description": "A collection of arguments for invoking getVcenter.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVcenter.\n",
                "properties": {
                    "connectionStatus": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "vcenterHost": {
                        "type": "string"
                    },
                    "vcenterVersion": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectionStatus",
                    "isEnabled",
                    "name",
                    "status",
                    "vcenterHost",
                    "vcenterVersion",
                    "id"
                ]
            }
        },
        "vcd:index/getVdcGroup:getVdcGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getVdcGroup.\n",
                "properties": {
                    "defaultPolicyStatus": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "errorMessage": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "localEgress": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "networkPoolId": {
                        "type": "string"
                    },
                    "networkPoolUniversalId": {
                        "type": "string"
                    },
                    "networkProviderType": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "universalNetworkingEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVdcGroup.\n",
                "properties": {
                    "defaultPolicyStatus": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dfwEnabled": {
                        "type": "boolean"
                    },
                    "errorMessage": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "localEgress": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkPoolId": {
                        "type": "string"
                    },
                    "networkPoolUniversalId": {
                        "type": "string"
                    },
                    "networkProviderType": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "participatingOrgVdcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVdcGroupParticipatingOrgVdc:getVdcGroupParticipatingOrgVdc"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "universalNetworkingEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "defaultPolicyStatus",
                    "description",
                    "dfwEnabled",
                    "errorMessage",
                    "id",
                    "localEgress",
                    "name",
                    "networkPoolId",
                    "networkPoolUniversalId",
                    "networkProviderType",
                    "participatingOrgVdcs",
                    "status",
                    "type",
                    "universalNetworkingEnabled"
                ]
            }
        },
        "vcd:index/getVm:getVm": {
            "inputs": {
                "description": "A collection of arguments for invoking getVm.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "networkDhcpWaitSeconds": {
                        "type": "integer"
                    },
                    "org": {
                        "type": "string"
                    },
                    "placementPolicyId": {
                        "type": "string"
                    },
                    "sizingPolicyId": {
                        "type": "string"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVm.\n",
                "properties": {
                    "computerName": {
                        "type": "string"
                    },
                    "cpuCores": {
                        "type": "integer"
                    },
                    "cpuHotAddEnabled": {
                        "type": "boolean"
                    },
                    "cpuLimit": {
                        "type": "integer"
                    },
                    "cpuPriority": {
                        "type": "string"
                    },
                    "cpuReservation": {
                        "type": "integer"
                    },
                    "cpuShares": {
                        "type": "integer"
                    },
                    "cpus": {
                        "type": "integer"
                    },
                    "customizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmCustomization:getVmCustomization"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmDisk:getVmDisk"
                        }
                    },
                    "exposeHardwareVirtualization": {
                        "type": "boolean"
                    },
                    "guestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "hardwareVersion": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmInternalDisk:getVmInternalDisk"
                        }
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "memoryHotAddEnabled": {
                        "type": "boolean"
                    },
                    "memoryLimit": {
                        "type": "integer"
                    },
                    "memoryPriority": {
                        "type": "string"
                    },
                    "memoryReservation": {
                        "type": "integer"
                    },
                    "memoryShares": {
                        "type": "integer"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "deprecationMessage": "Use metadata_entry instead"
                    },
                    "metadataEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmMetadataEntry:getVmMetadataEntry"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkDhcpWaitSeconds": {
                        "type": "integer"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmNetwork:getVmNetwork"
                        }
                    },
                    "org": {
                        "type": "string"
                    },
                    "osType": {
                        "type": "string"
                    },
                    "placementPolicyId": {
                        "type": "string"
                    },
                    "sizingPolicyId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "statusText": {
                        "type": "string"
                    },
                    "storageProfile": {
                        "type": "string"
                    },
                    "vappName": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    },
                    "vmType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "computerName",
                    "cpuCores",
                    "cpuHotAddEnabled",
                    "cpuLimit",
                    "cpuPriority",
                    "cpuReservation",
                    "cpuShares",
                    "cpus",
                    "customizations",
                    "description",
                    "disks",
                    "exposeHardwareVirtualization",
                    "guestProperties",
                    "hardwareVersion",
                    "href",
                    "internalDisks",
                    "memory",
                    "memoryHotAddEnabled",
                    "memoryLimit",
                    "memoryPriority",
                    "memoryReservation",
                    "memoryShares",
                    "metadata",
                    "metadataEntries",
                    "name",
                    "networks",
                    "osType",
                    "placementPolicyId",
                    "sizingPolicyId",
                    "status",
                    "statusText",
                    "storageProfile",
                    "vappName",
                    "vmType",
                    "id"
                ]
            }
        },
        "vcd:index/getVmAffinityRule:getVmAffinityRule": {
            "inputs": {
                "description": "A collection of arguments for invoking getVmAffinityRule.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVmAffinityRule.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "polarity": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "vdc": {
                        "type": "string"
                    },
                    "vmIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "polarity",
                    "required",
                    "vmIds",
                    "id"
                ]
            }
        },
        "vcd:index/getVmGroup:getVmGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getVmGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "providerVdcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "providerVdcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVmGroup.\n",
                "properties": {
                    "clusterMoref": {
                        "type": "string"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namedVmGroupId": {
                        "type": "string"
                    },
                    "providerVdcId": {
                        "type": "string"
                    },
                    "vcenterId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterMoref",
                    "clusterName",
                    "name",
                    "namedVmGroupId",
                    "providerVdcId",
                    "vcenterId",
                    "id"
                ]
            }
        },
        "vcd:index/getVmPlacementPolicy:getVmPlacementPolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getVmPlacementPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "providerVdcId": {
                        "type": "string"
                    },
                    "vdcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVmPlacementPolicy.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logicalVmGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "providerVdcId": {
                        "type": "string"
                    },
                    "vdcId": {
                        "type": "string"
                    },
                    "vmGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "logicalVmGroupIds",
                    "name",
                    "vmGroupIds",
                    "id"
                ]
            }
        },
        "vcd:index/getVmSizingPolicy:getVmSizingPolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getVmSizingPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "deprecationMessage": "Unneeded property, which was included by mistake"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVmSizingPolicy.\n",
                "properties": {
                    "cpus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmSizingPolicyCpus:getVmSizingPolicyCpus"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vcd:index/getVmSizingPolicyMemory:getVmSizingPolicyMemory"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "deprecationMessage": "Unneeded property, which was included by mistake"
                    }
                },
                "type": "object",
                "required": [
                    "cpus",
                    "description",
                    "memories",
                    "name",
                    "id"
                ]
            }
        }
    }
}