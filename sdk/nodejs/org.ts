// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Org extends pulumi.CustomResource {
    /**
     * Get an existing Org resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgState, opts?: pulumi.CustomResourceOptions): Org {
        return new Org(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/org:Org';

    /**
     * Returns true if the given object is an instance of Org.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Org {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Org.__pulumiType;
    }

    /**
     * True if this organization is allowed to share catalogs.
     */
    public readonly canPublishCatalogs!: pulumi.Output<boolean | undefined>;
    /**
     * True if this organization is allowed to publish external catalogs.
     */
    public readonly canPublishExternalCatalogs!: pulumi.Output<boolean | undefined>;
    /**
     * True if this organization is allowed to subscribe to external catalogs.
     */
    public readonly canSubscribeExternalCatalogs!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies this organization's default for virtual machine boot delay after power on.
     */
    public readonly delayAfterPowerOnSeconds!: pulumi.Output<number | undefined>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
     * regardless of their state.
     */
    public readonly deleteForce!: pulumi.Output<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
     * normally allows removal.
     */
    public readonly deleteRecursive!: pulumi.Output<boolean>;
    /**
     * Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
     */
    public readonly deployedVmQuota!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fullName!: pulumi.Output<string>;
    /**
     * True if this organization is enabled (allows login and all other operations).
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Key value map of metadata to assign to this organization. Key and value can be any string.
     *
     * @deprecated Use metadata_entry instead
     */
    public readonly metadata!: pulumi.Output<{[key: string]: any}>;
    /**
     * Metadata entries for the given Organization
     */
    public readonly metadataEntries!: pulumi.Output<outputs.OrgMetadataEntry[]>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
     * this organization. (0 = unlimited)
     */
    public readonly storedVmQuota!: pulumi.Output<number | undefined>;
    /**
     * Defines lease parameters for vApps created in this organization
     */
    public readonly vappLease!: pulumi.Output<outputs.OrgVappLease>;
    /**
     * Defines lease parameters for vApp templates created in this organization
     */
    public readonly vappTemplateLease!: pulumi.Output<outputs.OrgVappTemplateLease>;

    /**
     * Create a Org resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgArgs | OrgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgState | undefined;
            resourceInputs["canPublishCatalogs"] = state ? state.canPublishCatalogs : undefined;
            resourceInputs["canPublishExternalCatalogs"] = state ? state.canPublishExternalCatalogs : undefined;
            resourceInputs["canSubscribeExternalCatalogs"] = state ? state.canSubscribeExternalCatalogs : undefined;
            resourceInputs["delayAfterPowerOnSeconds"] = state ? state.delayAfterPowerOnSeconds : undefined;
            resourceInputs["deleteForce"] = state ? state.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = state ? state.deleteRecursive : undefined;
            resourceInputs["deployedVmQuota"] = state ? state.deployedVmQuota : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storedVmQuota"] = state ? state.storedVmQuota : undefined;
            resourceInputs["vappLease"] = state ? state.vappLease : undefined;
            resourceInputs["vappTemplateLease"] = state ? state.vappTemplateLease : undefined;
        } else {
            const args = argsOrState as OrgArgs | undefined;
            if ((!args || args.deleteForce === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deleteForce'");
            }
            if ((!args || args.deleteRecursive === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deleteRecursive'");
            }
            if ((!args || args.fullName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fullName'");
            }
            resourceInputs["canPublishCatalogs"] = args ? args.canPublishCatalogs : undefined;
            resourceInputs["canPublishExternalCatalogs"] = args ? args.canPublishExternalCatalogs : undefined;
            resourceInputs["canSubscribeExternalCatalogs"] = args ? args.canSubscribeExternalCatalogs : undefined;
            resourceInputs["delayAfterPowerOnSeconds"] = args ? args.delayAfterPowerOnSeconds : undefined;
            resourceInputs["deleteForce"] = args ? args.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = args ? args.deleteRecursive : undefined;
            resourceInputs["deployedVmQuota"] = args ? args.deployedVmQuota : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storedVmQuota"] = args ? args.storedVmQuota : undefined;
            resourceInputs["vappLease"] = args ? args.vappLease : undefined;
            resourceInputs["vappTemplateLease"] = args ? args.vappTemplateLease : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Org.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Org resources.
 */
export interface OrgState {
    /**
     * True if this organization is allowed to share catalogs.
     */
    canPublishCatalogs?: pulumi.Input<boolean>;
    /**
     * True if this organization is allowed to publish external catalogs.
     */
    canPublishExternalCatalogs?: pulumi.Input<boolean>;
    /**
     * True if this organization is allowed to subscribe to external catalogs.
     */
    canSubscribeExternalCatalogs?: pulumi.Input<boolean>;
    /**
     * Specifies this organization's default for virtual machine boot delay after power on.
     */
    delayAfterPowerOnSeconds?: pulumi.Input<number>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
     * regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    /**
     * Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
     */
    deployedVmQuota?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    /**
     * True if this organization is enabled (allows login and all other operations).
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Key value map of metadata to assign to this organization. Key and value can be any string.
     *
     * @deprecated Use metadata_entry instead
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata entries for the given Organization
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.OrgMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
     * this organization. (0 = unlimited)
     */
    storedVmQuota?: pulumi.Input<number>;
    /**
     * Defines lease parameters for vApps created in this organization
     */
    vappLease?: pulumi.Input<inputs.OrgVappLease>;
    /**
     * Defines lease parameters for vApp templates created in this organization
     */
    vappTemplateLease?: pulumi.Input<inputs.OrgVappTemplateLease>;
}

/**
 * The set of arguments for constructing a Org resource.
 */
export interface OrgArgs {
    /**
     * True if this organization is allowed to share catalogs.
     */
    canPublishCatalogs?: pulumi.Input<boolean>;
    /**
     * True if this organization is allowed to publish external catalogs.
     */
    canPublishExternalCatalogs?: pulumi.Input<boolean>;
    /**
     * True if this organization is allowed to subscribe to external catalogs.
     */
    canSubscribeExternalCatalogs?: pulumi.Input<boolean>;
    /**
     * Specifies this organization's default for virtual machine boot delay after power on.
     */
    delayAfterPowerOnSeconds?: pulumi.Input<number>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
     * regardless of their state.
     */
    deleteForce: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive: pulumi.Input<boolean>;
    /**
     * Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
     */
    deployedVmQuota?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    fullName: pulumi.Input<string>;
    /**
     * True if this organization is enabled (allows login and all other operations).
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Key value map of metadata to assign to this organization. Key and value can be any string.
     *
     * @deprecated Use metadata_entry instead
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata entries for the given Organization
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.OrgMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
     * this organization. (0 = unlimited)
     */
    storedVmQuota?: pulumi.Input<number>;
    /**
     * Defines lease parameters for vApps created in this organization
     */
    vappLease?: pulumi.Input<inputs.OrgVappLease>;
    /**
     * Defines lease parameters for vApp templates created in this organization
     */
    vappTemplateLease?: pulumi.Input<inputs.OrgVappTemplateLease>;
}
