// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class CatalogVappTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CatalogVappTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogVappTemplateState, opts?: pulumi.CustomResourceOptions): CatalogVappTemplate {
        return new CatalogVappTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/catalogVappTemplate:CatalogVappTemplate';

    /**
     * Returns true if the given object is an instance of CatalogVappTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogVappTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogVappTemplate.__pulumiType;
    }

    /**
     * ID of the Catalog where to upload the OVA file
     */
    public readonly catalogId!: pulumi.Output<string>;
    /**
     * Timestamp of when the vApp Template was created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Key and value pairs for the metadata of this vApp Template
     *
     * @deprecated Use metadata_entry instead
     */
    public readonly metadata!: pulumi.Output<{[key: string]: any}>;
    /**
     * Metadata entries for the given vApp Template
     */
    public readonly metadataEntries!: pulumi.Output<outputs.CatalogVappTemplateMetadataEntry[]>;
    /**
     * vApp Template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Absolute or relative path to OVA
     */
    public readonly ovaPath!: pulumi.Output<string | undefined>;
    /**
     * URL of OVF file
     */
    public readonly ovfUrl!: pulumi.Output<string | undefined>;
    /**
     * Size of upload file piece size in megabytes
     */
    public readonly uploadPieceSize!: pulumi.Output<number | undefined>;
    /**
     * ID of the VDC to which the vApp Template belongs
     */
    public /*out*/ readonly vdcId!: pulumi.Output<string>;
    /**
     * Set of VM names within the vApp template
     */
    public /*out*/ readonly vmNames!: pulumi.Output<string[]>;

    /**
     * Create a CatalogVappTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogVappTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogVappTemplateArgs | CatalogVappTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogVappTemplateState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ovaPath"] = state ? state.ovaPath : undefined;
            resourceInputs["ovfUrl"] = state ? state.ovfUrl : undefined;
            resourceInputs["uploadPieceSize"] = state ? state.uploadPieceSize : undefined;
            resourceInputs["vdcId"] = state ? state.vdcId : undefined;
            resourceInputs["vmNames"] = state ? state.vmNames : undefined;
        } else {
            const args = argsOrState as CatalogVappTemplateArgs | undefined;
            if ((!args || args.catalogId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogId'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["ovaPath"] = args ? args.ovaPath : undefined;
            resourceInputs["ovfUrl"] = args ? args.ovfUrl : undefined;
            resourceInputs["uploadPieceSize"] = args ? args.uploadPieceSize : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["vdcId"] = undefined /*out*/;
            resourceInputs["vmNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogVappTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogVappTemplate resources.
 */
export interface CatalogVappTemplateState {
    /**
     * ID of the Catalog where to upload the OVA file
     */
    catalogId?: pulumi.Input<string>;
    /**
     * Timestamp of when the vApp Template was created
     */
    created?: pulumi.Input<string>;
    /**
     * Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
     */
    description?: pulumi.Input<string>;
    /**
     * Key and value pairs for the metadata of this vApp Template
     *
     * @deprecated Use metadata_entry instead
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata entries for the given vApp Template
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.CatalogVappTemplateMetadataEntry>[]>;
    /**
     * vApp Template name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Absolute or relative path to OVA
     */
    ovaPath?: pulumi.Input<string>;
    /**
     * URL of OVF file
     */
    ovfUrl?: pulumi.Input<string>;
    /**
     * Size of upload file piece size in megabytes
     */
    uploadPieceSize?: pulumi.Input<number>;
    /**
     * ID of the VDC to which the vApp Template belongs
     */
    vdcId?: pulumi.Input<string>;
    /**
     * Set of VM names within the vApp template
     */
    vmNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CatalogVappTemplate resource.
 */
export interface CatalogVappTemplateArgs {
    /**
     * ID of the Catalog where to upload the OVA file
     */
    catalogId: pulumi.Input<string>;
    /**
     * Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
     */
    description?: pulumi.Input<string>;
    /**
     * Key and value pairs for the metadata of this vApp Template
     *
     * @deprecated Use metadata_entry instead
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata entries for the given vApp Template
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.CatalogVappTemplateMetadataEntry>[]>;
    /**
     * vApp Template name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Absolute or relative path to OVA
     */
    ovaPath?: pulumi.Input<string>;
    /**
     * URL of OVF file
     */
    ovfUrl?: pulumi.Input<string>;
    /**
     * Size of upload file piece size in megabytes
     */
    uploadPieceSize?: pulumi.Input<number>;
}
