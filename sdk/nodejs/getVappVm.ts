// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getVappVm(args: GetVappVmArgs, opts?: pulumi.InvokeOptions): Promise<GetVappVmResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vcd:index/getVappVm:getVappVm", {
        "name": args.name,
        "networkDhcpWaitSeconds": args.networkDhcpWaitSeconds,
        "org": args.org,
        "placementPolicyId": args.placementPolicyId,
        "sizingPolicyId": args.sizingPolicyId,
        "vappName": args.vappName,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVappVm.
 */
export interface GetVappVmArgs {
    name: string;
    networkDhcpWaitSeconds?: number;
    org?: string;
    placementPolicyId?: string;
    sizingPolicyId?: string;
    vappName: string;
    vdc?: string;
}

/**
 * A collection of values returned by getVappVm.
 */
export interface GetVappVmResult {
    readonly computerName: string;
    readonly cpuCores: number;
    readonly cpuHotAddEnabled: boolean;
    readonly cpuLimit: number;
    readonly cpuPriority: string;
    readonly cpuReservation: number;
    readonly cpuShares: number;
    readonly cpus: number;
    readonly customizations: outputs.GetVappVmCustomization[];
    readonly description: string;
    readonly disks: outputs.GetVappVmDisk[];
    readonly exposeHardwareVirtualization: boolean;
    readonly guestProperties: {[key: string]: any};
    readonly hardwareVersion: string;
    readonly href: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly internalDisks: outputs.GetVappVmInternalDisk[];
    readonly memory: number;
    readonly memoryHotAddEnabled: boolean;
    readonly memoryLimit: number;
    readonly memoryPriority: string;
    readonly memoryReservation: number;
    readonly memoryShares: number;
    /**
     * @deprecated Use metadata_entry instead
     */
    readonly metadata: {[key: string]: any};
    readonly metadataEntries: outputs.GetVappVmMetadataEntry[];
    readonly name: string;
    readonly networkDhcpWaitSeconds?: number;
    readonly networks: outputs.GetVappVmNetwork[];
    readonly org?: string;
    readonly osType: string;
    readonly placementPolicyId: string;
    readonly sizingPolicyId: string;
    readonly status: number;
    readonly statusText: string;
    readonly storageProfile: string;
    readonly vappName: string;
    readonly vdc?: string;
    readonly vmType: string;
}

export function getVappVmOutput(args: GetVappVmOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVappVmResult> {
    return pulumi.output(args).apply(a => getVappVm(a, opts))
}

/**
 * A collection of arguments for invoking getVappVm.
 */
export interface GetVappVmOutputArgs {
    name: pulumi.Input<string>;
    networkDhcpWaitSeconds?: pulumi.Input<number>;
    org?: pulumi.Input<string>;
    placementPolicyId?: pulumi.Input<string>;
    sizingPolicyId?: pulumi.Input<string>;
    vappName: pulumi.Input<string>;
    vdc?: pulumi.Input<string>;
}
