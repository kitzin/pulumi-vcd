// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ExternalNetworkV2 extends pulumi.CustomResource {
    /**
     * Get an existing ExternalNetworkV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalNetworkV2State, opts?: pulumi.CustomResourceOptions): ExternalNetworkV2 {
        return new ExternalNetworkV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/externalNetworkV2:ExternalNetworkV2';

    /**
     * Returns true if the given object is an instance of ExternalNetworkV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalNetworkV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalNetworkV2.__pulumiType;
    }

    /**
     * Network description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A set of IP scopes for the network
     */
    public readonly ipScopes!: pulumi.Output<outputs.ExternalNetworkV2IpScope[]>;
    /**
     * Network name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Reference to NSX-T Tier-0 router or segment and manager
     */
    public readonly nsxtNetwork!: pulumi.Output<outputs.ExternalNetworkV2NsxtNetwork | undefined>;
    /**
     * A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
     * registered with the system.
     */
    public readonly vsphereNetworks!: pulumi.Output<outputs.ExternalNetworkV2VsphereNetwork[] | undefined>;

    /**
     * Create a ExternalNetworkV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalNetworkV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalNetworkV2Args | ExternalNetworkV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalNetworkV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipScopes"] = state ? state.ipScopes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxtNetwork"] = state ? state.nsxtNetwork : undefined;
            resourceInputs["vsphereNetworks"] = state ? state.vsphereNetworks : undefined;
        } else {
            const args = argsOrState as ExternalNetworkV2Args | undefined;
            if ((!args || args.ipScopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipScopes'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipScopes"] = args ? args.ipScopes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxtNetwork"] = args ? args.nsxtNetwork : undefined;
            resourceInputs["vsphereNetworks"] = args ? args.vsphereNetworks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalNetworkV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalNetworkV2 resources.
 */
export interface ExternalNetworkV2State {
    /**
     * Network description
     */
    description?: pulumi.Input<string>;
    /**
     * A set of IP scopes for the network
     */
    ipScopes?: pulumi.Input<pulumi.Input<inputs.ExternalNetworkV2IpScope>[]>;
    /**
     * Network name
     */
    name?: pulumi.Input<string>;
    /**
     * Reference to NSX-T Tier-0 router or segment and manager
     */
    nsxtNetwork?: pulumi.Input<inputs.ExternalNetworkV2NsxtNetwork>;
    /**
     * A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
     * registered with the system.
     */
    vsphereNetworks?: pulumi.Input<pulumi.Input<inputs.ExternalNetworkV2VsphereNetwork>[]>;
}

/**
 * The set of arguments for constructing a ExternalNetworkV2 resource.
 */
export interface ExternalNetworkV2Args {
    /**
     * Network description
     */
    description?: pulumi.Input<string>;
    /**
     * A set of IP scopes for the network
     */
    ipScopes: pulumi.Input<pulumi.Input<inputs.ExternalNetworkV2IpScope>[]>;
    /**
     * Network name
     */
    name?: pulumi.Input<string>;
    /**
     * Reference to NSX-T Tier-0 router or segment and manager
     */
    nsxtNetwork?: pulumi.Input<inputs.ExternalNetworkV2NsxtNetwork>;
    /**
     * A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
     * registered with the system.
     */
    vsphereNetworks?: pulumi.Input<pulumi.Input<inputs.ExternalNetworkV2VsphereNetwork>[]>;
}
