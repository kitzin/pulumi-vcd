// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNetworkIsolated
    {
        public static Task<GetNetworkIsolatedResult> InvokeAsync(GetNetworkIsolatedArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkIsolatedResult>("vcd:index/getNetworkIsolated:getNetworkIsolated", args ?? new GetNetworkIsolatedArgs(), options.WithDefaults());

        public static Output<GetNetworkIsolatedResult> Invoke(GetNetworkIsolatedInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkIsolatedResult>("vcd:index/getNetworkIsolated:getNetworkIsolated", args ?? new GetNetworkIsolatedInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkIsolatedArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetNetworkIsolatedFilterArgs? Filter { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNetworkIsolatedArgs()
        {
        }
        public static new GetNetworkIsolatedArgs Empty => new GetNetworkIsolatedArgs();
    }

    public sealed class GetNetworkIsolatedInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetNetworkIsolatedFilterInputArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNetworkIsolatedInvokeArgs()
        {
        }
        public static new GetNetworkIsolatedInvokeArgs Empty => new GetNetworkIsolatedInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkIsolatedResult
    {
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNetworkIsolatedDhcpPoolResult> DhcpPools;
        public readonly string Dns1;
        public readonly string Dns2;
        public readonly string DnsSuffix;
        public readonly Outputs.GetNetworkIsolatedFilterResult? Filter;
        public readonly string Gateway;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Metadata;
        public readonly ImmutableArray<Outputs.GetNetworkIsolatedMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string Netmask;
        public readonly string? Org;
        public readonly bool Shared;
        public readonly ImmutableArray<Outputs.GetNetworkIsolatedStaticIpPoolResult> StaticIpPools;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNetworkIsolatedResult(
            string description,

            ImmutableArray<Outputs.GetNetworkIsolatedDhcpPoolResult> dhcpPools,

            string dns1,

            string dns2,

            string dnsSuffix,

            Outputs.GetNetworkIsolatedFilterResult? filter,

            string gateway,

            string href,

            string id,

            ImmutableDictionary<string, object> metadata,

            ImmutableArray<Outputs.GetNetworkIsolatedMetadataEntryResult> metadataEntries,

            string? name,

            string netmask,

            string? org,

            bool shared,

            ImmutableArray<Outputs.GetNetworkIsolatedStaticIpPoolResult> staticIpPools,

            string? vdc)
        {
            Description = description;
            DhcpPools = dhcpPools;
            Dns1 = dns1;
            Dns2 = dns2;
            DnsSuffix = dnsSuffix;
            Filter = filter;
            Gateway = gateway;
            Href = href;
            Id = id;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Netmask = netmask;
            Org = org;
            Shared = shared;
            StaticIpPools = staticIpPools;
            Vdc = vdc;
        }
    }
}
