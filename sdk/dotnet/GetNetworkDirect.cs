// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNetworkDirect
    {
        public static Task<GetNetworkDirectResult> InvokeAsync(GetNetworkDirectArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkDirectResult>("vcd:index/getNetworkDirect:getNetworkDirect", args ?? new GetNetworkDirectArgs(), options.WithDefaults());

        public static Output<GetNetworkDirectResult> Invoke(GetNetworkDirectInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkDirectResult>("vcd:index/getNetworkDirect:getNetworkDirect", args ?? new GetNetworkDirectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkDirectArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetNetworkDirectFilterArgs? Filter { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNetworkDirectArgs()
        {
        }
        public static new GetNetworkDirectArgs Empty => new GetNetworkDirectArgs();
    }

    public sealed class GetNetworkDirectInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetNetworkDirectFilterInputArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNetworkDirectInvokeArgs()
        {
        }
        public static new GetNetworkDirectInvokeArgs Empty => new GetNetworkDirectInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkDirectResult
    {
        public readonly string Description;
        public readonly string ExternalNetwork;
        public readonly string ExternalNetworkDns1;
        public readonly string ExternalNetworkDns2;
        public readonly string ExternalNetworkDnsSuffix;
        public readonly string ExternalNetworkGateway;
        public readonly string ExternalNetworkNetmask;
        public readonly Outputs.GetNetworkDirectFilterResult? Filter;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Metadata;
        public readonly ImmutableArray<Outputs.GetNetworkDirectMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string? Org;
        public readonly bool Shared;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNetworkDirectResult(
            string description,

            string externalNetwork,

            string externalNetworkDns1,

            string externalNetworkDns2,

            string externalNetworkDnsSuffix,

            string externalNetworkGateway,

            string externalNetworkNetmask,

            Outputs.GetNetworkDirectFilterResult? filter,

            string href,

            string id,

            ImmutableDictionary<string, object> metadata,

            ImmutableArray<Outputs.GetNetworkDirectMetadataEntryResult> metadataEntries,

            string? name,

            string? org,

            bool shared,

            string? vdc)
        {
            Description = description;
            ExternalNetwork = externalNetwork;
            ExternalNetworkDns1 = externalNetworkDns1;
            ExternalNetworkDns2 = externalNetworkDns2;
            ExternalNetworkDnsSuffix = externalNetworkDnsSuffix;
            ExternalNetworkGateway = externalNetworkGateway;
            ExternalNetworkNetmask = externalNetworkNetmask;
            Filter = filter;
            Href = href;
            Id = id;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            Shared = shared;
            Vdc = vdc;
        }
    }
}
