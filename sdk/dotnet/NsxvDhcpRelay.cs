// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxvDhcpRelay:NsxvDhcpRelay")]
    public partial class NsxvDhcpRelay : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of IP domain names of DHCP servers
        /// </summary>
        [Output("domainNames")]
        public Output<ImmutableArray<string>> DomainNames { get; private set; } = null!;

        /// <summary>
        /// Edge gateway name for DHCP relay settings
        /// </summary>
        [Output("edgeGateway")]
        public Output<string> EdgeGateway { get; private set; } = null!;

        /// <summary>
        /// A set of IP address of DHCP servers
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// A set of IP set names which consist DHCP servers
        /// </summary>
        [Output("ipSets")]
        public Output<ImmutableArray<string>> IpSets { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        [Output("relayAgents")]
        public Output<ImmutableArray<Outputs.NsxvDhcpRelayRelayAgent>> RelayAgents { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a NsxvDhcpRelay resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxvDhcpRelay(string name, NsxvDhcpRelayArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxvDhcpRelay:NsxvDhcpRelay", name, args ?? new NsxvDhcpRelayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NsxvDhcpRelay(string name, Input<string> id, NsxvDhcpRelayState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxvDhcpRelay:NsxvDhcpRelay", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxvDhcpRelay resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxvDhcpRelay Get(string name, Input<string> id, NsxvDhcpRelayState? state = null, CustomResourceOptions? options = null)
        {
            return new NsxvDhcpRelay(name, id, state, options);
        }
    }

    public sealed class NsxvDhcpRelayArgs : global::Pulumi.ResourceArgs
    {
        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// A set of IP domain names of DHCP servers
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// Edge gateway name for DHCP relay settings
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// A set of IP address of DHCP servers
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("ipSets")]
        private InputList<string>? _ipSets;

        /// <summary>
        /// A set of IP set names which consist DHCP servers
        /// </summary>
        public InputList<string> IpSets
        {
            get => _ipSets ?? (_ipSets = new InputList<string>());
            set => _ipSets = value;
        }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("relayAgents", required: true)]
        private InputList<Inputs.NsxvDhcpRelayRelayAgentArgs>? _relayAgents;
        public InputList<Inputs.NsxvDhcpRelayRelayAgentArgs> RelayAgents
        {
            get => _relayAgents ?? (_relayAgents = new InputList<Inputs.NsxvDhcpRelayRelayAgentArgs>());
            set => _relayAgents = value;
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxvDhcpRelayArgs()
        {
        }
        public static new NsxvDhcpRelayArgs Empty => new NsxvDhcpRelayArgs();
    }

    public sealed class NsxvDhcpRelayState : global::Pulumi.ResourceArgs
    {
        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// A set of IP domain names of DHCP servers
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// Edge gateway name for DHCP relay settings
        /// </summary>
        [Input("edgeGateway")]
        public Input<string>? EdgeGateway { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// A set of IP address of DHCP servers
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("ipSets")]
        private InputList<string>? _ipSets;

        /// <summary>
        /// A set of IP set names which consist DHCP servers
        /// </summary>
        public InputList<string> IpSets
        {
            get => _ipSets ?? (_ipSets = new InputList<string>());
            set => _ipSets = value;
        }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("relayAgents")]
        private InputList<Inputs.NsxvDhcpRelayRelayAgentGetArgs>? _relayAgents;
        public InputList<Inputs.NsxvDhcpRelayRelayAgentGetArgs> RelayAgents
        {
            get => _relayAgents ?? (_relayAgents = new InputList<Inputs.NsxvDhcpRelayRelayAgentGetArgs>());
            set => _relayAgents = value;
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxvDhcpRelayState()
        {
        }
        public static new NsxvDhcpRelayState Empty => new NsxvDhcpRelayState();
    }
}
