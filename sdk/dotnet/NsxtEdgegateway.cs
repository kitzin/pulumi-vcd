// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxtEdgegateway:NsxtEdgegateway")]
    public partial class NsxtEdgegateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        /// </summary>
        [Output("dedicateExternalNetwork")]
        public Output<bool?> DedicateExternalNetwork { get; private set; } = null!;

        /// <summary>
        /// Edge Gateway description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        /// </summary>
        [Output("edgeClusterId")]
        public Output<string> EdgeClusterId { get; private set; } = null!;

        /// <summary>
        /// External network ID
        /// </summary>
        [Output("externalNetworkId")]
        public Output<string> ExternalNetworkId { get; private set; } = null!;

        /// <summary>
        /// Edge Gateway name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// ID of VDC or VDC Group
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
        /// </summary>
        [Output("primaryIp")]
        public Output<string> PrimaryIp { get; private set; } = null!;

        /// <summary>
        /// Optional ID of starting VDC if the 'owner_id' is a VDC Group
        /// </summary>
        [Output("startingVdcId")]
        public Output<string?> StartingVdcId { get; private set; } = null!;

        /// <summary>
        /// One or more blocks with external network information to be attached to this gateway's interface
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<Outputs.NsxtEdgegatewaySubnet>> Subnets { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a NsxtEdgegateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxtEdgegateway(string name, NsxtEdgegatewayArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegateway:NsxtEdgegateway", name, args ?? new NsxtEdgegatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NsxtEdgegateway(string name, Input<string> id, NsxtEdgegatewayState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegateway:NsxtEdgegateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxtEdgegateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxtEdgegateway Get(string name, Input<string> id, NsxtEdgegatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new NsxtEdgegateway(name, id, state, options);
        }
    }

    public sealed class NsxtEdgegatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        /// </summary>
        [Input("dedicateExternalNetwork")]
        public Input<bool>? DedicateExternalNetwork { get; set; }

        /// <summary>
        /// Edge Gateway description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        /// </summary>
        [Input("edgeClusterId")]
        public Input<string>? EdgeClusterId { get; set; }

        /// <summary>
        /// External network ID
        /// </summary>
        [Input("externalNetworkId", required: true)]
        public Input<string> ExternalNetworkId { get; set; } = null!;

        /// <summary>
        /// Edge Gateway name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// ID of VDC or VDC Group
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// Optional ID of starting VDC if the 'owner_id' is a VDC Group
        /// </summary>
        [Input("startingVdcId")]
        public Input<string>? StartingVdcId { get; set; }

        [Input("subnets", required: true)]
        private InputList<Inputs.NsxtEdgegatewaySubnetArgs>? _subnets;

        /// <summary>
        /// One or more blocks with external network information to be attached to this gateway's interface
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.NsxtEdgegatewaySubnetArgs>());
            set => _subnets = value;
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxtEdgegatewayArgs()
        {
        }
        public static new NsxtEdgegatewayArgs Empty => new NsxtEdgegatewayArgs();
    }

    public sealed class NsxtEdgegatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        /// </summary>
        [Input("dedicateExternalNetwork")]
        public Input<bool>? DedicateExternalNetwork { get; set; }

        /// <summary>
        /// Edge Gateway description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        /// </summary>
        [Input("edgeClusterId")]
        public Input<string>? EdgeClusterId { get; set; }

        /// <summary>
        /// External network ID
        /// </summary>
        [Input("externalNetworkId")]
        public Input<string>? ExternalNetworkId { get; set; }

        /// <summary>
        /// Edge Gateway name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// ID of VDC or VDC Group
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
        /// </summary>
        [Input("primaryIp")]
        public Input<string>? PrimaryIp { get; set; }

        /// <summary>
        /// Optional ID of starting VDC if the 'owner_id' is a VDC Group
        /// </summary>
        [Input("startingVdcId")]
        public Input<string>? StartingVdcId { get; set; }

        [Input("subnets")]
        private InputList<Inputs.NsxtEdgegatewaySubnetGetArgs>? _subnets;

        /// <summary>
        /// One or more blocks with external network information to be attached to this gateway's interface
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetGetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.NsxtEdgegatewaySubnetGetArgs>());
            set => _subnets = value;
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxtEdgegatewayState()
        {
        }
        public static new NsxtEdgegatewayState Empty => new NsxtEdgegatewayState();
    }
}
