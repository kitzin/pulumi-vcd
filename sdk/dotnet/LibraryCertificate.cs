// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/libraryCertificate:LibraryCertificate")]
    public partial class LibraryCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Alias of certificate
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// Certificate content
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// Certificate description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Certificate private key
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Certificate private pass phrase
        /// </summary>
        [Output("privateKeyPassphrase")]
        public Output<string?> PrivateKeyPassphrase { get; private set; } = null!;


        /// <summary>
        /// Create a LibraryCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LibraryCertificate(string name, LibraryCertificateArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/libraryCertificate:LibraryCertificate", name, args ?? new LibraryCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LibraryCertificate(string name, Input<string> id, LibraryCertificateState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/libraryCertificate:LibraryCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LibraryCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LibraryCertificate Get(string name, Input<string> id, LibraryCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new LibraryCertificate(name, id, state, options);
        }
    }

    public sealed class LibraryCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alias of certificate
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// Certificate content
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// Certificate description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Certificate private key
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Certificate private pass phrase
        /// </summary>
        [Input("privateKeyPassphrase")]
        public Input<string>? PrivateKeyPassphrase { get; set; }

        public LibraryCertificateArgs()
        {
        }
        public static new LibraryCertificateArgs Empty => new LibraryCertificateArgs();
    }

    public sealed class LibraryCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alias of certificate
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Certificate content
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Certificate description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Certificate private key
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Certificate private pass phrase
        /// </summary>
        [Input("privateKeyPassphrase")]
        public Input<string>? PrivateKeyPassphrase { get; set; }

        public LibraryCertificateState()
        {
        }
        public static new LibraryCertificateState Empty => new LibraryCertificateState();
    }
}
