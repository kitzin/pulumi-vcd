// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/lbServiceMonitor:LbServiceMonitor")]
    public partial class LbServiceMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Edge gateway name in which the LB Service Monitor is located
        /// </summary>
        [Output("edgeGateway")]
        public Output<string> EdgeGateway { get; private set; } = null!;

        /// <summary>
        /// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
        /// </summary>
        [Output("expected")]
        public Output<string?> Expected { get; private set; } = null!;

        /// <summary>
        /// Advanced monitor parameters as key=value pairs
        /// </summary>
        [Output("extension")]
        public Output<ImmutableDictionary<string, object>?> Extension { get; private set; } = null!;

        /// <summary>
        /// Interval in seconds at which a server is to be monitored (defaults to 10)
        /// </summary>
        [Output("interval")]
        public Output<int?> Interval { get; private set; } = null!;

        /// <summary>
        /// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
        /// 3)
        /// </summary>
        [Output("maxRetries")]
        public Output<int?> MaxRetries { get; private set; } = null!;

        /// <summary>
        /// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        /// </summary>
        [Output("method")]
        public Output<string?> Method { get; private set; } = null!;

        /// <summary>
        /// Unique LB Service Monitor name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// String to be matched in the response content
        /// </summary>
        [Output("receive")]
        public Output<string?> Receive { get; private set; } = null!;

        /// <summary>
        /// Data to be sent
        /// </summary>
        [Output("send")]
        public Output<string?> Send { get; private set; } = null!;

        /// <summary>
        /// Maximum time in seconds within which a response from the server must be received (defaults to 15)
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// URL to be used in the server status request
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a LbServiceMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LbServiceMonitor(string name, LbServiceMonitorArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/lbServiceMonitor:LbServiceMonitor", name, args ?? new LbServiceMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LbServiceMonitor(string name, Input<string> id, LbServiceMonitorState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/lbServiceMonitor:LbServiceMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LbServiceMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LbServiceMonitor Get(string name, Input<string> id, LbServiceMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new LbServiceMonitor(name, id, state, options);
        }
    }

    public sealed class LbServiceMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Edge gateway name in which the LB Service Monitor is located
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        /// <summary>
        /// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
        /// </summary>
        [Input("expected")]
        public Input<string>? Expected { get; set; }

        [Input("extension")]
        private InputMap<object>? _extension;

        /// <summary>
        /// Advanced monitor parameters as key=value pairs
        /// </summary>
        public InputMap<object> Extension
        {
            get => _extension ?? (_extension = new InputMap<object>());
            set => _extension = value;
        }

        /// <summary>
        /// Interval in seconds at which a server is to be monitored (defaults to 10)
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
        /// 3)
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Unique LB Service Monitor name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// String to be matched in the response content
        /// </summary>
        [Input("receive")]
        public Input<string>? Receive { get; set; }

        /// <summary>
        /// Data to be sent
        /// </summary>
        [Input("send")]
        public Input<string>? Send { get; set; }

        /// <summary>
        /// Maximum time in seconds within which a response from the server must be received (defaults to 15)
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// URL to be used in the server status request
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public LbServiceMonitorArgs()
        {
        }
        public static new LbServiceMonitorArgs Empty => new LbServiceMonitorArgs();
    }

    public sealed class LbServiceMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Edge gateway name in which the LB Service Monitor is located
        /// </summary>
        [Input("edgeGateway")]
        public Input<string>? EdgeGateway { get; set; }

        /// <summary>
        /// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
        /// </summary>
        [Input("expected")]
        public Input<string>? Expected { get; set; }

        [Input("extension")]
        private InputMap<object>? _extension;

        /// <summary>
        /// Advanced monitor parameters as key=value pairs
        /// </summary>
        public InputMap<object> Extension
        {
            get => _extension ?? (_extension = new InputMap<object>());
            set => _extension = value;
        }

        /// <summary>
        /// Interval in seconds at which a server is to be monitored (defaults to 10)
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
        /// 3)
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Unique LB Service Monitor name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// String to be matched in the response content
        /// </summary>
        [Input("receive")]
        public Input<string>? Receive { get; set; }

        /// <summary>
        /// Data to be sent
        /// </summary>
        [Input("send")]
        public Input<string>? Send { get; set; }

        /// <summary>
        /// Maximum time in seconds within which a response from the server must be received (defaults to 15)
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// URL to be used in the server status request
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public LbServiceMonitorState()
        {
        }
        public static new LbServiceMonitorState Empty => new LbServiceMonitorState();
    }
}
