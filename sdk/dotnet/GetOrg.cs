// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetOrg
    {
        public static Task<GetOrgResult> InvokeAsync(GetOrgArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOrgResult>("vcd:index/getOrg:getOrg", args ?? new GetOrgArgs(), options.WithDefaults());

        public static Output<GetOrgResult> Invoke(GetOrgInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetOrgResult>("vcd:index/getOrg:getOrg", args ?? new GetOrgInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrgArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetOrgArgs()
        {
        }
        public static new GetOrgArgs Empty => new GetOrgArgs();
    }

    public sealed class GetOrgInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetOrgInvokeArgs()
        {
        }
        public static new GetOrgInvokeArgs Empty => new GetOrgInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrgResult
    {
        public readonly bool CanPublishCatalogs;
        public readonly bool CanPublishExternalCatalogs;
        public readonly bool CanSubscribeExternalCatalogs;
        public readonly int DelayAfterPowerOnSeconds;
        public readonly int DeployedVmQuota;
        public readonly string Description;
        public readonly string FullName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsEnabled;
        public readonly ImmutableDictionary<string, object> Metadata;
        public readonly ImmutableArray<Outputs.GetOrgMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        public readonly int StoredVmQuota;
        public readonly ImmutableArray<Outputs.GetOrgVappLeaseResult> VappLeases;
        public readonly ImmutableArray<Outputs.GetOrgVappTemplateLeaseResult> VappTemplateLeases;

        [OutputConstructor]
        private GetOrgResult(
            bool canPublishCatalogs,

            bool canPublishExternalCatalogs,

            bool canSubscribeExternalCatalogs,

            int delayAfterPowerOnSeconds,

            int deployedVmQuota,

            string description,

            string fullName,

            string id,

            bool isEnabled,

            ImmutableDictionary<string, object> metadata,

            ImmutableArray<Outputs.GetOrgMetadataEntryResult> metadataEntries,

            string name,

            int storedVmQuota,

            ImmutableArray<Outputs.GetOrgVappLeaseResult> vappLeases,

            ImmutableArray<Outputs.GetOrgVappTemplateLeaseResult> vappTemplateLeases)
        {
            CanPublishCatalogs = canPublishCatalogs;
            CanPublishExternalCatalogs = canPublishExternalCatalogs;
            CanSubscribeExternalCatalogs = canSubscribeExternalCatalogs;
            DelayAfterPowerOnSeconds = delayAfterPowerOnSeconds;
            DeployedVmQuota = deployedVmQuota;
            Description = description;
            FullName = fullName;
            Id = id;
            IsEnabled = isEnabled;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            StoredVmQuota = storedVmQuota;
            VappLeases = vappLeases;
            VappTemplateLeases = vappTemplateLeases;
        }
    }
}
