// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/edgeGatewayVpn:EdgeGatewayVpn")]
    public partial class EdgeGatewayVpn : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("edgeGateway")]
        public Output<string> EdgeGateway { get; private set; } = null!;

        [Output("encryptionProtocol")]
        public Output<string> EncryptionProtocol { get; private set; } = null!;

        [Output("localId")]
        public Output<string> LocalId { get; private set; } = null!;

        [Output("localIpAddress")]
        public Output<string> LocalIpAddress { get; private set; } = null!;

        [Output("localSubnets")]
        public Output<ImmutableArray<Outputs.EdgeGatewayVpnLocalSubnet>> LocalSubnets { get; private set; } = null!;

        [Output("mtu")]
        public Output<int> Mtu { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        [Output("peerId")]
        public Output<string> PeerId { get; private set; } = null!;

        [Output("peerIpAddress")]
        public Output<string> PeerIpAddress { get; private set; } = null!;

        [Output("peerSubnets")]
        public Output<ImmutableArray<Outputs.EdgeGatewayVpnPeerSubnet>> PeerSubnets { get; private set; } = null!;

        [Output("sharedSecret")]
        public Output<string> SharedSecret { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeGatewayVpn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeGatewayVpn(string name, EdgeGatewayVpnArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/edgeGatewayVpn:EdgeGatewayVpn", name, args ?? new EdgeGatewayVpnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeGatewayVpn(string name, Input<string> id, EdgeGatewayVpnState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/edgeGatewayVpn:EdgeGatewayVpn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeGatewayVpn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeGatewayVpn Get(string name, Input<string> id, EdgeGatewayVpnState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeGatewayVpn(name, id, state, options);
        }
    }

    public sealed class EdgeGatewayVpnArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        [Input("encryptionProtocol", required: true)]
        public Input<string> EncryptionProtocol { get; set; } = null!;

        [Input("localId", required: true)]
        public Input<string> LocalId { get; set; } = null!;

        [Input("localIpAddress", required: true)]
        public Input<string> LocalIpAddress { get; set; } = null!;

        [Input("localSubnets")]
        private InputList<Inputs.EdgeGatewayVpnLocalSubnetArgs>? _localSubnets;
        public InputList<Inputs.EdgeGatewayVpnLocalSubnetArgs> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<Inputs.EdgeGatewayVpnLocalSubnetArgs>());
            set => _localSubnets = value;
        }

        [Input("mtu", required: true)]
        public Input<int> Mtu { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("peerId", required: true)]
        public Input<string> PeerId { get; set; } = null!;

        [Input("peerIpAddress", required: true)]
        public Input<string> PeerIpAddress { get; set; } = null!;

        [Input("peerSubnets")]
        private InputList<Inputs.EdgeGatewayVpnPeerSubnetArgs>? _peerSubnets;
        public InputList<Inputs.EdgeGatewayVpnPeerSubnetArgs> PeerSubnets
        {
            get => _peerSubnets ?? (_peerSubnets = new InputList<Inputs.EdgeGatewayVpnPeerSubnetArgs>());
            set => _peerSubnets = value;
        }

        [Input("sharedSecret", required: true)]
        public Input<string> SharedSecret { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public EdgeGatewayVpnArgs()
        {
        }
        public static new EdgeGatewayVpnArgs Empty => new EdgeGatewayVpnArgs();
    }

    public sealed class EdgeGatewayVpnState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("edgeGateway")]
        public Input<string>? EdgeGateway { get; set; }

        [Input("encryptionProtocol")]
        public Input<string>? EncryptionProtocol { get; set; }

        [Input("localId")]
        public Input<string>? LocalId { get; set; }

        [Input("localIpAddress")]
        public Input<string>? LocalIpAddress { get; set; }

        [Input("localSubnets")]
        private InputList<Inputs.EdgeGatewayVpnLocalSubnetGetArgs>? _localSubnets;
        public InputList<Inputs.EdgeGatewayVpnLocalSubnetGetArgs> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<Inputs.EdgeGatewayVpnLocalSubnetGetArgs>());
            set => _localSubnets = value;
        }

        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("peerId")]
        public Input<string>? PeerId { get; set; }

        [Input("peerIpAddress")]
        public Input<string>? PeerIpAddress { get; set; }

        [Input("peerSubnets")]
        private InputList<Inputs.EdgeGatewayVpnPeerSubnetGetArgs>? _peerSubnets;
        public InputList<Inputs.EdgeGatewayVpnPeerSubnetGetArgs> PeerSubnets
        {
            get => _peerSubnets ?? (_peerSubnets = new InputList<Inputs.EdgeGatewayVpnPeerSubnetGetArgs>());
            set => _peerSubnets = value;
        }

        [Input("sharedSecret")]
        public Input<string>? SharedSecret { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public EdgeGatewayVpnState()
        {
        }
        public static new EdgeGatewayVpnState Empty => new EdgeGatewayVpnState();
    }
}
