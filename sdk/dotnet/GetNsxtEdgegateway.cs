// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtEdgegateway
    {
        public static Task<GetNsxtEdgegatewayResult> InvokeAsync(GetNsxtEdgegatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNsxtEdgegatewayResult>("vcd:index/getNsxtEdgegateway:getNsxtEdgegateway", args ?? new GetNsxtEdgegatewayArgs(), options.WithDefaults());

        public static Output<GetNsxtEdgegatewayResult> Invoke(GetNsxtEdgegatewayInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayResult>("vcd:index/getNsxtEdgegateway:getNsxtEdgegateway", args ?? new GetNsxtEdgegatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtEdgegatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("edgeClusterId")]
        public string? EdgeClusterId { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("org")]
        public string? Org { get; set; }

        [Input("ownerId")]
        public string? OwnerId { get; set; }

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxtEdgegatewayArgs()
        {
        }
        public static new GetNsxtEdgegatewayArgs Empty => new GetNsxtEdgegatewayArgs();
    }

    public sealed class GetNsxtEdgegatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("edgeClusterId")]
        public Input<string>? EdgeClusterId { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxtEdgegatewayInvokeArgs()
        {
        }
        public static new GetNsxtEdgegatewayInvokeArgs Empty => new GetNsxtEdgegatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtEdgegatewayResult
    {
        public readonly bool DedicateExternalNetwork;
        public readonly string Description;
        public readonly string? EdgeClusterId;
        public readonly string ExternalNetworkId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Org;
        public readonly string OwnerId;
        public readonly string PrimaryIp;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetResult> Subnets;
        public readonly string Vdc;

        [OutputConstructor]
        private GetNsxtEdgegatewayResult(
            bool dedicateExternalNetwork,

            string description,

            string? edgeClusterId,

            string externalNetworkId,

            string id,

            string name,

            string? org,

            string ownerId,

            string primaryIp,

            ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetResult> subnets,

            string vdc)
        {
            DedicateExternalNetwork = dedicateExternalNetwork;
            Description = description;
            EdgeClusterId = edgeClusterId;
            ExternalNetworkId = externalNetworkId;
            Id = id;
            Name = name;
            Org = org;
            OwnerId = ownerId;
            PrimaryIp = primaryIp;
            Subnets = subnets;
            Vdc = vdc;
        }
    }
}
