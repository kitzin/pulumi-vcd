// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVappVm
    {
        public static Task<GetVappVmResult> InvokeAsync(GetVappVmArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVappVmResult>("vcd:index/getVappVm:getVappVm", args ?? new GetVappVmArgs(), options.WithDefaults());

        public static Output<GetVappVmResult> Invoke(GetVappVmInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVappVmResult>("vcd:index/getVappVm:getVappVm", args ?? new GetVappVmInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVappVmArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("networkDhcpWaitSeconds")]
        public int? NetworkDhcpWaitSeconds { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        [Input("placementPolicyId")]
        public string? PlacementPolicyId { get; set; }

        [Input("sizingPolicyId")]
        public string? SizingPolicyId { get; set; }

        [Input("vappName", required: true)]
        public string VappName { get; set; } = null!;

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetVappVmArgs()
        {
        }
        public static new GetVappVmArgs Empty => new GetVappVmArgs();
    }

    public sealed class GetVappVmInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networkDhcpWaitSeconds")]
        public Input<int>? NetworkDhcpWaitSeconds { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("placementPolicyId")]
        public Input<string>? PlacementPolicyId { get; set; }

        [Input("sizingPolicyId")]
        public Input<string>? SizingPolicyId { get; set; }

        [Input("vappName", required: true)]
        public Input<string> VappName { get; set; } = null!;

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetVappVmInvokeArgs()
        {
        }
        public static new GetVappVmInvokeArgs Empty => new GetVappVmInvokeArgs();
    }


    [OutputType]
    public sealed class GetVappVmResult
    {
        public readonly string ComputerName;
        public readonly int CpuCores;
        public readonly bool CpuHotAddEnabled;
        public readonly int CpuLimit;
        public readonly string CpuPriority;
        public readonly int CpuReservation;
        public readonly int CpuShares;
        public readonly int Cpus;
        public readonly ImmutableArray<Outputs.GetVappVmCustomizationResult> Customizations;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetVappVmDiskResult> Disks;
        public readonly bool ExposeHardwareVirtualization;
        public readonly ImmutableDictionary<string, object> GuestProperties;
        public readonly string HardwareVersion;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetVappVmInternalDiskResult> InternalDisks;
        public readonly int Memory;
        public readonly bool MemoryHotAddEnabled;
        public readonly int MemoryLimit;
        public readonly string MemoryPriority;
        public readonly int MemoryReservation;
        public readonly int MemoryShares;
        public readonly ImmutableDictionary<string, object> Metadata;
        public readonly ImmutableArray<Outputs.GetVappVmMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        public readonly int? NetworkDhcpWaitSeconds;
        public readonly ImmutableArray<Outputs.GetVappVmNetworkResult> Networks;
        public readonly string? Org;
        public readonly string OsType;
        public readonly string PlacementPolicyId;
        public readonly string SizingPolicyId;
        public readonly int Status;
        public readonly string StatusText;
        public readonly string StorageProfile;
        public readonly string VappName;
        public readonly string? Vdc;
        public readonly string VmType;

        [OutputConstructor]
        private GetVappVmResult(
            string computerName,

            int cpuCores,

            bool cpuHotAddEnabled,

            int cpuLimit,

            string cpuPriority,

            int cpuReservation,

            int cpuShares,

            int cpus,

            ImmutableArray<Outputs.GetVappVmCustomizationResult> customizations,

            string description,

            ImmutableArray<Outputs.GetVappVmDiskResult> disks,

            bool exposeHardwareVirtualization,

            ImmutableDictionary<string, object> guestProperties,

            string hardwareVersion,

            string href,

            string id,

            ImmutableArray<Outputs.GetVappVmInternalDiskResult> internalDisks,

            int memory,

            bool memoryHotAddEnabled,

            int memoryLimit,

            string memoryPriority,

            int memoryReservation,

            int memoryShares,

            ImmutableDictionary<string, object> metadata,

            ImmutableArray<Outputs.GetVappVmMetadataEntryResult> metadataEntries,

            string name,

            int? networkDhcpWaitSeconds,

            ImmutableArray<Outputs.GetVappVmNetworkResult> networks,

            string? org,

            string osType,

            string placementPolicyId,

            string sizingPolicyId,

            int status,

            string statusText,

            string storageProfile,

            string vappName,

            string? vdc,

            string vmType)
        {
            ComputerName = computerName;
            CpuCores = cpuCores;
            CpuHotAddEnabled = cpuHotAddEnabled;
            CpuLimit = cpuLimit;
            CpuPriority = cpuPriority;
            CpuReservation = cpuReservation;
            CpuShares = cpuShares;
            Cpus = cpus;
            Customizations = customizations;
            Description = description;
            Disks = disks;
            ExposeHardwareVirtualization = exposeHardwareVirtualization;
            GuestProperties = guestProperties;
            HardwareVersion = hardwareVersion;
            Href = href;
            Id = id;
            InternalDisks = internalDisks;
            Memory = memory;
            MemoryHotAddEnabled = memoryHotAddEnabled;
            MemoryLimit = memoryLimit;
            MemoryPriority = memoryPriority;
            MemoryReservation = memoryReservation;
            MemoryShares = memoryShares;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            NetworkDhcpWaitSeconds = networkDhcpWaitSeconds;
            Networks = networks;
            Org = org;
            OsType = osType;
            PlacementPolicyId = placementPolicyId;
            SizingPolicyId = sizingPolicyId;
            Status = status;
            StatusText = statusText;
            StorageProfile = storageProfile;
            VappName = vappName;
            Vdc = vdc;
            VmType = vmType;
        }
    }
}
