// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetCatalogVappTemplate
    {
        public static Task<GetCatalogVappTemplateResult> InvokeAsync(GetCatalogVappTemplateArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCatalogVappTemplateResult>("vcd:index/getCatalogVappTemplate:getCatalogVappTemplate", args ?? new GetCatalogVappTemplateArgs(), options.WithDefaults());

        public static Output<GetCatalogVappTemplateResult> Invoke(GetCatalogVappTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCatalogVappTemplateResult>("vcd:index/getCatalogVappTemplate:getCatalogVappTemplate", args ?? new GetCatalogVappTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogVappTemplateArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId")]
        public string? CatalogId { get; set; }

        [Input("filter")]
        public Inputs.GetCatalogVappTemplateFilterArgs? Filter { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        [Input("vdcId")]
        public string? VdcId { get; set; }

        public GetCatalogVappTemplateArgs()
        {
        }
        public static new GetCatalogVappTemplateArgs Empty => new GetCatalogVappTemplateArgs();
    }

    public sealed class GetCatalogVappTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetCatalogVappTemplateFilterInputArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("vdcId")]
        public Input<string>? VdcId { get; set; }

        public GetCatalogVappTemplateInvokeArgs()
        {
        }
        public static new GetCatalogVappTemplateInvokeArgs Empty => new GetCatalogVappTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogVappTemplateResult
    {
        public readonly string? CatalogId;
        public readonly string Created;
        public readonly string Description;
        public readonly Outputs.GetCatalogVappTemplateFilterResult? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Metadata;
        public readonly ImmutableArray<Outputs.GetCatalogVappTemplateMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string? Org;
        public readonly string? VdcId;
        public readonly ImmutableArray<string> VmNames;

        [OutputConstructor]
        private GetCatalogVappTemplateResult(
            string? catalogId,

            string created,

            string description,

            Outputs.GetCatalogVappTemplateFilterResult? filter,

            string id,

            ImmutableDictionary<string, object> metadata,

            ImmutableArray<Outputs.GetCatalogVappTemplateMetadataEntryResult> metadataEntries,

            string? name,

            string? org,

            string? vdcId,

            ImmutableArray<string> vmNames)
        {
            CatalogId = catalogId;
            Created = created;
            Description = description;
            Filter = filter;
            Id = id;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            VdcId = vdcId;
            VmNames = vmNames;
        }
    }
}
