// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtNetworkImported
    {
        public static Task<GetNsxtNetworkImportedResult> InvokeAsync(GetNsxtNetworkImportedArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNsxtNetworkImportedResult>("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", args ?? new GetNsxtNetworkImportedArgs(), options.WithDefaults());

        public static Output<GetNsxtNetworkImportedResult> Invoke(GetNsxtNetworkImportedInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNsxtNetworkImportedResult>("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", args ?? new GetNsxtNetworkImportedInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtNetworkImportedArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetNsxtNetworkImportedFilterArgs? Filter { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        [Input("ownerId")]
        public string? OwnerId { get; set; }

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxtNetworkImportedArgs()
        {
        }
        public static new GetNsxtNetworkImportedArgs Empty => new GetNsxtNetworkImportedArgs();
    }

    public sealed class GetNsxtNetworkImportedInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetNsxtNetworkImportedFilterInputArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxtNetworkImportedInvokeArgs()
        {
        }
        public static new GetNsxtNetworkImportedInvokeArgs Empty => new GetNsxtNetworkImportedInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtNetworkImportedResult
    {
        public readonly string Description;
        public readonly string Dns1;
        public readonly string Dns2;
        public readonly string DnsSuffix;
        public readonly Outputs.GetNsxtNetworkImportedFilterResult? Filter;
        public readonly string Gateway;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string NsxtLogicalSwitchId;
        public readonly string? Org;
        public readonly string OwnerId;
        public readonly int PrefixLength;
        public readonly ImmutableArray<Outputs.GetNsxtNetworkImportedStaticIpPoolResult> StaticIpPools;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNsxtNetworkImportedResult(
            string description,

            string dns1,

            string dns2,

            string dnsSuffix,

            Outputs.GetNsxtNetworkImportedFilterResult? filter,

            string gateway,

            string id,

            string? name,

            string nsxtLogicalSwitchId,

            string? org,

            string ownerId,

            int prefixLength,

            ImmutableArray<Outputs.GetNsxtNetworkImportedStaticIpPoolResult> staticIpPools,

            string? vdc)
        {
            Description = description;
            Dns1 = dns1;
            Dns2 = dns2;
            DnsSuffix = dnsSuffix;
            Filter = filter;
            Gateway = gateway;
            Id = id;
            Name = name;
            NsxtLogicalSwitchId = nsxtLogicalSwitchId;
            Org = org;
            OwnerId = ownerId;
            PrefixLength = prefixLength;
            StaticIpPools = staticIpPools;
            Vdc = vdc;
        }
    }
}
