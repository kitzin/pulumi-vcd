// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/lbVirtualServer:LbVirtualServer")]
    public partial class LbVirtualServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Application profile ID to be associated with the virtual server
        /// </summary>
        [Output("appProfileId")]
        public Output<string?> AppProfileId { get; private set; } = null!;

        /// <summary>
        /// List of attached application rule IDs
        /// </summary>
        [Output("appRuleIds")]
        public Output<ImmutableArray<string>> AppRuleIds { get; private set; } = null!;

        /// <summary>
        /// Maximum concurrent connections that the virtual server can process
        /// </summary>
        [Output("connectionLimit")]
        public Output<int?> ConnectionLimit { get; private set; } = null!;

        /// <summary>
        /// Maximum incoming new connection requests per second
        /// </summary>
        [Output("connectionRateLimit")]
        public Output<int?> ConnectionRateLimit { get; private set; } = null!;

        /// <summary>
        /// Virtual Server description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Edge gateway name in which the LB Virtual Server is located
        /// </summary>
        [Output("edgeGateway")]
        public Output<string> EdgeGateway { get; private set; } = null!;

        /// <summary>
        /// Enable virtual server acceleration
        /// </summary>
        [Output("enableAcceleration")]
        public Output<bool?> EnableAcceleration { get; private set; } = null!;

        /// <summary>
        /// Defines if the virtual server is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// IP address that the load balancer listens on
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Unique Virtual Server name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Port number that the load balancer listens on
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Protocol that the virtual server accepts
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The server pool that the load balancer will use
        /// </summary>
        [Output("serverPoolId")]
        public Output<string?> ServerPoolId { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a LbVirtualServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LbVirtualServer(string name, LbVirtualServerArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/lbVirtualServer:LbVirtualServer", name, args ?? new LbVirtualServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LbVirtualServer(string name, Input<string> id, LbVirtualServerState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/lbVirtualServer:LbVirtualServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LbVirtualServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LbVirtualServer Get(string name, Input<string> id, LbVirtualServerState? state = null, CustomResourceOptions? options = null)
        {
            return new LbVirtualServer(name, id, state, options);
        }
    }

    public sealed class LbVirtualServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application profile ID to be associated with the virtual server
        /// </summary>
        [Input("appProfileId")]
        public Input<string>? AppProfileId { get; set; }

        [Input("appRuleIds")]
        private InputList<string>? _appRuleIds;

        /// <summary>
        /// List of attached application rule IDs
        /// </summary>
        public InputList<string> AppRuleIds
        {
            get => _appRuleIds ?? (_appRuleIds = new InputList<string>());
            set => _appRuleIds = value;
        }

        /// <summary>
        /// Maximum concurrent connections that the virtual server can process
        /// </summary>
        [Input("connectionLimit")]
        public Input<int>? ConnectionLimit { get; set; }

        /// <summary>
        /// Maximum incoming new connection requests per second
        /// </summary>
        [Input("connectionRateLimit")]
        public Input<int>? ConnectionRateLimit { get; set; }

        /// <summary>
        /// Virtual Server description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Edge gateway name in which the LB Virtual Server is located
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        /// <summary>
        /// Enable virtual server acceleration
        /// </summary>
        [Input("enableAcceleration")]
        public Input<bool>? EnableAcceleration { get; set; }

        /// <summary>
        /// Defines if the virtual server is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// IP address that the load balancer listens on
        /// </summary>
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        /// <summary>
        /// Unique Virtual Server name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Port number that the load balancer listens on
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Protocol that the virtual server accepts
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The server pool that the load balancer will use
        /// </summary>
        [Input("serverPoolId")]
        public Input<string>? ServerPoolId { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public LbVirtualServerArgs()
        {
        }
        public static new LbVirtualServerArgs Empty => new LbVirtualServerArgs();
    }

    public sealed class LbVirtualServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application profile ID to be associated with the virtual server
        /// </summary>
        [Input("appProfileId")]
        public Input<string>? AppProfileId { get; set; }

        [Input("appRuleIds")]
        private InputList<string>? _appRuleIds;

        /// <summary>
        /// List of attached application rule IDs
        /// </summary>
        public InputList<string> AppRuleIds
        {
            get => _appRuleIds ?? (_appRuleIds = new InputList<string>());
            set => _appRuleIds = value;
        }

        /// <summary>
        /// Maximum concurrent connections that the virtual server can process
        /// </summary>
        [Input("connectionLimit")]
        public Input<int>? ConnectionLimit { get; set; }

        /// <summary>
        /// Maximum incoming new connection requests per second
        /// </summary>
        [Input("connectionRateLimit")]
        public Input<int>? ConnectionRateLimit { get; set; }

        /// <summary>
        /// Virtual Server description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Edge gateway name in which the LB Virtual Server is located
        /// </summary>
        [Input("edgeGateway")]
        public Input<string>? EdgeGateway { get; set; }

        /// <summary>
        /// Enable virtual server acceleration
        /// </summary>
        [Input("enableAcceleration")]
        public Input<bool>? EnableAcceleration { get; set; }

        /// <summary>
        /// Defines if the virtual server is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// IP address that the load balancer listens on
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Unique Virtual Server name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Port number that the load balancer listens on
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Protocol that the virtual server accepts
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The server pool that the load balancer will use
        /// </summary>
        [Input("serverPoolId")]
        public Input<string>? ServerPoolId { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public LbVirtualServerState()
        {
        }
        public static new LbVirtualServerState Empty => new LbVirtualServerState();
    }
}
