// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/networkDirect:NetworkDirect")]
    public partial class NetworkDirect : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional description for the network
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the external network
        /// </summary>
        [Output("externalNetwork")]
        public Output<string> ExternalNetwork { get; private set; } = null!;

        /// <summary>
        /// Main DNS of the external network
        /// </summary>
        [Output("externalNetworkDns1")]
        public Output<string> ExternalNetworkDns1 { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS of the external network
        /// </summary>
        [Output("externalNetworkDns2")]
        public Output<string> ExternalNetworkDns2 { get; private set; } = null!;

        /// <summary>
        /// DNS suffix of the external network
        /// </summary>
        [Output("externalNetworkDnsSuffix")]
        public Output<string> ExternalNetworkDnsSuffix { get; private set; } = null!;

        /// <summary>
        /// Gateway of the external network
        /// </summary>
        [Output("externalNetworkGateway")]
        public Output<string> ExternalNetworkGateway { get; private set; } = null!;

        /// <summary>
        /// Net mask of the external network
        /// </summary>
        [Output("externalNetworkNetmask")]
        public Output<string> ExternalNetworkNetmask { get; private set; } = null!;

        /// <summary>
        /// Network Hypertext Reference
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Key value map of metadata to assign to this network. Key and value can be any string
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, object>> Metadata { get; private set; } = null!;

        /// <summary>
        /// Metadata entries for the given Network
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.NetworkDirectMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// A unique name for this network
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Defines if this network is shared between multiple VDCs in the Org
        /// </summary>
        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkDirect resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkDirect(string name, NetworkDirectArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/networkDirect:NetworkDirect", name, args ?? new NetworkDirectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkDirect(string name, Input<string> id, NetworkDirectState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/networkDirect:NetworkDirect", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkDirect resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkDirect Get(string name, Input<string> id, NetworkDirectState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkDirect(name, id, state, options);
        }
    }

    public sealed class NetworkDirectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional description for the network
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the external network
        /// </summary>
        [Input("externalNetwork", required: true)]
        public Input<string> ExternalNetwork { get; set; } = null!;

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Key value map of metadata to assign to this network. Key and value can be any string
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.NetworkDirectMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// Metadata entries for the given Network
        /// </summary>
        public InputList<Inputs.NetworkDirectMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.NetworkDirectMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// A unique name for this network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Defines if this network is shared between multiple VDCs in the Org
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NetworkDirectArgs()
        {
        }
        public static new NetworkDirectArgs Empty => new NetworkDirectArgs();
    }

    public sealed class NetworkDirectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional description for the network
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the external network
        /// </summary>
        [Input("externalNetwork")]
        public Input<string>? ExternalNetwork { get; set; }

        /// <summary>
        /// Main DNS of the external network
        /// </summary>
        [Input("externalNetworkDns1")]
        public Input<string>? ExternalNetworkDns1 { get; set; }

        /// <summary>
        /// Secondary DNS of the external network
        /// </summary>
        [Input("externalNetworkDns2")]
        public Input<string>? ExternalNetworkDns2 { get; set; }

        /// <summary>
        /// DNS suffix of the external network
        /// </summary>
        [Input("externalNetworkDnsSuffix")]
        public Input<string>? ExternalNetworkDnsSuffix { get; set; }

        /// <summary>
        /// Gateway of the external network
        /// </summary>
        [Input("externalNetworkGateway")]
        public Input<string>? ExternalNetworkGateway { get; set; }

        /// <summary>
        /// Net mask of the external network
        /// </summary>
        [Input("externalNetworkNetmask")]
        public Input<string>? ExternalNetworkNetmask { get; set; }

        /// <summary>
        /// Network Hypertext Reference
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Key value map of metadata to assign to this network. Key and value can be any string
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.NetworkDirectMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// Metadata entries for the given Network
        /// </summary>
        public InputList<Inputs.NetworkDirectMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.NetworkDirectMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// A unique name for this network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Defines if this network is shared between multiple VDCs in the Org
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NetworkDirectState()
        {
        }
        public static new NetworkDirectState Empty => new NetworkDirectState();
    }
}
