// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/insertedMedia:InsertedMedia")]
    public partial class InsertedMedia : global::Pulumi.CustomResource
    {
        /// <summary>
        /// catalog name where to find media file
        /// </summary>
        [Output("catalog")]
        public Output<string> Catalog { get; private set; } = null!;

        /// <summary>
        /// When ejecting answers automatically to question yes
        /// </summary>
        [Output("ejectForce")]
        public Output<bool?> EjectForce { get; private set; } = null!;

        /// <summary>
        /// media name to use
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// vApp to use
        /// </summary>
        [Output("vappName")]
        public Output<string> VappName { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;

        /// <summary>
        /// VM in vApp in which media will be inserted or ejected
        /// </summary>
        [Output("vmName")]
        public Output<string> VmName { get; private set; } = null!;


        /// <summary>
        /// Create a InsertedMedia resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InsertedMedia(string name, InsertedMediaArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/insertedMedia:InsertedMedia", name, args ?? new InsertedMediaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InsertedMedia(string name, Input<string> id, InsertedMediaState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/insertedMedia:InsertedMedia", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InsertedMedia resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InsertedMedia Get(string name, Input<string> id, InsertedMediaState? state = null, CustomResourceOptions? options = null)
        {
            return new InsertedMedia(name, id, state, options);
        }
    }

    public sealed class InsertedMediaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// catalog name where to find media file
        /// </summary>
        [Input("catalog", required: true)]
        public Input<string> Catalog { get; set; } = null!;

        /// <summary>
        /// When ejecting answers automatically to question yes
        /// </summary>
        [Input("ejectForce")]
        public Input<bool>? EjectForce { get; set; }

        /// <summary>
        /// media name to use
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// vApp to use
        /// </summary>
        [Input("vappName", required: true)]
        public Input<string> VappName { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        /// <summary>
        /// VM in vApp in which media will be inserted or ejected
        /// </summary>
        [Input("vmName", required: true)]
        public Input<string> VmName { get; set; } = null!;

        public InsertedMediaArgs()
        {
        }
        public static new InsertedMediaArgs Empty => new InsertedMediaArgs();
    }

    public sealed class InsertedMediaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// catalog name where to find media file
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        /// <summary>
        /// When ejecting answers automatically to question yes
        /// </summary>
        [Input("ejectForce")]
        public Input<bool>? EjectForce { get; set; }

        /// <summary>
        /// media name to use
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// vApp to use
        /// </summary>
        [Input("vappName")]
        public Input<string>? VappName { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        /// <summary>
        /// VM in vApp in which media will be inserted or ejected
        /// </summary>
        [Input("vmName")]
        public Input<string>? VmName { get; set; }

        public InsertedMediaState()
        {
        }
        public static new InsertedMediaState Empty => new InsertedMediaState();
    }
}
