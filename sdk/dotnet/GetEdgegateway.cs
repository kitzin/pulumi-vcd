// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetEdgegateway
    {
        public static Task<GetEdgegatewayResult> InvokeAsync(GetEdgegatewayArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEdgegatewayResult>("vcd:index/getEdgegateway:getEdgegateway", args ?? new GetEdgegatewayArgs(), options.WithDefaults());

        public static Output<GetEdgegatewayResult> Invoke(GetEdgegatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEdgegatewayResult>("vcd:index/getEdgegateway:getEdgegateway", args ?? new GetEdgegatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEdgegatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetEdgegatewayFilterArgs? Filter { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetEdgegatewayArgs()
        {
        }
        public static new GetEdgegatewayArgs Empty => new GetEdgegatewayArgs();
    }

    public sealed class GetEdgegatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetEdgegatewayFilterInputArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetEdgegatewayInvokeArgs()
        {
        }
        public static new GetEdgegatewayInvokeArgs Empty => new GetEdgegatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetEdgegatewayResult
    {
        public readonly string Configuration;
        public readonly string DefaultExternalNetworkIp;
        public readonly string Description;
        public readonly bool DistributedRouting;
        public readonly ImmutableArray<string> ExternalNetworkIps;
        public readonly ImmutableArray<Outputs.GetEdgegatewayExternalNetworkResult> ExternalNetworks;
        public readonly Outputs.GetEdgegatewayFilterResult? Filter;
        public readonly bool FipsModeEnabled;
        public readonly string FwDefaultRuleAction;
        public readonly bool FwDefaultRuleLoggingEnabled;
        public readonly bool FwEnabled;
        public readonly bool HaEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool LbAccelerationEnabled;
        public readonly bool LbEnabled;
        public readonly bool LbLoggingEnabled;
        public readonly string LbLoglevel;
        public readonly string? Name;
        public readonly string? Org;
        public readonly bool UseDefaultRouteForDnsRelay;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetEdgegatewayResult(
            string configuration,

            string defaultExternalNetworkIp,

            string description,

            bool distributedRouting,

            ImmutableArray<string> externalNetworkIps,

            ImmutableArray<Outputs.GetEdgegatewayExternalNetworkResult> externalNetworks,

            Outputs.GetEdgegatewayFilterResult? filter,

            bool fipsModeEnabled,

            string fwDefaultRuleAction,

            bool fwDefaultRuleLoggingEnabled,

            bool fwEnabled,

            bool haEnabled,

            string id,

            bool lbAccelerationEnabled,

            bool lbEnabled,

            bool lbLoggingEnabled,

            string lbLoglevel,

            string? name,

            string? org,

            bool useDefaultRouteForDnsRelay,

            string? vdc)
        {
            Configuration = configuration;
            DefaultExternalNetworkIp = defaultExternalNetworkIp;
            Description = description;
            DistributedRouting = distributedRouting;
            ExternalNetworkIps = externalNetworkIps;
            ExternalNetworks = externalNetworks;
            Filter = filter;
            FipsModeEnabled = fipsModeEnabled;
            FwDefaultRuleAction = fwDefaultRuleAction;
            FwDefaultRuleLoggingEnabled = fwDefaultRuleLoggingEnabled;
            FwEnabled = fwEnabled;
            HaEnabled = haEnabled;
            Id = id;
            LbAccelerationEnabled = lbAccelerationEnabled;
            LbEnabled = lbEnabled;
            LbLoggingEnabled = lbLoggingEnabled;
            LbLoglevel = lbLoglevel;
            Name = name;
            Org = org;
            UseDefaultRouteForDnsRelay = useDefaultRouteForDnsRelay;
            Vdc = vdc;
        }
    }
}
