// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxtAppPortProfile:NsxtAppPortProfile")]
    public partial class NsxtAppPortProfile : global::Pulumi.CustomResource
    {
        [Output("appPorts")]
        public Output<ImmutableArray<Outputs.NsxtAppPortProfileAppPort>> AppPorts { get; private set; } = null!;

        /// <summary>
        /// ID of VDC, VDC Group, or NSX-T Manager
        /// </summary>
        [Output("contextId")]
        public Output<string> ContextId { get; private set; } = null!;

        /// <summary>
        /// Application Port Profile description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Application Port Profile name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of NSX-T manager. Only required for 'PROVIDER' scope
        /// </summary>
        [Output("nsxtManagerId")]
        public Output<string> NsxtManagerId { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Scope - 'PROVIDER' or 'TENANT'
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a NsxtAppPortProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxtAppPortProfile(string name, NsxtAppPortProfileArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtAppPortProfile:NsxtAppPortProfile", name, args ?? new NsxtAppPortProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NsxtAppPortProfile(string name, Input<string> id, NsxtAppPortProfileState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtAppPortProfile:NsxtAppPortProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxtAppPortProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxtAppPortProfile Get(string name, Input<string> id, NsxtAppPortProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new NsxtAppPortProfile(name, id, state, options);
        }
    }

    public sealed class NsxtAppPortProfileArgs : global::Pulumi.ResourceArgs
    {
        [Input("appPorts", required: true)]
        private InputList<Inputs.NsxtAppPortProfileAppPortArgs>? _appPorts;
        public InputList<Inputs.NsxtAppPortProfileAppPortArgs> AppPorts
        {
            get => _appPorts ?? (_appPorts = new InputList<Inputs.NsxtAppPortProfileAppPortArgs>());
            set => _appPorts = value;
        }

        /// <summary>
        /// ID of VDC, VDC Group, or NSX-T Manager
        /// </summary>
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        /// <summary>
        /// Application Port Profile description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Application Port Profile name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of NSX-T manager. Only required for 'PROVIDER' scope
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Scope - 'PROVIDER' or 'TENANT'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxtAppPortProfileArgs()
        {
        }
        public static new NsxtAppPortProfileArgs Empty => new NsxtAppPortProfileArgs();
    }

    public sealed class NsxtAppPortProfileState : global::Pulumi.ResourceArgs
    {
        [Input("appPorts")]
        private InputList<Inputs.NsxtAppPortProfileAppPortGetArgs>? _appPorts;
        public InputList<Inputs.NsxtAppPortProfileAppPortGetArgs> AppPorts
        {
            get => _appPorts ?? (_appPorts = new InputList<Inputs.NsxtAppPortProfileAppPortGetArgs>());
            set => _appPorts = value;
        }

        /// <summary>
        /// ID of VDC, VDC Group, or NSX-T Manager
        /// </summary>
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        /// <summary>
        /// Application Port Profile description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Application Port Profile name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of NSX-T manager. Only required for 'PROVIDER' scope
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Scope - 'PROVIDER' or 'TENANT'
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxtAppPortProfileState()
        {
        }
        public static new NsxtAppPortProfileState Empty => new NsxtAppPortProfileState();
    }
}
