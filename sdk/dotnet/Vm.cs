// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/vm:Vm")]
    public partial class Vm : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Automatically accept EULA if OVA has it
        /// </summary>
        [Output("acceptAllEulas")]
        public Output<bool?> AcceptAllEulas { get; private set; } = null!;

        /// <summary>
        /// Media name to add as boot image.
        /// </summary>
        [Output("bootImage")]
        public Output<string?> BootImage { get; private set; } = null!;

        /// <summary>
        /// The URN of the media to use as boot image.
        /// </summary>
        [Output("bootImageId")]
        public Output<string?> BootImageId { get; private set; } = null!;

        /// <summary>
        /// The catalog name in which to find the given vApp Template or media for boot_image
        /// </summary>
        [Output("catalogName")]
        public Output<string?> CatalogName { get; private set; } = null!;

        /// <summary>
        /// Computer name to assign to this virtual machine
        /// </summary>
        [Output("computerName")]
        public Output<string> ComputerName { get; private set; } = null!;

        /// <summary>
        /// The number of cores per socket
        /// </summary>
        [Output("cpuCores")]
        public Output<int> CpuCores { get; private set; } = null!;

        /// <summary>
        /// True if the virtual machine supports addition of virtual CPUs while powered on.
        /// </summary>
        [Output("cpuHotAddEnabled")]
        public Output<bool?> CpuHotAddEnabled { get; private set; } = null!;

        /// <summary>
        /// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
        /// the resource allocation is not unlimited.
        /// </summary>
        [Output("cpuLimit")]
        public Output<int> CpuLimit { get; private set; } = null!;

        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        /// virtualized workload
        /// </summary>
        [Output("cpuPriority")]
        public Output<string> CpuPriority { get; private set; } = null!;

        /// <summary>
        /// The amount of MHz reservation on the underlying virtualization infrastructure
        /// </summary>
        [Output("cpuReservation")]
        public Output<int> CpuReservation { get; private set; } = null!;

        /// <summary>
        /// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        /// </summary>
        [Output("cpuShares")]
        public Output<int> CpuShares { get; private set; } = null!;

        /// <summary>
        /// The number of virtual CPUs to allocate to the VM
        /// </summary>
        [Output("cpus")]
        public Output<int> Cpus { get; private set; } = null!;

        /// <summary>
        /// Guest customization block
        /// </summary>
        [Output("customization")]
        public Output<Outputs.VmCustomization> Customization { get; private set; } = null!;

        /// <summary>
        /// The VM description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("disks")]
        public Output<ImmutableArray<Outputs.VmDisk>> Disks { get; private set; } = null!;

        /// <summary>
        /// Expose hardware-assisted CPU virtualization to guest OS.
        /// </summary>
        [Output("exposeHardwareVirtualization")]
        public Output<bool?> ExposeHardwareVirtualization { get; private set; } = null!;

        /// <summary>
        /// Key/value settings for guest properties
        /// </summary>
        [Output("guestProperties")]
        public Output<ImmutableDictionary<string, object>?> GuestProperties { get; private set; } = null!;

        /// <summary>
        /// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        /// </summary>
        [Output("hardwareVersion")]
        public Output<string> HardwareVersion { get; private set; } = null!;

        /// <summary>
        /// VM Hyper Reference
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// A block will show internal disk details
        /// </summary>
        [Output("internalDisks")]
        public Output<ImmutableArray<Outputs.VmInternalDisk>> InternalDisks { get; private set; } = null!;

        /// <summary>
        /// The amount of RAM (in MB) to allocate to the VM
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        /// <summary>
        /// True if the virtual machine supports addition of memory while powered on.
        /// </summary>
        [Output("memoryHotAddEnabled")]
        public Output<bool?> MemoryHotAddEnabled { get; private set; } = null!;

        /// <summary>
        /// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
        /// when the resource allocation is not unlimited.
        /// </summary>
        [Output("memoryLimit")]
        public Output<int> MemoryLimit { get; private set; } = null!;

        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        /// virtualized workload
        /// </summary>
        [Output("memoryPriority")]
        public Output<string> MemoryPriority { get; private set; } = null!;

        /// <summary>
        /// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        /// </summary>
        [Output("memoryReservation")]
        public Output<int> MemoryReservation { get; private set; } = null!;

        /// <summary>
        /// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        /// </summary>
        [Output("memoryShares")]
        public Output<int> MemoryShares { get; private set; } = null!;

        /// <summary>
        /// Key value map of metadata to assign to this VM
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, object>> Metadata { get; private set; } = null!;

        /// <summary>
        /// Metadata entries for the given VM
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.VmMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// A name for the VM, unique within the vApp
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        /// </summary>
        [Output("networkDhcpWaitSeconds")]
        public Output<int?> NetworkDhcpWaitSeconds { get; private set; } = null!;

        /// <summary>
        /// A block to define network interface. Multiple can be used.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.VmNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Operating System type. Possible values can be found in documentation.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
        /// and unit_number.
        /// </summary>
        [Output("overrideTemplateDisks")]
        public Output<ImmutableArray<Outputs.VmOverrideTemplateDisk>> OverrideTemplateDisks { get; private set; } = null!;

        /// <summary>
        /// VM placement policy ID. Has to be assigned to Org VDC.
        /// </summary>
        [Output("placementPolicyId")]
        public Output<string> PlacementPolicyId { get; private set; } = null!;

        /// <summary>
        /// A boolean value stating if this VM should be powered on
        /// </summary>
        [Output("powerOn")]
        public Output<bool?> PowerOn { get; private set; } = null!;

        /// <summary>
        /// True if the update of resource should fail when virtual machine power off needed.
        /// </summary>
        [Output("preventUpdatePowerOff")]
        public Output<bool?> PreventUpdatePowerOff { get; private set; } = null!;

        /// <summary>
        /// VM sizing policy ID. Has to be assigned to Org VDC.
        /// </summary>
        [Output("sizingPolicyId")]
        public Output<string> SizingPolicyId { get; private set; } = null!;

        /// <summary>
        /// Shows the status code of the VM
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;

        /// <summary>
        /// Shows the status of the VM
        /// </summary>
        [Output("statusText")]
        public Output<string> StatusText { get; private set; } = null!;

        /// <summary>
        /// Storage profile to override the default one
        /// </summary>
        [Output("storageProfile")]
        public Output<string> StorageProfile { get; private set; } = null!;

        /// <summary>
        /// The name of the vApp Template to use
        /// </summary>
        [Output("templateName")]
        public Output<string?> TemplateName { get; private set; } = null!;

        /// <summary>
        /// The vApp this VM belongs to - Required, unless it is a standalone VM
        /// </summary>
        [Output("vappName")]
        public Output<string> VappName { get; private set; } = null!;

        /// <summary>
        /// The URN of the vApp Template to use
        /// </summary>
        [Output("vappTemplateId")]
        public Output<string?> VappTemplateId { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;

        /// <summary>
        /// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        /// </summary>
        [Output("vmNameInTemplate")]
        public Output<string?> VmNameInTemplate { get; private set; } = null!;

        /// <summary>
        /// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
        /// </summary>
        [Output("vmType")]
        public Output<string> VmType { get; private set; } = null!;


        /// <summary>
        /// Create a Vm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vm(string name, VmArgs? args = null, CustomResourceOptions? options = null)
            : base("vcd:index/vm:Vm", name, args ?? new VmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vm(string name, Input<string> id, VmState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/vm:Vm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vm Get(string name, Input<string> id, VmState? state = null, CustomResourceOptions? options = null)
        {
            return new Vm(name, id, state, options);
        }
    }

    public sealed class VmArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatically accept EULA if OVA has it
        /// </summary>
        [Input("acceptAllEulas")]
        public Input<bool>? AcceptAllEulas { get; set; }

        /// <summary>
        /// Media name to add as boot image.
        /// </summary>
        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        /// <summary>
        /// The URN of the media to use as boot image.
        /// </summary>
        [Input("bootImageId")]
        public Input<string>? BootImageId { get; set; }

        /// <summary>
        /// The catalog name in which to find the given vApp Template or media for boot_image
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        /// <summary>
        /// Computer name to assign to this virtual machine
        /// </summary>
        [Input("computerName")]
        public Input<string>? ComputerName { get; set; }

        /// <summary>
        /// The number of cores per socket
        /// </summary>
        [Input("cpuCores")]
        public Input<int>? CpuCores { get; set; }

        /// <summary>
        /// True if the virtual machine supports addition of virtual CPUs while powered on.
        /// </summary>
        [Input("cpuHotAddEnabled")]
        public Input<bool>? CpuHotAddEnabled { get; set; }

        /// <summary>
        /// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
        /// the resource allocation is not unlimited.
        /// </summary>
        [Input("cpuLimit")]
        public Input<int>? CpuLimit { get; set; }

        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        /// virtualized workload
        /// </summary>
        [Input("cpuPriority")]
        public Input<string>? CpuPriority { get; set; }

        /// <summary>
        /// The amount of MHz reservation on the underlying virtualization infrastructure
        /// </summary>
        [Input("cpuReservation")]
        public Input<int>? CpuReservation { get; set; }

        /// <summary>
        /// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        /// </summary>
        [Input("cpuShares")]
        public Input<int>? CpuShares { get; set; }

        /// <summary>
        /// The number of virtual CPUs to allocate to the VM
        /// </summary>
        [Input("cpus")]
        public Input<int>? Cpus { get; set; }

        /// <summary>
        /// Guest customization block
        /// </summary>
        [Input("customization")]
        public Input<Inputs.VmCustomizationArgs>? Customization { get; set; }

        /// <summary>
        /// The VM description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VmDiskArgs>? _disks;
        public InputList<Inputs.VmDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VmDiskArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// Expose hardware-assisted CPU virtualization to guest OS.
        /// </summary>
        [Input("exposeHardwareVirtualization")]
        public Input<bool>? ExposeHardwareVirtualization { get; set; }

        [Input("guestProperties")]
        private InputMap<object>? _guestProperties;

        /// <summary>
        /// Key/value settings for guest properties
        /// </summary>
        public InputMap<object> GuestProperties
        {
            get => _guestProperties ?? (_guestProperties = new InputMap<object>());
            set => _guestProperties = value;
        }

        /// <summary>
        /// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        /// </summary>
        [Input("hardwareVersion")]
        public Input<string>? HardwareVersion { get; set; }

        /// <summary>
        /// VM Hyper Reference
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// The amount of RAM (in MB) to allocate to the VM
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// True if the virtual machine supports addition of memory while powered on.
        /// </summary>
        [Input("memoryHotAddEnabled")]
        public Input<bool>? MemoryHotAddEnabled { get; set; }

        /// <summary>
        /// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
        /// when the resource allocation is not unlimited.
        /// </summary>
        [Input("memoryLimit")]
        public Input<int>? MemoryLimit { get; set; }

        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        /// virtualized workload
        /// </summary>
        [Input("memoryPriority")]
        public Input<string>? MemoryPriority { get; set; }

        /// <summary>
        /// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        /// </summary>
        [Input("memoryReservation")]
        public Input<int>? MemoryReservation { get; set; }

        /// <summary>
        /// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        /// </summary>
        [Input("memoryShares")]
        public Input<int>? MemoryShares { get; set; }

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Key value map of metadata to assign to this VM
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.VmMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// Metadata entries for the given VM
        /// </summary>
        public InputList<Inputs.VmMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.VmMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// A name for the VM, unique within the vApp
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        /// </summary>
        [Input("networkDhcpWaitSeconds")]
        public Input<int>? NetworkDhcpWaitSeconds { get; set; }

        [Input("networks")]
        private InputList<Inputs.VmNetworkArgs>? _networks;

        /// <summary>
        /// A block to define network interface. Multiple can be used.
        /// </summary>
        public InputList<Inputs.VmNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.VmNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Operating System type. Possible values can be found in documentation.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("overrideTemplateDisks")]
        private InputList<Inputs.VmOverrideTemplateDiskArgs>? _overrideTemplateDisks;

        /// <summary>
        /// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
        /// and unit_number.
        /// </summary>
        public InputList<Inputs.VmOverrideTemplateDiskArgs> OverrideTemplateDisks
        {
            get => _overrideTemplateDisks ?? (_overrideTemplateDisks = new InputList<Inputs.VmOverrideTemplateDiskArgs>());
            set => _overrideTemplateDisks = value;
        }

        /// <summary>
        /// VM placement policy ID. Has to be assigned to Org VDC.
        /// </summary>
        [Input("placementPolicyId")]
        public Input<string>? PlacementPolicyId { get; set; }

        /// <summary>
        /// A boolean value stating if this VM should be powered on
        /// </summary>
        [Input("powerOn")]
        public Input<bool>? PowerOn { get; set; }

        /// <summary>
        /// True if the update of resource should fail when virtual machine power off needed.
        /// </summary>
        [Input("preventUpdatePowerOff")]
        public Input<bool>? PreventUpdatePowerOff { get; set; }

        /// <summary>
        /// VM sizing policy ID. Has to be assigned to Org VDC.
        /// </summary>
        [Input("sizingPolicyId")]
        public Input<string>? SizingPolicyId { get; set; }

        /// <summary>
        /// Storage profile to override the default one
        /// </summary>
        [Input("storageProfile")]
        public Input<string>? StorageProfile { get; set; }

        /// <summary>
        /// The name of the vApp Template to use
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// The vApp this VM belongs to - Required, unless it is a standalone VM
        /// </summary>
        [Input("vappName")]
        public Input<string>? VappName { get; set; }

        /// <summary>
        /// The URN of the vApp Template to use
        /// </summary>
        [Input("vappTemplateId")]
        public Input<string>? VappTemplateId { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        /// <summary>
        /// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        /// </summary>
        [Input("vmNameInTemplate")]
        public Input<string>? VmNameInTemplate { get; set; }

        public VmArgs()
        {
        }
        public static new VmArgs Empty => new VmArgs();
    }

    public sealed class VmState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatically accept EULA if OVA has it
        /// </summary>
        [Input("acceptAllEulas")]
        public Input<bool>? AcceptAllEulas { get; set; }

        /// <summary>
        /// Media name to add as boot image.
        /// </summary>
        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        /// <summary>
        /// The URN of the media to use as boot image.
        /// </summary>
        [Input("bootImageId")]
        public Input<string>? BootImageId { get; set; }

        /// <summary>
        /// The catalog name in which to find the given vApp Template or media for boot_image
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        /// <summary>
        /// Computer name to assign to this virtual machine
        /// </summary>
        [Input("computerName")]
        public Input<string>? ComputerName { get; set; }

        /// <summary>
        /// The number of cores per socket
        /// </summary>
        [Input("cpuCores")]
        public Input<int>? CpuCores { get; set; }

        /// <summary>
        /// True if the virtual machine supports addition of virtual CPUs while powered on.
        /// </summary>
        [Input("cpuHotAddEnabled")]
        public Input<bool>? CpuHotAddEnabled { get; set; }

        /// <summary>
        /// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
        /// the resource allocation is not unlimited.
        /// </summary>
        [Input("cpuLimit")]
        public Input<int>? CpuLimit { get; set; }

        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        /// virtualized workload
        /// </summary>
        [Input("cpuPriority")]
        public Input<string>? CpuPriority { get; set; }

        /// <summary>
        /// The amount of MHz reservation on the underlying virtualization infrastructure
        /// </summary>
        [Input("cpuReservation")]
        public Input<int>? CpuReservation { get; set; }

        /// <summary>
        /// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
        /// </summary>
        [Input("cpuShares")]
        public Input<int>? CpuShares { get; set; }

        /// <summary>
        /// The number of virtual CPUs to allocate to the VM
        /// </summary>
        [Input("cpus")]
        public Input<int>? Cpus { get; set; }

        /// <summary>
        /// Guest customization block
        /// </summary>
        [Input("customization")]
        public Input<Inputs.VmCustomizationGetArgs>? Customization { get; set; }

        /// <summary>
        /// The VM description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VmDiskGetArgs>? _disks;
        public InputList<Inputs.VmDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VmDiskGetArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// Expose hardware-assisted CPU virtualization to guest OS.
        /// </summary>
        [Input("exposeHardwareVirtualization")]
        public Input<bool>? ExposeHardwareVirtualization { get; set; }

        [Input("guestProperties")]
        private InputMap<object>? _guestProperties;

        /// <summary>
        /// Key/value settings for guest properties
        /// </summary>
        public InputMap<object> GuestProperties
        {
            get => _guestProperties ?? (_guestProperties = new InputMap<object>());
            set => _guestProperties = value;
        }

        /// <summary>
        /// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
        /// </summary>
        [Input("hardwareVersion")]
        public Input<string>? HardwareVersion { get; set; }

        /// <summary>
        /// VM Hyper Reference
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        [Input("internalDisks")]
        private InputList<Inputs.VmInternalDiskGetArgs>? _internalDisks;

        /// <summary>
        /// A block will show internal disk details
        /// </summary>
        public InputList<Inputs.VmInternalDiskGetArgs> InternalDisks
        {
            get => _internalDisks ?? (_internalDisks = new InputList<Inputs.VmInternalDiskGetArgs>());
            set => _internalDisks = value;
        }

        /// <summary>
        /// The amount of RAM (in MB) to allocate to the VM
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// True if the virtual machine supports addition of memory while powered on.
        /// </summary>
        [Input("memoryHotAddEnabled")]
        public Input<bool>? MemoryHotAddEnabled { get; set; }

        /// <summary>
        /// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
        /// when the resource allocation is not unlimited.
        /// </summary>
        [Input("memoryLimit")]
        public Input<int>? MemoryLimit { get; set; }

        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
        /// virtualized workload
        /// </summary>
        [Input("memoryPriority")]
        public Input<string>? MemoryPriority { get; set; }

        /// <summary>
        /// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        /// </summary>
        [Input("memoryReservation")]
        public Input<int>? MemoryReservation { get; set; }

        /// <summary>
        /// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
        /// </summary>
        [Input("memoryShares")]
        public Input<int>? MemoryShares { get; set; }

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Key value map of metadata to assign to this VM
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.VmMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// Metadata entries for the given VM
        /// </summary>
        public InputList<Inputs.VmMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.VmMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// A name for the VM, unique within the vApp
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
        /// </summary>
        [Input("networkDhcpWaitSeconds")]
        public Input<int>? NetworkDhcpWaitSeconds { get; set; }

        [Input("networks")]
        private InputList<Inputs.VmNetworkGetArgs>? _networks;

        /// <summary>
        /// A block to define network interface. Multiple can be used.
        /// </summary>
        public InputList<Inputs.VmNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.VmNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Operating System type. Possible values can be found in documentation.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("overrideTemplateDisks")]
        private InputList<Inputs.VmOverrideTemplateDiskGetArgs>? _overrideTemplateDisks;

        /// <summary>
        /// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
        /// and unit_number.
        /// </summary>
        public InputList<Inputs.VmOverrideTemplateDiskGetArgs> OverrideTemplateDisks
        {
            get => _overrideTemplateDisks ?? (_overrideTemplateDisks = new InputList<Inputs.VmOverrideTemplateDiskGetArgs>());
            set => _overrideTemplateDisks = value;
        }

        /// <summary>
        /// VM placement policy ID. Has to be assigned to Org VDC.
        /// </summary>
        [Input("placementPolicyId")]
        public Input<string>? PlacementPolicyId { get; set; }

        /// <summary>
        /// A boolean value stating if this VM should be powered on
        /// </summary>
        [Input("powerOn")]
        public Input<bool>? PowerOn { get; set; }

        /// <summary>
        /// True if the update of resource should fail when virtual machine power off needed.
        /// </summary>
        [Input("preventUpdatePowerOff")]
        public Input<bool>? PreventUpdatePowerOff { get; set; }

        /// <summary>
        /// VM sizing policy ID. Has to be assigned to Org VDC.
        /// </summary>
        [Input("sizingPolicyId")]
        public Input<string>? SizingPolicyId { get; set; }

        /// <summary>
        /// Shows the status code of the VM
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// Shows the status of the VM
        /// </summary>
        [Input("statusText")]
        public Input<string>? StatusText { get; set; }

        /// <summary>
        /// Storage profile to override the default one
        /// </summary>
        [Input("storageProfile")]
        public Input<string>? StorageProfile { get; set; }

        /// <summary>
        /// The name of the vApp Template to use
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// The vApp this VM belongs to - Required, unless it is a standalone VM
        /// </summary>
        [Input("vappName")]
        public Input<string>? VappName { get; set; }

        /// <summary>
        /// The URN of the vApp Template to use
        /// </summary>
        [Input("vappTemplateId")]
        public Input<string>? VappTemplateId { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        /// <summary>
        /// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
        /// </summary>
        [Input("vmNameInTemplate")]
        public Input<string>? VmNameInTemplate { get; set; }

        /// <summary>
        /// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
        /// </summary>
        [Input("vmType")]
        public Input<string>? VmType { get; set; }

        public VmState()
        {
        }
        public static new VmState Empty => new VmState();
    }
}
