// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/edgeGateway:EdgeGateway")]
    public partial class EdgeGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
        /// </summary>
        [Output("configuration")]
        public Output<string> Configuration { get; private set; } = null!;

        /// <summary>
        /// IP address of edge gateway interface which is used as default.
        /// </summary>
        [Output("defaultExternalNetworkIp")]
        public Output<string> DefaultExternalNetworkIp { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable distributed routing
        /// </summary>
        [Output("distributedRouting")]
        public Output<bool?> DistributedRouting { get; private set; } = null!;

        /// <summary>
        /// List of IP addresses set on edge gateway external network interfaces
        /// </summary>
        [Output("externalNetworkIps")]
        public Output<ImmutableArray<string>> ExternalNetworkIps { get; private set; } = null!;

        /// <summary>
        /// One or more blocks with external network information to be attached to this gateway's interface
        /// </summary>
        [Output("externalNetworks")]
        public Output<ImmutableArray<Outputs.EdgeGatewayExternalNetwork>> ExternalNetworks { get; private set; } = null!;

        /// <summary>
        /// Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
        /// </summary>
        [Output("fipsModeEnabled")]
        public Output<bool?> FipsModeEnabled { get; private set; } = null!;

        /// <summary>
        /// 'accept' or 'deny'. Default 'deny'
        /// </summary>
        [Output("fwDefaultRuleAction")]
        public Output<string?> FwDefaultRuleAction { get; private set; } = null!;

        /// <summary>
        /// Enable logging for default rule. Default 'false'
        /// </summary>
        [Output("fwDefaultRuleLoggingEnabled")]
        public Output<bool?> FwDefaultRuleLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable firewall. Default 'true'
        /// </summary>
        [Output("fwEnabled")]
        public Output<bool?> FwEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable high availability on this edge gateway
        /// </summary>
        [Output("haEnabled")]
        public Output<bool?> HaEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable load balancer acceleration. (Disabled by default)
        /// </summary>
        [Output("lbAccelerationEnabled")]
        public Output<bool?> LbAccelerationEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable load balancing. (Disabled by default)
        /// </summary>
        [Output("lbEnabled")]
        public Output<bool?> LbEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable load balancer logging. (Disabled by default)
        /// </summary>
        [Output("lbLoggingEnabled")]
        public Output<bool?> LbLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        /// </summary>
        [Output("lbLoglevel")]
        public Output<string?> LbLoglevel { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
        /// </summary>
        [Output("useDefaultRouteForDnsRelay")]
        public Output<bool> UseDefaultRouteForDnsRelay { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeGateway(string name, EdgeGatewayArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/edgeGateway:EdgeGateway", name, args ?? new EdgeGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeGateway(string name, Input<string> id, EdgeGatewayState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/edgeGateway:EdgeGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeGateway Get(string name, Input<string> id, EdgeGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeGateway(name, id, state, options);
        }
    }

    public sealed class EdgeGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
        /// </summary>
        [Input("configuration", required: true)]
        public Input<string> Configuration { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable distributed routing
        /// </summary>
        [Input("distributedRouting")]
        public Input<bool>? DistributedRouting { get; set; }

        [Input("externalNetworks", required: true)]
        private InputList<Inputs.EdgeGatewayExternalNetworkArgs>? _externalNetworks;

        /// <summary>
        /// One or more blocks with external network information to be attached to this gateway's interface
        /// </summary>
        public InputList<Inputs.EdgeGatewayExternalNetworkArgs> ExternalNetworks
        {
            get => _externalNetworks ?? (_externalNetworks = new InputList<Inputs.EdgeGatewayExternalNetworkArgs>());
            set => _externalNetworks = value;
        }

        /// <summary>
        /// Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
        /// </summary>
        [Input("fipsModeEnabled")]
        public Input<bool>? FipsModeEnabled { get; set; }

        /// <summary>
        /// 'accept' or 'deny'. Default 'deny'
        /// </summary>
        [Input("fwDefaultRuleAction")]
        public Input<string>? FwDefaultRuleAction { get; set; }

        /// <summary>
        /// Enable logging for default rule. Default 'false'
        /// </summary>
        [Input("fwDefaultRuleLoggingEnabled")]
        public Input<bool>? FwDefaultRuleLoggingEnabled { get; set; }

        /// <summary>
        /// Enable firewall. Default 'true'
        /// </summary>
        [Input("fwEnabled")]
        public Input<bool>? FwEnabled { get; set; }

        /// <summary>
        /// Enable high availability on this edge gateway
        /// </summary>
        [Input("haEnabled")]
        public Input<bool>? HaEnabled { get; set; }

        /// <summary>
        /// Enable load balancer acceleration. (Disabled by default)
        /// </summary>
        [Input("lbAccelerationEnabled")]
        public Input<bool>? LbAccelerationEnabled { get; set; }

        /// <summary>
        /// Enable load balancing. (Disabled by default)
        /// </summary>
        [Input("lbEnabled")]
        public Input<bool>? LbEnabled { get; set; }

        /// <summary>
        /// Enable load balancer logging. (Disabled by default)
        /// </summary>
        [Input("lbLoggingEnabled")]
        public Input<bool>? LbLoggingEnabled { get; set; }

        /// <summary>
        /// Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        /// </summary>
        [Input("lbLoglevel")]
        public Input<string>? LbLoglevel { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
        /// </summary>
        [Input("useDefaultRouteForDnsRelay")]
        public Input<bool>? UseDefaultRouteForDnsRelay { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public EdgeGatewayArgs()
        {
        }
        public static new EdgeGatewayArgs Empty => new EdgeGatewayArgs();
    }

    public sealed class EdgeGatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
        /// </summary>
        [Input("configuration")]
        public Input<string>? Configuration { get; set; }

        /// <summary>
        /// IP address of edge gateway interface which is used as default.
        /// </summary>
        [Input("defaultExternalNetworkIp")]
        public Input<string>? DefaultExternalNetworkIp { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable distributed routing
        /// </summary>
        [Input("distributedRouting")]
        public Input<bool>? DistributedRouting { get; set; }

        [Input("externalNetworkIps")]
        private InputList<string>? _externalNetworkIps;

        /// <summary>
        /// List of IP addresses set on edge gateway external network interfaces
        /// </summary>
        public InputList<string> ExternalNetworkIps
        {
            get => _externalNetworkIps ?? (_externalNetworkIps = new InputList<string>());
            set => _externalNetworkIps = value;
        }

        [Input("externalNetworks")]
        private InputList<Inputs.EdgeGatewayExternalNetworkGetArgs>? _externalNetworks;

        /// <summary>
        /// One or more blocks with external network information to be attached to this gateway's interface
        /// </summary>
        public InputList<Inputs.EdgeGatewayExternalNetworkGetArgs> ExternalNetworks
        {
            get => _externalNetworks ?? (_externalNetworks = new InputList<Inputs.EdgeGatewayExternalNetworkGetArgs>());
            set => _externalNetworks = value;
        }

        /// <summary>
        /// Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
        /// </summary>
        [Input("fipsModeEnabled")]
        public Input<bool>? FipsModeEnabled { get; set; }

        /// <summary>
        /// 'accept' or 'deny'. Default 'deny'
        /// </summary>
        [Input("fwDefaultRuleAction")]
        public Input<string>? FwDefaultRuleAction { get; set; }

        /// <summary>
        /// Enable logging for default rule. Default 'false'
        /// </summary>
        [Input("fwDefaultRuleLoggingEnabled")]
        public Input<bool>? FwDefaultRuleLoggingEnabled { get; set; }

        /// <summary>
        /// Enable firewall. Default 'true'
        /// </summary>
        [Input("fwEnabled")]
        public Input<bool>? FwEnabled { get; set; }

        /// <summary>
        /// Enable high availability on this edge gateway
        /// </summary>
        [Input("haEnabled")]
        public Input<bool>? HaEnabled { get; set; }

        /// <summary>
        /// Enable load balancer acceleration. (Disabled by default)
        /// </summary>
        [Input("lbAccelerationEnabled")]
        public Input<bool>? LbAccelerationEnabled { get; set; }

        /// <summary>
        /// Enable load balancing. (Disabled by default)
        /// </summary>
        [Input("lbEnabled")]
        public Input<bool>? LbEnabled { get; set; }

        /// <summary>
        /// Enable load balancer logging. (Disabled by default)
        /// </summary>
        [Input("lbLoggingEnabled")]
        public Input<bool>? LbLoggingEnabled { get; set; }

        /// <summary>
        /// Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        /// </summary>
        [Input("lbLoglevel")]
        public Input<string>? LbLoglevel { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        /// different organizations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
        /// </summary>
        [Input("useDefaultRouteForDnsRelay")]
        public Input<bool>? UseDefaultRouteForDnsRelay { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public EdgeGatewayState()
        {
        }
        public static new EdgeGatewayState Empty => new EdgeGatewayState();
    }
}
