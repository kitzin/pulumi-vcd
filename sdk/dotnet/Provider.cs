// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    /// <summary>
    /// The provider type for the vcd package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [VcdResourceType("pulumi:providers:vcd")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        /// </summary>
        [Output("apiToken")]
        public Output<string?> ApiToken { get; private set; } = null!;

        /// <summary>
        /// 'integrated', 'saml_adfs', 'token', and 'api_token' are the only ones supported now. 'integrated' is default.
        /// </summary>
        [Output("authType")]
        public Output<string?> AuthType { get; private set; } = null!;

        /// <summary>
        /// Defines the import separation string to be used with 'terraform import'
        /// </summary>
        [Output("importSeparator")]
        public Output<string?> ImportSeparator { get; private set; } = null!;

        /// <summary>
        /// Defines the full name of the logging file for API calls (requires 'logging')
        /// </summary>
        [Output("loggingFile")]
        public Output<string?> LoggingFile { get; private set; } = null!;

        /// <summary>
        /// The VCD Org for API operations
        /// </summary>
        [Output("org")]
        public Output<string> Org { get; private set; } = null!;

        /// <summary>
        /// The user password for VCD API operations.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
        /// </summary>
        [Output("samlAdfsRptId")]
        public Output<string?> SamlAdfsRptId { get; private set; } = null!;

        /// <summary>
        /// The VCD Org for user authentication
        /// </summary>
        [Output("sysorg")]
        public Output<string?> Sysorg { get; private set; } = null!;

        /// <summary>
        /// The token used instead of username/password for VCD API operations.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// The VCD url for VCD API operations.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The user name for VCD API operations.
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;

        /// <summary>
        /// The VDC for API operations
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("vcd", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set, VCDClient will permit unverifiable SSL certificates.
        /// </summary>
        [Input("allowUnverifiedSsl", json: true)]
        public Input<bool>? AllowUnverifiedSsl { get; set; }

        /// <summary>
        /// The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
        /// </summary>
        [Input("apiToken")]
        public Input<string>? ApiToken { get; set; }

        /// <summary>
        /// 'integrated', 'saml_adfs', 'token', and 'api_token' are the only ones supported now. 'integrated' is default.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Defines the import separation string to be used with 'terraform import'
        /// </summary>
        [Input("importSeparator")]
        public Input<string>? ImportSeparator { get; set; }

        /// <summary>
        /// If set, it will enable logging of API requests and responses
        /// </summary>
        [Input("logging", json: true)]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// Defines the full name of the logging file for API calls (requires 'logging')
        /// </summary>
        [Input("loggingFile")]
        public Input<string>? LoggingFile { get; set; }

        /// <summary>
        /// Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)
        /// </summary>
        [Input("maxRetryTimeout", json: true)]
        public Input<int>? MaxRetryTimeout { get; set; }

        /// <summary>
        /// The VCD Org for API operations
        /// </summary>
        [Input("org", required: true)]
        public Input<string> Org { get; set; } = null!;

        /// <summary>
        /// The user password for VCD API operations.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
        /// </summary>
        [Input("samlAdfsRptId")]
        public Input<string>? SamlAdfsRptId { get; set; }

        /// <summary>
        /// The VCD Org for user authentication
        /// </summary>
        [Input("sysorg")]
        public Input<string>? Sysorg { get; set; }

        /// <summary>
        /// The token used instead of username/password for VCD API operations.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// The VCD url for VCD API operations.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// The user name for VCD API operations.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// The VDC for API operations
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
