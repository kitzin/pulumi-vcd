// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxvDhcpRelay struct {
	pulumi.CustomResourceState

	// A set of IP domain names of DHCP servers
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// Edge gateway name for DHCP relay settings
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// A set of IP address of DHCP servers
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// A set of IP set names which consist DHCP servers
	IpSets pulumi.StringArrayOutput `pulumi:"ipSets"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org         pulumi.StringPtrOutput             `pulumi:"org"`
	RelayAgents NsxvDhcpRelayRelayAgentArrayOutput `pulumi:"relayAgents"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewNsxvDhcpRelay registers a new resource with the given unique name, arguments, and options.
func NewNsxvDhcpRelay(ctx *pulumi.Context,
	name string, args *NsxvDhcpRelayArgs, opts ...pulumi.ResourceOption) (*NsxvDhcpRelay, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.RelayAgents == nil {
		return nil, errors.New("invalid value for required argument 'RelayAgents'")
	}
	var resource NsxvDhcpRelay
	err := ctx.RegisterResource("vcd:index/nsxvDhcpRelay:NsxvDhcpRelay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxvDhcpRelay gets an existing NsxvDhcpRelay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxvDhcpRelay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxvDhcpRelayState, opts ...pulumi.ResourceOption) (*NsxvDhcpRelay, error) {
	var resource NsxvDhcpRelay
	err := ctx.ReadResource("vcd:index/nsxvDhcpRelay:NsxvDhcpRelay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxvDhcpRelay resources.
type nsxvDhcpRelayState struct {
	// A set of IP domain names of DHCP servers
	DomainNames []string `pulumi:"domainNames"`
	// Edge gateway name for DHCP relay settings
	EdgeGateway *string `pulumi:"edgeGateway"`
	// A set of IP address of DHCP servers
	IpAddresses []string `pulumi:"ipAddresses"`
	// A set of IP set names which consist DHCP servers
	IpSets []string `pulumi:"ipSets"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org         *string                   `pulumi:"org"`
	RelayAgents []NsxvDhcpRelayRelayAgent `pulumi:"relayAgents"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type NsxvDhcpRelayState struct {
	// A set of IP domain names of DHCP servers
	DomainNames pulumi.StringArrayInput
	// Edge gateway name for DHCP relay settings
	EdgeGateway pulumi.StringPtrInput
	// A set of IP address of DHCP servers
	IpAddresses pulumi.StringArrayInput
	// A set of IP set names which consist DHCP servers
	IpSets pulumi.StringArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org         pulumi.StringPtrInput
	RelayAgents NsxvDhcpRelayRelayAgentArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NsxvDhcpRelayState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvDhcpRelayState)(nil)).Elem()
}

type nsxvDhcpRelayArgs struct {
	// A set of IP domain names of DHCP servers
	DomainNames []string `pulumi:"domainNames"`
	// Edge gateway name for DHCP relay settings
	EdgeGateway string `pulumi:"edgeGateway"`
	// A set of IP address of DHCP servers
	IpAddresses []string `pulumi:"ipAddresses"`
	// A set of IP set names which consist DHCP servers
	IpSets []string `pulumi:"ipSets"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org         *string                   `pulumi:"org"`
	RelayAgents []NsxvDhcpRelayRelayAgent `pulumi:"relayAgents"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxvDhcpRelay resource.
type NsxvDhcpRelayArgs struct {
	// A set of IP domain names of DHCP servers
	DomainNames pulumi.StringArrayInput
	// Edge gateway name for DHCP relay settings
	EdgeGateway pulumi.StringInput
	// A set of IP address of DHCP servers
	IpAddresses pulumi.StringArrayInput
	// A set of IP set names which consist DHCP servers
	IpSets pulumi.StringArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org         pulumi.StringPtrInput
	RelayAgents NsxvDhcpRelayRelayAgentArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NsxvDhcpRelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvDhcpRelayArgs)(nil)).Elem()
}

type NsxvDhcpRelayInput interface {
	pulumi.Input

	ToNsxvDhcpRelayOutput() NsxvDhcpRelayOutput
	ToNsxvDhcpRelayOutputWithContext(ctx context.Context) NsxvDhcpRelayOutput
}

func (*NsxvDhcpRelay) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvDhcpRelay)(nil)).Elem()
}

func (i *NsxvDhcpRelay) ToNsxvDhcpRelayOutput() NsxvDhcpRelayOutput {
	return i.ToNsxvDhcpRelayOutputWithContext(context.Background())
}

func (i *NsxvDhcpRelay) ToNsxvDhcpRelayOutputWithContext(ctx context.Context) NsxvDhcpRelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDhcpRelayOutput)
}

// NsxvDhcpRelayArrayInput is an input type that accepts NsxvDhcpRelayArray and NsxvDhcpRelayArrayOutput values.
// You can construct a concrete instance of `NsxvDhcpRelayArrayInput` via:
//
//	NsxvDhcpRelayArray{ NsxvDhcpRelayArgs{...} }
type NsxvDhcpRelayArrayInput interface {
	pulumi.Input

	ToNsxvDhcpRelayArrayOutput() NsxvDhcpRelayArrayOutput
	ToNsxvDhcpRelayArrayOutputWithContext(context.Context) NsxvDhcpRelayArrayOutput
}

type NsxvDhcpRelayArray []NsxvDhcpRelayInput

func (NsxvDhcpRelayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvDhcpRelay)(nil)).Elem()
}

func (i NsxvDhcpRelayArray) ToNsxvDhcpRelayArrayOutput() NsxvDhcpRelayArrayOutput {
	return i.ToNsxvDhcpRelayArrayOutputWithContext(context.Background())
}

func (i NsxvDhcpRelayArray) ToNsxvDhcpRelayArrayOutputWithContext(ctx context.Context) NsxvDhcpRelayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDhcpRelayArrayOutput)
}

// NsxvDhcpRelayMapInput is an input type that accepts NsxvDhcpRelayMap and NsxvDhcpRelayMapOutput values.
// You can construct a concrete instance of `NsxvDhcpRelayMapInput` via:
//
//	NsxvDhcpRelayMap{ "key": NsxvDhcpRelayArgs{...} }
type NsxvDhcpRelayMapInput interface {
	pulumi.Input

	ToNsxvDhcpRelayMapOutput() NsxvDhcpRelayMapOutput
	ToNsxvDhcpRelayMapOutputWithContext(context.Context) NsxvDhcpRelayMapOutput
}

type NsxvDhcpRelayMap map[string]NsxvDhcpRelayInput

func (NsxvDhcpRelayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvDhcpRelay)(nil)).Elem()
}

func (i NsxvDhcpRelayMap) ToNsxvDhcpRelayMapOutput() NsxvDhcpRelayMapOutput {
	return i.ToNsxvDhcpRelayMapOutputWithContext(context.Background())
}

func (i NsxvDhcpRelayMap) ToNsxvDhcpRelayMapOutputWithContext(ctx context.Context) NsxvDhcpRelayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDhcpRelayMapOutput)
}

type NsxvDhcpRelayOutput struct{ *pulumi.OutputState }

func (NsxvDhcpRelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvDhcpRelay)(nil)).Elem()
}

func (o NsxvDhcpRelayOutput) ToNsxvDhcpRelayOutput() NsxvDhcpRelayOutput {
	return o
}

func (o NsxvDhcpRelayOutput) ToNsxvDhcpRelayOutputWithContext(ctx context.Context) NsxvDhcpRelayOutput {
	return o
}

// A set of IP domain names of DHCP servers
func (o NsxvDhcpRelayOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// Edge gateway name for DHCP relay settings
func (o NsxvDhcpRelayOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// A set of IP address of DHCP servers
func (o NsxvDhcpRelayOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// A set of IP set names which consist DHCP servers
func (o NsxvDhcpRelayOutput) IpSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) pulumi.StringArrayOutput { return v.IpSets }).(pulumi.StringArrayOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxvDhcpRelayOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

func (o NsxvDhcpRelayOutput) RelayAgents() NsxvDhcpRelayRelayAgentArrayOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) NsxvDhcpRelayRelayAgentArrayOutput { return v.RelayAgents }).(NsxvDhcpRelayRelayAgentArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o NsxvDhcpRelayOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDhcpRelay) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type NsxvDhcpRelayArrayOutput struct{ *pulumi.OutputState }

func (NsxvDhcpRelayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvDhcpRelay)(nil)).Elem()
}

func (o NsxvDhcpRelayArrayOutput) ToNsxvDhcpRelayArrayOutput() NsxvDhcpRelayArrayOutput {
	return o
}

func (o NsxvDhcpRelayArrayOutput) ToNsxvDhcpRelayArrayOutputWithContext(ctx context.Context) NsxvDhcpRelayArrayOutput {
	return o
}

func (o NsxvDhcpRelayArrayOutput) Index(i pulumi.IntInput) NsxvDhcpRelayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxvDhcpRelay {
		return vs[0].([]*NsxvDhcpRelay)[vs[1].(int)]
	}).(NsxvDhcpRelayOutput)
}

type NsxvDhcpRelayMapOutput struct{ *pulumi.OutputState }

func (NsxvDhcpRelayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvDhcpRelay)(nil)).Elem()
}

func (o NsxvDhcpRelayMapOutput) ToNsxvDhcpRelayMapOutput() NsxvDhcpRelayMapOutput {
	return o
}

func (o NsxvDhcpRelayMapOutput) ToNsxvDhcpRelayMapOutputWithContext(ctx context.Context) NsxvDhcpRelayMapOutput {
	return o
}

func (o NsxvDhcpRelayMapOutput) MapIndex(k pulumi.StringInput) NsxvDhcpRelayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxvDhcpRelay {
		return vs[0].(map[string]*NsxvDhcpRelay)[vs[1].(string)]
	}).(NsxvDhcpRelayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDhcpRelayInput)(nil)).Elem(), &NsxvDhcpRelay{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDhcpRelayArrayInput)(nil)).Elem(), NsxvDhcpRelayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDhcpRelayMapInput)(nil)).Elem(), NsxvDhcpRelayMap{})
	pulumi.RegisterOutputType(NsxvDhcpRelayOutput{})
	pulumi.RegisterOutputType(NsxvDhcpRelayArrayOutput{})
	pulumi.RegisterOutputType(NsxvDhcpRelayMapOutput{})
}
