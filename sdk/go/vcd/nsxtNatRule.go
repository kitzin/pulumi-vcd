// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtNatRule struct {
	pulumi.CustomResourceState

	// Application Port Profile to apply for this rule
	AppPortProfileId pulumi.StringPtrOutput `pulumi:"appPortProfileId"`
	// Description of NAT rule
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
	DnatExternalPort pulumi.StringPtrOutput `pulumi:"dnatExternalPort"`
	// Edge gateway name in which NAT Rule is located
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Enables or disables this rule
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// IP address or CIDR of external network
	ExternalAddress pulumi.StringPtrOutput `pulumi:"externalAddress"`
	// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
	// 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
	FirewallMatch pulumi.StringOutput `pulumi:"firewallMatch"`
	// IP address or CIDR of the virtual machines for which you are configuring NAT
	InternalAddress pulumi.StringPtrOutput `pulumi:"internalAddress"`
	// Enable logging when this rule is applied
	Logging pulumi.BoolPtrOutput `pulumi:"logging"`
	// Name of NAT rule
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
	// higher precedence for this rule.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
	RuleType pulumi.StringOutput `pulumi:"ruleType"`
	// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
	// or an IP address range in CIDR format.
	SnatDestinationAddress pulumi.StringPtrOutput `pulumi:"snatDestinationAddress"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtNatRule registers a new resource with the given unique name, arguments, and options.
func NewNsxtNatRule(ctx *pulumi.Context,
	name string, args *NsxtNatRuleArgs, opts ...pulumi.ResourceOption) (*NsxtNatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	var resource NsxtNatRule
	err := ctx.RegisterResource("vcd:index/nsxtNatRule:NsxtNatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtNatRule gets an existing NsxtNatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtNatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtNatRuleState, opts ...pulumi.ResourceOption) (*NsxtNatRule, error) {
	var resource NsxtNatRule
	err := ctx.ReadResource("vcd:index/nsxtNatRule:NsxtNatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtNatRule resources.
type nsxtNatRuleState struct {
	// Application Port Profile to apply for this rule
	AppPortProfileId *string `pulumi:"appPortProfileId"`
	// Description of NAT rule
	Description *string `pulumi:"description"`
	// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
	DnatExternalPort *string `pulumi:"dnatExternalPort"`
	// Edge gateway name in which NAT Rule is located
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Enables or disables this rule
	Enabled *bool `pulumi:"enabled"`
	// IP address or CIDR of external network
	ExternalAddress *string `pulumi:"externalAddress"`
	// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
	// 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
	FirewallMatch *string `pulumi:"firewallMatch"`
	// IP address or CIDR of the virtual machines for which you are configuring NAT
	InternalAddress *string `pulumi:"internalAddress"`
	// Enable logging when this rule is applied
	Logging *bool `pulumi:"logging"`
	// Name of NAT rule
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
	// higher precedence for this rule.
	Priority *int `pulumi:"priority"`
	// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
	RuleType *string `pulumi:"ruleType"`
	// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
	// or an IP address range in CIDR format.
	SnatDestinationAddress *string `pulumi:"snatDestinationAddress"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

type NsxtNatRuleState struct {
	// Application Port Profile to apply for this rule
	AppPortProfileId pulumi.StringPtrInput
	// Description of NAT rule
	Description pulumi.StringPtrInput
	// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
	DnatExternalPort pulumi.StringPtrInput
	// Edge gateway name in which NAT Rule is located
	EdgeGatewayId pulumi.StringPtrInput
	// Enables or disables this rule
	Enabled pulumi.BoolPtrInput
	// IP address or CIDR of external network
	ExternalAddress pulumi.StringPtrInput
	// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
	// 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
	FirewallMatch pulumi.StringPtrInput
	// IP address or CIDR of the virtual machines for which you are configuring NAT
	InternalAddress pulumi.StringPtrInput
	// Enable logging when this rule is applied
	Logging pulumi.BoolPtrInput
	// Name of NAT rule
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
	// higher precedence for this rule.
	Priority pulumi.IntPtrInput
	// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
	RuleType pulumi.StringPtrInput
	// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
	// or an IP address range in CIDR format.
	SnatDestinationAddress pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtNatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNatRuleState)(nil)).Elem()
}

type nsxtNatRuleArgs struct {
	// Application Port Profile to apply for this rule
	AppPortProfileId *string `pulumi:"appPortProfileId"`
	// Description of NAT rule
	Description *string `pulumi:"description"`
	// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
	DnatExternalPort *string `pulumi:"dnatExternalPort"`
	// Edge gateway name in which NAT Rule is located
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Enables or disables this rule
	Enabled *bool `pulumi:"enabled"`
	// IP address or CIDR of external network
	ExternalAddress *string `pulumi:"externalAddress"`
	// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
	// 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
	FirewallMatch *string `pulumi:"firewallMatch"`
	// IP address or CIDR of the virtual machines for which you are configuring NAT
	InternalAddress *string `pulumi:"internalAddress"`
	// Enable logging when this rule is applied
	Logging *bool `pulumi:"logging"`
	// Name of NAT rule
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
	// higher precedence for this rule.
	Priority *int `pulumi:"priority"`
	// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
	RuleType string `pulumi:"ruleType"`
	// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
	// or an IP address range in CIDR format.
	SnatDestinationAddress *string `pulumi:"snatDestinationAddress"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtNatRule resource.
type NsxtNatRuleArgs struct {
	// Application Port Profile to apply for this rule
	AppPortProfileId pulumi.StringPtrInput
	// Description of NAT rule
	Description pulumi.StringPtrInput
	// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
	DnatExternalPort pulumi.StringPtrInput
	// Edge gateway name in which NAT Rule is located
	EdgeGatewayId pulumi.StringInput
	// Enables or disables this rule
	Enabled pulumi.BoolPtrInput
	// IP address or CIDR of external network
	ExternalAddress pulumi.StringPtrInput
	// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
	// 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
	FirewallMatch pulumi.StringPtrInput
	// IP address or CIDR of the virtual machines for which you are configuring NAT
	InternalAddress pulumi.StringPtrInput
	// Enable logging when this rule is applied
	Logging pulumi.BoolPtrInput
	// Name of NAT rule
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
	// higher precedence for this rule.
	Priority pulumi.IntPtrInput
	// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
	RuleType pulumi.StringInput
	// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
	// or an IP address range in CIDR format.
	SnatDestinationAddress pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtNatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNatRuleArgs)(nil)).Elem()
}

type NsxtNatRuleInput interface {
	pulumi.Input

	ToNsxtNatRuleOutput() NsxtNatRuleOutput
	ToNsxtNatRuleOutputWithContext(ctx context.Context) NsxtNatRuleOutput
}

func (*NsxtNatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNatRule)(nil)).Elem()
}

func (i *NsxtNatRule) ToNsxtNatRuleOutput() NsxtNatRuleOutput {
	return i.ToNsxtNatRuleOutputWithContext(context.Background())
}

func (i *NsxtNatRule) ToNsxtNatRuleOutputWithContext(ctx context.Context) NsxtNatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNatRuleOutput)
}

// NsxtNatRuleArrayInput is an input type that accepts NsxtNatRuleArray and NsxtNatRuleArrayOutput values.
// You can construct a concrete instance of `NsxtNatRuleArrayInput` via:
//
//	NsxtNatRuleArray{ NsxtNatRuleArgs{...} }
type NsxtNatRuleArrayInput interface {
	pulumi.Input

	ToNsxtNatRuleArrayOutput() NsxtNatRuleArrayOutput
	ToNsxtNatRuleArrayOutputWithContext(context.Context) NsxtNatRuleArrayOutput
}

type NsxtNatRuleArray []NsxtNatRuleInput

func (NsxtNatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNatRule)(nil)).Elem()
}

func (i NsxtNatRuleArray) ToNsxtNatRuleArrayOutput() NsxtNatRuleArrayOutput {
	return i.ToNsxtNatRuleArrayOutputWithContext(context.Background())
}

func (i NsxtNatRuleArray) ToNsxtNatRuleArrayOutputWithContext(ctx context.Context) NsxtNatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNatRuleArrayOutput)
}

// NsxtNatRuleMapInput is an input type that accepts NsxtNatRuleMap and NsxtNatRuleMapOutput values.
// You can construct a concrete instance of `NsxtNatRuleMapInput` via:
//
//	NsxtNatRuleMap{ "key": NsxtNatRuleArgs{...} }
type NsxtNatRuleMapInput interface {
	pulumi.Input

	ToNsxtNatRuleMapOutput() NsxtNatRuleMapOutput
	ToNsxtNatRuleMapOutputWithContext(context.Context) NsxtNatRuleMapOutput
}

type NsxtNatRuleMap map[string]NsxtNatRuleInput

func (NsxtNatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNatRule)(nil)).Elem()
}

func (i NsxtNatRuleMap) ToNsxtNatRuleMapOutput() NsxtNatRuleMapOutput {
	return i.ToNsxtNatRuleMapOutputWithContext(context.Background())
}

func (i NsxtNatRuleMap) ToNsxtNatRuleMapOutputWithContext(ctx context.Context) NsxtNatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNatRuleMapOutput)
}

type NsxtNatRuleOutput struct{ *pulumi.OutputState }

func (NsxtNatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNatRule)(nil)).Elem()
}

func (o NsxtNatRuleOutput) ToNsxtNatRuleOutput() NsxtNatRuleOutput {
	return o
}

func (o NsxtNatRuleOutput) ToNsxtNatRuleOutputWithContext(ctx context.Context) NsxtNatRuleOutput {
	return o
}

// Application Port Profile to apply for this rule
func (o NsxtNatRuleOutput) AppPortProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.AppPortProfileId }).(pulumi.StringPtrOutput)
}

// Description of NAT rule
func (o NsxtNatRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
func (o NsxtNatRuleOutput) DnatExternalPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.DnatExternalPort }).(pulumi.StringPtrOutput)
}

// Edge gateway name in which NAT Rule is located
func (o NsxtNatRuleOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Enables or disables this rule
func (o NsxtNatRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// IP address or CIDR of external network
func (o NsxtNatRuleOutput) ExternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.ExternalAddress }).(pulumi.StringPtrOutput)
}

// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
// 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
func (o NsxtNatRuleOutput) FirewallMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.FirewallMatch }).(pulumi.StringOutput)
}

// IP address or CIDR of the virtual machines for which you are configuring NAT
func (o NsxtNatRuleOutput) InternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.InternalAddress }).(pulumi.StringPtrOutput)
}

// Enable logging when this rule is applied
func (o NsxtNatRuleOutput) Logging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.BoolPtrOutput { return v.Logging }).(pulumi.BoolPtrOutput)
}

// Name of NAT rule
func (o NsxtNatRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxtNatRuleOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
// higher precedence for this rule.
func (o NsxtNatRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
func (o NsxtNatRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
// or an IP address range in CIDR format.
func (o NsxtNatRuleOutput) SnatDestinationAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.SnatDestinationAddress }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
func (o NsxtNatRuleOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtNatRuleArrayOutput struct{ *pulumi.OutputState }

func (NsxtNatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNatRule)(nil)).Elem()
}

func (o NsxtNatRuleArrayOutput) ToNsxtNatRuleArrayOutput() NsxtNatRuleArrayOutput {
	return o
}

func (o NsxtNatRuleArrayOutput) ToNsxtNatRuleArrayOutputWithContext(ctx context.Context) NsxtNatRuleArrayOutput {
	return o
}

func (o NsxtNatRuleArrayOutput) Index(i pulumi.IntInput) NsxtNatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtNatRule {
		return vs[0].([]*NsxtNatRule)[vs[1].(int)]
	}).(NsxtNatRuleOutput)
}

type NsxtNatRuleMapOutput struct{ *pulumi.OutputState }

func (NsxtNatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNatRule)(nil)).Elem()
}

func (o NsxtNatRuleMapOutput) ToNsxtNatRuleMapOutput() NsxtNatRuleMapOutput {
	return o
}

func (o NsxtNatRuleMapOutput) ToNsxtNatRuleMapOutputWithContext(ctx context.Context) NsxtNatRuleMapOutput {
	return o
}

func (o NsxtNatRuleMapOutput) MapIndex(k pulumi.StringInput) NsxtNatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtNatRule {
		return vs[0].(map[string]*NsxtNatRule)[vs[1].(string)]
	}).(NsxtNatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNatRuleInput)(nil)).Elem(), &NsxtNatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNatRuleArrayInput)(nil)).Elem(), NsxtNatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNatRuleMapInput)(nil)).Elem(), NsxtNatRuleMap{})
	pulumi.RegisterOutputType(NsxtNatRuleOutput{})
	pulumi.RegisterOutputType(NsxtNatRuleArrayOutput{})
	pulumi.RegisterOutputType(NsxtNatRuleMapOutput{})
}
