// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CatalogAccessControl struct {
	pulumi.CustomResourceState

	// The ID of Catalog to use
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone
	// is set
	EveryoneAccessLevel pulumi.StringPtrOutput `pulumi:"everyoneAccessLevel"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Whether the Catalog is shared with everyone
	SharedWithEveryone pulumi.BoolOutput                         `pulumi:"sharedWithEveryone"`
	SharedWiths        CatalogAccessControlSharedWithArrayOutput `pulumi:"sharedWiths"`
}

// NewCatalogAccessControl registers a new resource with the given unique name, arguments, and options.
func NewCatalogAccessControl(ctx *pulumi.Context,
	name string, args *CatalogAccessControlArgs, opts ...pulumi.ResourceOption) (*CatalogAccessControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.SharedWithEveryone == nil {
		return nil, errors.New("invalid value for required argument 'SharedWithEveryone'")
	}
	var resource CatalogAccessControl
	err := ctx.RegisterResource("vcd:index/catalogAccessControl:CatalogAccessControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogAccessControl gets an existing CatalogAccessControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogAccessControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogAccessControlState, opts ...pulumi.ResourceOption) (*CatalogAccessControl, error) {
	var resource CatalogAccessControl
	err := ctx.ReadResource("vcd:index/catalogAccessControl:CatalogAccessControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogAccessControl resources.
type catalogAccessControlState struct {
	// The ID of Catalog to use
	CatalogId *string `pulumi:"catalogId"`
	// Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone
	// is set
	EveryoneAccessLevel *string `pulumi:"everyoneAccessLevel"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Whether the Catalog is shared with everyone
	SharedWithEveryone *bool                            `pulumi:"sharedWithEveryone"`
	SharedWiths        []CatalogAccessControlSharedWith `pulumi:"sharedWiths"`
}

type CatalogAccessControlState struct {
	// The ID of Catalog to use
	CatalogId pulumi.StringPtrInput
	// Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone
	// is set
	EveryoneAccessLevel pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Whether the Catalog is shared with everyone
	SharedWithEveryone pulumi.BoolPtrInput
	SharedWiths        CatalogAccessControlSharedWithArrayInput
}

func (CatalogAccessControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogAccessControlState)(nil)).Elem()
}

type catalogAccessControlArgs struct {
	// The ID of Catalog to use
	CatalogId string `pulumi:"catalogId"`
	// Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone
	// is set
	EveryoneAccessLevel *string `pulumi:"everyoneAccessLevel"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Whether the Catalog is shared with everyone
	SharedWithEveryone bool                             `pulumi:"sharedWithEveryone"`
	SharedWiths        []CatalogAccessControlSharedWith `pulumi:"sharedWiths"`
}

// The set of arguments for constructing a CatalogAccessControl resource.
type CatalogAccessControlArgs struct {
	// The ID of Catalog to use
	CatalogId pulumi.StringInput
	// Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone
	// is set
	EveryoneAccessLevel pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Whether the Catalog is shared with everyone
	SharedWithEveryone pulumi.BoolInput
	SharedWiths        CatalogAccessControlSharedWithArrayInput
}

func (CatalogAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogAccessControlArgs)(nil)).Elem()
}

type CatalogAccessControlInput interface {
	pulumi.Input

	ToCatalogAccessControlOutput() CatalogAccessControlOutput
	ToCatalogAccessControlOutputWithContext(ctx context.Context) CatalogAccessControlOutput
}

func (*CatalogAccessControl) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogAccessControl)(nil)).Elem()
}

func (i *CatalogAccessControl) ToCatalogAccessControlOutput() CatalogAccessControlOutput {
	return i.ToCatalogAccessControlOutputWithContext(context.Background())
}

func (i *CatalogAccessControl) ToCatalogAccessControlOutputWithContext(ctx context.Context) CatalogAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogAccessControlOutput)
}

// CatalogAccessControlArrayInput is an input type that accepts CatalogAccessControlArray and CatalogAccessControlArrayOutput values.
// You can construct a concrete instance of `CatalogAccessControlArrayInput` via:
//
//	CatalogAccessControlArray{ CatalogAccessControlArgs{...} }
type CatalogAccessControlArrayInput interface {
	pulumi.Input

	ToCatalogAccessControlArrayOutput() CatalogAccessControlArrayOutput
	ToCatalogAccessControlArrayOutputWithContext(context.Context) CatalogAccessControlArrayOutput
}

type CatalogAccessControlArray []CatalogAccessControlInput

func (CatalogAccessControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogAccessControl)(nil)).Elem()
}

func (i CatalogAccessControlArray) ToCatalogAccessControlArrayOutput() CatalogAccessControlArrayOutput {
	return i.ToCatalogAccessControlArrayOutputWithContext(context.Background())
}

func (i CatalogAccessControlArray) ToCatalogAccessControlArrayOutputWithContext(ctx context.Context) CatalogAccessControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogAccessControlArrayOutput)
}

// CatalogAccessControlMapInput is an input type that accepts CatalogAccessControlMap and CatalogAccessControlMapOutput values.
// You can construct a concrete instance of `CatalogAccessControlMapInput` via:
//
//	CatalogAccessControlMap{ "key": CatalogAccessControlArgs{...} }
type CatalogAccessControlMapInput interface {
	pulumi.Input

	ToCatalogAccessControlMapOutput() CatalogAccessControlMapOutput
	ToCatalogAccessControlMapOutputWithContext(context.Context) CatalogAccessControlMapOutput
}

type CatalogAccessControlMap map[string]CatalogAccessControlInput

func (CatalogAccessControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogAccessControl)(nil)).Elem()
}

func (i CatalogAccessControlMap) ToCatalogAccessControlMapOutput() CatalogAccessControlMapOutput {
	return i.ToCatalogAccessControlMapOutputWithContext(context.Background())
}

func (i CatalogAccessControlMap) ToCatalogAccessControlMapOutputWithContext(ctx context.Context) CatalogAccessControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogAccessControlMapOutput)
}

type CatalogAccessControlOutput struct{ *pulumi.OutputState }

func (CatalogAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogAccessControl)(nil)).Elem()
}

func (o CatalogAccessControlOutput) ToCatalogAccessControlOutput() CatalogAccessControlOutput {
	return o
}

func (o CatalogAccessControlOutput) ToCatalogAccessControlOutputWithContext(ctx context.Context) CatalogAccessControlOutput {
	return o
}

// The ID of Catalog to use
func (o CatalogAccessControlOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogAccessControl) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Access level when the Catalog is shared with everyone (only ReadOnly is available). Required when shared_with_everyone
// is set
func (o CatalogAccessControlOutput) EveryoneAccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogAccessControl) pulumi.StringPtrOutput { return v.EveryoneAccessLevel }).(pulumi.StringPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o CatalogAccessControlOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogAccessControl) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Whether the Catalog is shared with everyone
func (o CatalogAccessControlOutput) SharedWithEveryone() pulumi.BoolOutput {
	return o.ApplyT(func(v *CatalogAccessControl) pulumi.BoolOutput { return v.SharedWithEveryone }).(pulumi.BoolOutput)
}

func (o CatalogAccessControlOutput) SharedWiths() CatalogAccessControlSharedWithArrayOutput {
	return o.ApplyT(func(v *CatalogAccessControl) CatalogAccessControlSharedWithArrayOutput { return v.SharedWiths }).(CatalogAccessControlSharedWithArrayOutput)
}

type CatalogAccessControlArrayOutput struct{ *pulumi.OutputState }

func (CatalogAccessControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogAccessControl)(nil)).Elem()
}

func (o CatalogAccessControlArrayOutput) ToCatalogAccessControlArrayOutput() CatalogAccessControlArrayOutput {
	return o
}

func (o CatalogAccessControlArrayOutput) ToCatalogAccessControlArrayOutputWithContext(ctx context.Context) CatalogAccessControlArrayOutput {
	return o
}

func (o CatalogAccessControlArrayOutput) Index(i pulumi.IntInput) CatalogAccessControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogAccessControl {
		return vs[0].([]*CatalogAccessControl)[vs[1].(int)]
	}).(CatalogAccessControlOutput)
}

type CatalogAccessControlMapOutput struct{ *pulumi.OutputState }

func (CatalogAccessControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogAccessControl)(nil)).Elem()
}

func (o CatalogAccessControlMapOutput) ToCatalogAccessControlMapOutput() CatalogAccessControlMapOutput {
	return o
}

func (o CatalogAccessControlMapOutput) ToCatalogAccessControlMapOutputWithContext(ctx context.Context) CatalogAccessControlMapOutput {
	return o
}

func (o CatalogAccessControlMapOutput) MapIndex(k pulumi.StringInput) CatalogAccessControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogAccessControl {
		return vs[0].(map[string]*CatalogAccessControl)[vs[1].(string)]
	}).(CatalogAccessControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogAccessControlInput)(nil)).Elem(), &CatalogAccessControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogAccessControlArrayInput)(nil)).Elem(), CatalogAccessControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogAccessControlMapInput)(nil)).Elem(), CatalogAccessControlMap{})
	pulumi.RegisterOutputType(CatalogAccessControlOutput{})
	pulumi.RegisterOutputType(CatalogAccessControlArrayOutput{})
	pulumi.RegisterOutputType(CatalogAccessControlMapOutput{})
}
