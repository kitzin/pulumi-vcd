// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vm struct {
	pulumi.CustomResourceState

	// Automatically accept EULA if OVA has it
	AcceptAllEulas pulumi.BoolPtrOutput `pulumi:"acceptAllEulas"`
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage pulumi.StringPtrOutput `pulumi:"bootImage"`
	// The URN of the media to use as boot image.
	BootImageId pulumi.StringPtrOutput `pulumi:"bootImageId"`
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName pulumi.StringPtrOutput `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine
	ComputerName pulumi.StringOutput `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores pulumi.IntOutput `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotAddEnabled"`
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit pulumi.IntOutput `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority pulumi.StringOutput `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation pulumi.IntOutput `pulumi:"cpuReservation"`
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares pulumi.IntOutput `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM
	Cpus pulumi.IntOutput `pulumi:"cpus"`
	// Guest customization block
	Customization VmCustomizationOutput `pulumi:"customization"`
	// The VM description
	Description pulumi.StringOutput `pulumi:"description"`
	Disks       VmDiskArrayOutput   `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization pulumi.BoolPtrOutput `pulumi:"exposeHardwareVirtualization"`
	// Key/value settings for guest properties
	GuestProperties pulumi.MapOutput `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion pulumi.StringOutput `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href pulumi.StringOutput `pulumi:"href"`
	// A block will show internal disk details
	InternalDisks VmInternalDiskTypeArrayOutput `pulumi:"internalDisks"`
	// The amount of RAM (in MB) to allocate to the VM
	Memory pulumi.IntOutput `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled pulumi.BoolPtrOutput `pulumi:"memoryHotAddEnabled"`
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority pulumi.StringOutput `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntOutput `pulumi:"memoryReservation"`
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares pulumi.IntOutput `pulumi:"memoryShares"`
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// Metadata entries for the given VM
	MetadataEntries VmMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds pulumi.IntPtrOutput `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used.
	Networks VmNetworkArrayOutput `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Operating System type. Possible values can be found in documentation.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks VmOverrideTemplateDiskArrayOutput `pulumi:"overrideTemplateDisks"`
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId pulumi.StringOutput `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on
	PowerOn pulumi.BoolPtrOutput `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff pulumi.BoolPtrOutput `pulumi:"preventUpdatePowerOff"`
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId pulumi.StringOutput `pulumi:"sizingPolicyId"`
	// Shows the status code of the VM
	Status pulumi.IntOutput `pulumi:"status"`
	// Shows the status of the VM
	StatusText pulumi.StringOutput `pulumi:"statusText"`
	// Storage profile to override the default one
	StorageProfile pulumi.StringOutput `pulumi:"storageProfile"`
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName pulumi.StringOutput `pulumi:"vappName"`
	// The URN of the vApp Template to use
	VappTemplateId pulumi.StringPtrOutput `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate pulumi.StringPtrOutput `pulumi:"vmNameInTemplate"`
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VmType pulumi.StringOutput `pulumi:"vmType"`
}

// NewVm registers a new resource with the given unique name, arguments, and options.
func NewVm(ctx *pulumi.Context,
	name string, args *VmArgs, opts ...pulumi.ResourceOption) (*Vm, error) {
	if args == nil {
		args = &VmArgs{}
	}

	var resource Vm
	err := ctx.RegisterResource("vcd:index/vm:Vm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVm gets an existing Vm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmState, opts ...pulumi.ResourceOption) (*Vm, error) {
	var resource Vm
	err := ctx.ReadResource("vcd:index/vm:Vm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vm resources.
type vmState struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas *bool `pulumi:"acceptAllEulas"`
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage *string `pulumi:"bootImage"`
	// The URN of the media to use as boot image.
	BootImageId *string `pulumi:"bootImageId"`
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine
	ComputerName *string `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores *int `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority *string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation *int `pulumi:"cpuReservation"`
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares *int `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM
	Cpus *int `pulumi:"cpus"`
	// Guest customization block
	Customization *VmCustomization `pulumi:"customization"`
	// The VM description
	Description *string  `pulumi:"description"`
	Disks       []VmDisk `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization *bool `pulumi:"exposeHardwareVirtualization"`
	// Key/value settings for guest properties
	GuestProperties map[string]interface{} `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion *string `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href *string `pulumi:"href"`
	// A block will show internal disk details
	InternalDisks []VmInternalDiskType `pulumi:"internalDisks"`
	// The amount of RAM (in MB) to allocate to the VM
	Memory *int `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority *string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares *int `pulumi:"memoryShares"`
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given VM
	MetadataEntries []VmMetadataEntry `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name *string `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used.
	Networks []VmNetwork `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Operating System type. Possible values can be found in documentation.
	OsType *string `pulumi:"osType"`
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks []VmOverrideTemplateDisk `pulumi:"overrideTemplateDisks"`
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on
	PowerOn *bool `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff *bool `pulumi:"preventUpdatePowerOff"`
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// Shows the status code of the VM
	Status *int `pulumi:"status"`
	// Shows the status of the VM
	StatusText *string `pulumi:"statusText"`
	// Storage profile to override the default one
	StorageProfile *string `pulumi:"storageProfile"`
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName *string `pulumi:"templateName"`
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName *string `pulumi:"vappName"`
	// The URN of the vApp Template to use
	VappTemplateId *string `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate *string `pulumi:"vmNameInTemplate"`
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VmType *string `pulumi:"vmType"`
}

type VmState struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas pulumi.BoolPtrInput
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage pulumi.StringPtrInput
	// The URN of the media to use as boot image.
	BootImageId pulumi.StringPtrInput
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName pulumi.StringPtrInput
	// Computer name to assign to this virtual machine
	ComputerName pulumi.StringPtrInput
	// The number of cores per socket
	CpuCores pulumi.IntPtrInput
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority pulumi.StringPtrInput
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares pulumi.IntPtrInput
	// The number of virtual CPUs to allocate to the VM
	Cpus pulumi.IntPtrInput
	// Guest customization block
	Customization VmCustomizationPtrInput
	// The VM description
	Description pulumi.StringPtrInput
	Disks       VmDiskArrayInput
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization pulumi.BoolPtrInput
	// Key/value settings for guest properties
	GuestProperties pulumi.MapInput
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion pulumi.StringPtrInput
	// VM Hyper Reference
	Href pulumi.StringPtrInput
	// A block will show internal disk details
	InternalDisks VmInternalDiskTypeArrayInput
	// The amount of RAM (in MB) to allocate to the VM
	Memory pulumi.IntPtrInput
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority pulumi.StringPtrInput
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares pulumi.IntPtrInput
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given VM
	MetadataEntries VmMetadataEntryArrayInput
	// A name for the VM, unique within the vApp
	Name pulumi.StringPtrInput
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds pulumi.IntPtrInput
	// A block to define network interface. Multiple can be used.
	Networks VmNetworkArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Operating System type. Possible values can be found in documentation.
	OsType pulumi.StringPtrInput
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks VmOverrideTemplateDiskArrayInput
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId pulumi.StringPtrInput
	// A boolean value stating if this VM should be powered on
	PowerOn pulumi.BoolPtrInput
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff pulumi.BoolPtrInput
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId pulumi.StringPtrInput
	// Shows the status code of the VM
	Status pulumi.IntPtrInput
	// Shows the status of the VM
	StatusText pulumi.StringPtrInput
	// Storage profile to override the default one
	StorageProfile pulumi.StringPtrInput
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName pulumi.StringPtrInput
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName pulumi.StringPtrInput
	// The URN of the vApp Template to use
	VappTemplateId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate pulumi.StringPtrInput
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VmType pulumi.StringPtrInput
}

func (VmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmState)(nil)).Elem()
}

type vmArgs struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas *bool `pulumi:"acceptAllEulas"`
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage *string `pulumi:"bootImage"`
	// The URN of the media to use as boot image.
	BootImageId *string `pulumi:"bootImageId"`
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine
	ComputerName *string `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores *int `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority *string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation *int `pulumi:"cpuReservation"`
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares *int `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM
	Cpus *int `pulumi:"cpus"`
	// Guest customization block
	Customization *VmCustomization `pulumi:"customization"`
	// The VM description
	Description *string  `pulumi:"description"`
	Disks       []VmDisk `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization *bool `pulumi:"exposeHardwareVirtualization"`
	// Key/value settings for guest properties
	GuestProperties map[string]interface{} `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion *string `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href *string `pulumi:"href"`
	// The amount of RAM (in MB) to allocate to the VM
	Memory *int `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority *string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares *int `pulumi:"memoryShares"`
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given VM
	MetadataEntries []VmMetadataEntry `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name *string `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used.
	Networks []VmNetwork `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Operating System type. Possible values can be found in documentation.
	OsType *string `pulumi:"osType"`
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks []VmOverrideTemplateDisk `pulumi:"overrideTemplateDisks"`
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on
	PowerOn *bool `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff *bool `pulumi:"preventUpdatePowerOff"`
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// Storage profile to override the default one
	StorageProfile *string `pulumi:"storageProfile"`
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName *string `pulumi:"templateName"`
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName *string `pulumi:"vappName"`
	// The URN of the vApp Template to use
	VappTemplateId *string `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate *string `pulumi:"vmNameInTemplate"`
}

// The set of arguments for constructing a Vm resource.
type VmArgs struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas pulumi.BoolPtrInput
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage pulumi.StringPtrInput
	// The URN of the media to use as boot image.
	BootImageId pulumi.StringPtrInput
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName pulumi.StringPtrInput
	// Computer name to assign to this virtual machine
	ComputerName pulumi.StringPtrInput
	// The number of cores per socket
	CpuCores pulumi.IntPtrInput
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority pulumi.StringPtrInput
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares pulumi.IntPtrInput
	// The number of virtual CPUs to allocate to the VM
	Cpus pulumi.IntPtrInput
	// Guest customization block
	Customization VmCustomizationPtrInput
	// The VM description
	Description pulumi.StringPtrInput
	Disks       VmDiskArrayInput
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization pulumi.BoolPtrInput
	// Key/value settings for guest properties
	GuestProperties pulumi.MapInput
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion pulumi.StringPtrInput
	// VM Hyper Reference
	Href pulumi.StringPtrInput
	// The amount of RAM (in MB) to allocate to the VM
	Memory pulumi.IntPtrInput
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority pulumi.StringPtrInput
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares pulumi.IntPtrInput
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given VM
	MetadataEntries VmMetadataEntryArrayInput
	// A name for the VM, unique within the vApp
	Name pulumi.StringPtrInput
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds pulumi.IntPtrInput
	// A block to define network interface. Multiple can be used.
	Networks VmNetworkArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Operating System type. Possible values can be found in documentation.
	OsType pulumi.StringPtrInput
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks VmOverrideTemplateDiskArrayInput
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId pulumi.StringPtrInput
	// A boolean value stating if this VM should be powered on
	PowerOn pulumi.BoolPtrInput
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff pulumi.BoolPtrInput
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId pulumi.StringPtrInput
	// Storage profile to override the default one
	StorageProfile pulumi.StringPtrInput
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName pulumi.StringPtrInput
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName pulumi.StringPtrInput
	// The URN of the vApp Template to use
	VappTemplateId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate pulumi.StringPtrInput
}

func (VmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmArgs)(nil)).Elem()
}

type VmInput interface {
	pulumi.Input

	ToVmOutput() VmOutput
	ToVmOutputWithContext(ctx context.Context) VmOutput
}

func (*Vm) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm)(nil)).Elem()
}

func (i *Vm) ToVmOutput() VmOutput {
	return i.ToVmOutputWithContext(context.Background())
}

func (i *Vm) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmOutput)
}

// VmArrayInput is an input type that accepts VmArray and VmArrayOutput values.
// You can construct a concrete instance of `VmArrayInput` via:
//
//	VmArray{ VmArgs{...} }
type VmArrayInput interface {
	pulumi.Input

	ToVmArrayOutput() VmArrayOutput
	ToVmArrayOutputWithContext(context.Context) VmArrayOutput
}

type VmArray []VmInput

func (VmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vm)(nil)).Elem()
}

func (i VmArray) ToVmArrayOutput() VmArrayOutput {
	return i.ToVmArrayOutputWithContext(context.Background())
}

func (i VmArray) ToVmArrayOutputWithContext(ctx context.Context) VmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmArrayOutput)
}

// VmMapInput is an input type that accepts VmMap and VmMapOutput values.
// You can construct a concrete instance of `VmMapInput` via:
//
//	VmMap{ "key": VmArgs{...} }
type VmMapInput interface {
	pulumi.Input

	ToVmMapOutput() VmMapOutput
	ToVmMapOutputWithContext(context.Context) VmMapOutput
}

type VmMap map[string]VmInput

func (VmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vm)(nil)).Elem()
}

func (i VmMap) ToVmMapOutput() VmMapOutput {
	return i.ToVmMapOutputWithContext(context.Background())
}

func (i VmMap) ToVmMapOutputWithContext(ctx context.Context) VmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmMapOutput)
}

type VmOutput struct{ *pulumi.OutputState }

func (VmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm)(nil)).Elem()
}

func (o VmOutput) ToVmOutput() VmOutput {
	return o
}

func (o VmOutput) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return o
}

// Automatically accept EULA if OVA has it
func (o VmOutput) AcceptAllEulas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.AcceptAllEulas }).(pulumi.BoolPtrOutput)
}

// Media name to add as boot image.
//
// Deprecated: Use `boot_image_id` instead
func (o VmOutput) BootImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.BootImage }).(pulumi.StringPtrOutput)
}

// The URN of the media to use as boot image.
func (o VmOutput) BootImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.BootImageId }).(pulumi.StringPtrOutput)
}

// The catalog name in which to find the given vApp Template or media for boot_image
//
// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
func (o VmOutput) CatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.CatalogName }).(pulumi.StringPtrOutput)
}

// Computer name to assign to this virtual machine
func (o VmOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.ComputerName }).(pulumi.StringOutput)
}

// The number of cores per socket
func (o VmOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.CpuCores }).(pulumi.IntOutput)
}

// True if the virtual machine supports addition of virtual CPUs while powered on.
func (o VmOutput) CpuHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.CpuHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
// the resource allocation is not unlimited.
func (o VmOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.CpuLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
// virtualized workload
func (o VmOutput) CpuPriority() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.CpuPriority }).(pulumi.StringOutput)
}

// The amount of MHz reservation on the underlying virtualization infrastructure
func (o VmOutput) CpuReservation() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.CpuReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
func (o VmOutput) CpuShares() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.CpuShares }).(pulumi.IntOutput)
}

// The number of virtual CPUs to allocate to the VM
func (o VmOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.Cpus }).(pulumi.IntOutput)
}

// Guest customization block
func (o VmOutput) Customization() VmCustomizationOutput {
	return o.ApplyT(func(v *Vm) VmCustomizationOutput { return v.Customization }).(VmCustomizationOutput)
}

// The VM description
func (o VmOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o VmOutput) Disks() VmDiskArrayOutput {
	return o.ApplyT(func(v *Vm) VmDiskArrayOutput { return v.Disks }).(VmDiskArrayOutput)
}

// Expose hardware-assisted CPU virtualization to guest OS.
func (o VmOutput) ExposeHardwareVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.ExposeHardwareVirtualization }).(pulumi.BoolPtrOutput)
}

// Key/value settings for guest properties
func (o VmOutput) GuestProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *Vm) pulumi.MapOutput { return v.GuestProperties }).(pulumi.MapOutput)
}

// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
func (o VmOutput) HardwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.HardwareVersion }).(pulumi.StringOutput)
}

// VM Hyper Reference
func (o VmOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// A block will show internal disk details
func (o VmOutput) InternalDisks() VmInternalDiskTypeArrayOutput {
	return o.ApplyT(func(v *Vm) VmInternalDiskTypeArrayOutput { return v.InternalDisks }).(VmInternalDiskTypeArrayOutput)
}

// The amount of RAM (in MB) to allocate to the VM
func (o VmOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// True if the virtual machine supports addition of memory while powered on.
func (o VmOutput) MemoryHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.MemoryHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
// when the resource allocation is not unlimited.
func (o VmOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
// virtualized workload
func (o VmOutput) MemoryPriority() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.MemoryPriority }).(pulumi.StringOutput)
}

// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
func (o VmOutput) MemoryReservation() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.MemoryReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
func (o VmOutput) MemoryShares() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.MemoryShares }).(pulumi.IntOutput)
}

// Key value map of metadata to assign to this VM
//
// Deprecated: Use metadata_entry instead
func (o VmOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *Vm) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

// Metadata entries for the given VM
func (o VmOutput) MetadataEntries() VmMetadataEntryArrayOutput {
	return o.ApplyT(func(v *Vm) VmMetadataEntryArrayOutput { return v.MetadataEntries }).(VmMetadataEntryArrayOutput)
}

// A name for the VM, unique within the vApp
func (o VmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
func (o VmOutput) NetworkDhcpWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntPtrOutput { return v.NetworkDhcpWaitSeconds }).(pulumi.IntPtrOutput)
}

// A block to define network interface. Multiple can be used.
func (o VmOutput) Networks() VmNetworkArrayOutput {
	return o.ApplyT(func(v *Vm) VmNetworkArrayOutput { return v.Networks }).(VmNetworkArrayOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o VmOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Operating System type. Possible values can be found in documentation.
func (o VmOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
// and unit_number.
func (o VmOutput) OverrideTemplateDisks() VmOverrideTemplateDiskArrayOutput {
	return o.ApplyT(func(v *Vm) VmOverrideTemplateDiskArrayOutput { return v.OverrideTemplateDisks }).(VmOverrideTemplateDiskArrayOutput)
}

// VM placement policy ID. Has to be assigned to Org VDC.
func (o VmOutput) PlacementPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PlacementPolicyId }).(pulumi.StringOutput)
}

// A boolean value stating if this VM should be powered on
func (o VmOutput) PowerOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.PowerOn }).(pulumi.BoolPtrOutput)
}

// True if the update of resource should fail when virtual machine power off needed.
func (o VmOutput) PreventUpdatePowerOff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.PreventUpdatePowerOff }).(pulumi.BoolPtrOutput)
}

// VM sizing policy ID. Has to be assigned to Org VDC.
func (o VmOutput) SizingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.SizingPolicyId }).(pulumi.StringOutput)
}

// Shows the status code of the VM
func (o VmOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Shows the status of the VM
func (o VmOutput) StatusText() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.StatusText }).(pulumi.StringOutput)
}

// Storage profile to override the default one
func (o VmOutput) StorageProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.StorageProfile }).(pulumi.StringOutput)
}

// The name of the vApp Template to use
//
// Deprecated: Use `vapp_template_id` instead
func (o VmOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

// The vApp this VM belongs to - Required, unless it is a standalone VM
func (o VmOutput) VappName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.VappName }).(pulumi.StringOutput)
}

// The URN of the vApp Template to use
func (o VmOutput) VappTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.VappTemplateId }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o VmOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
func (o VmOutput) VmNameInTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.VmNameInTemplate }).(pulumi.StringPtrOutput)
}

// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
func (o VmOutput) VmType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.VmType }).(pulumi.StringOutput)
}

type VmArrayOutput struct{ *pulumi.OutputState }

func (VmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vm)(nil)).Elem()
}

func (o VmArrayOutput) ToVmArrayOutput() VmArrayOutput {
	return o
}

func (o VmArrayOutput) ToVmArrayOutputWithContext(ctx context.Context) VmArrayOutput {
	return o
}

func (o VmArrayOutput) Index(i pulumi.IntInput) VmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vm {
		return vs[0].([]*Vm)[vs[1].(int)]
	}).(VmOutput)
}

type VmMapOutput struct{ *pulumi.OutputState }

func (VmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vm)(nil)).Elem()
}

func (o VmMapOutput) ToVmMapOutput() VmMapOutput {
	return o
}

func (o VmMapOutput) ToVmMapOutputWithContext(ctx context.Context) VmMapOutput {
	return o
}

func (o VmMapOutput) MapIndex(k pulumi.StringInput) VmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vm {
		return vs[0].(map[string]*Vm)[vs[1].(string)]
	}).(VmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmInput)(nil)).Elem(), &Vm{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmArrayInput)(nil)).Elem(), VmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmMapInput)(nil)).Elem(), VmMap{})
	pulumi.RegisterOutputType(VmOutput{})
	pulumi.RegisterOutputType(VmArrayOutput{})
	pulumi.RegisterOutputType(VmMapOutput{})
}
