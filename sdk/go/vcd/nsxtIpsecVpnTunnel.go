// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtIpsecVpnTunnel struct {
	pulumi.CustomResourceState

	// Description IP Sec VPN Tunnel
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Edge gateway name in which IP Sec VPN configuration is located
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Enables or disables this configuration (default true)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Provides more details of failure if the IKE service is not UP
	IkeFailReason pulumi.StringOutput `pulumi:"ikeFailReason"`
	// Status for the actual IKE Session for the given tunnel
	IkeServiceStatus pulumi.StringOutput `pulumi:"ikeServiceStatus"`
	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	LocalIpAddress pulumi.StringOutput `pulumi:"localIpAddress"`
	// Set of local networks in CIDR format. At least one value is required
	LocalNetworks pulumi.StringArrayOutput `pulumi:"localNetworks"`
	// Sets whether logging for the tunnel is enabled or not. (default - false)
	Logging pulumi.BoolPtrOutput `pulumi:"logging"`
	// Name of IP Sec VPN Tunnel
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Pre-Shared Key (PSK)
	PreSharedKey pulumi.StringOutput `pulumi:"preSharedKey"`
	// Public IPv4 Address of the remote device terminating the VPN connection
	RemoteIpAddress pulumi.StringOutput `pulumi:"remoteIpAddress"`
	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	RemoteNetworks pulumi.StringArrayOutput `pulumi:"remoteNetworks"`
	// Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some
	// changes are applied
	SecurityProfile pulumi.StringOutput `pulumi:"securityProfile"`
	// Security profile customization
	SecurityProfileCustomization NsxtIpsecVpnTunnelSecurityProfileCustomizationPtrOutput `pulumi:"securityProfileCustomization"`
	// Overall IPsec VPN Tunnel Status
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtIpsecVpnTunnel registers a new resource with the given unique name, arguments, and options.
func NewNsxtIpsecVpnTunnel(ctx *pulumi.Context,
	name string, args *NsxtIpsecVpnTunnelArgs, opts ...pulumi.ResourceOption) (*NsxtIpsecVpnTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	if args.LocalIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'LocalIpAddress'")
	}
	if args.LocalNetworks == nil {
		return nil, errors.New("invalid value for required argument 'LocalNetworks'")
	}
	if args.PreSharedKey == nil {
		return nil, errors.New("invalid value for required argument 'PreSharedKey'")
	}
	if args.RemoteIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'RemoteIpAddress'")
	}
	var resource NsxtIpsecVpnTunnel
	err := ctx.RegisterResource("vcd:index/nsxtIpsecVpnTunnel:NsxtIpsecVpnTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtIpsecVpnTunnel gets an existing NsxtIpsecVpnTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtIpsecVpnTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtIpsecVpnTunnelState, opts ...pulumi.ResourceOption) (*NsxtIpsecVpnTunnel, error) {
	var resource NsxtIpsecVpnTunnel
	err := ctx.ReadResource("vcd:index/nsxtIpsecVpnTunnel:NsxtIpsecVpnTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtIpsecVpnTunnel resources.
type nsxtIpsecVpnTunnelState struct {
	// Description IP Sec VPN Tunnel
	Description *string `pulumi:"description"`
	// Edge gateway name in which IP Sec VPN configuration is located
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Enables or disables this configuration (default true)
	Enabled *bool `pulumi:"enabled"`
	// Provides more details of failure if the IKE service is not UP
	IkeFailReason *string `pulumi:"ikeFailReason"`
	// Status for the actual IKE Session for the given tunnel
	IkeServiceStatus *string `pulumi:"ikeServiceStatus"`
	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	LocalIpAddress *string `pulumi:"localIpAddress"`
	// Set of local networks in CIDR format. At least one value is required
	LocalNetworks []string `pulumi:"localNetworks"`
	// Sets whether logging for the tunnel is enabled or not. (default - false)
	Logging *bool `pulumi:"logging"`
	// Name of IP Sec VPN Tunnel
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Pre-Shared Key (PSK)
	PreSharedKey *string `pulumi:"preSharedKey"`
	// Public IPv4 Address of the remote device terminating the VPN connection
	RemoteIpAddress *string `pulumi:"remoteIpAddress"`
	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	RemoteNetworks []string `pulumi:"remoteNetworks"`
	// Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some
	// changes are applied
	SecurityProfile *string `pulumi:"securityProfile"`
	// Security profile customization
	SecurityProfileCustomization *NsxtIpsecVpnTunnelSecurityProfileCustomization `pulumi:"securityProfileCustomization"`
	// Overall IPsec VPN Tunnel Status
	Status *string `pulumi:"status"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

type NsxtIpsecVpnTunnelState struct {
	// Description IP Sec VPN Tunnel
	Description pulumi.StringPtrInput
	// Edge gateway name in which IP Sec VPN configuration is located
	EdgeGatewayId pulumi.StringPtrInput
	// Enables or disables this configuration (default true)
	Enabled pulumi.BoolPtrInput
	// Provides more details of failure if the IKE service is not UP
	IkeFailReason pulumi.StringPtrInput
	// Status for the actual IKE Session for the given tunnel
	IkeServiceStatus pulumi.StringPtrInput
	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	LocalIpAddress pulumi.StringPtrInput
	// Set of local networks in CIDR format. At least one value is required
	LocalNetworks pulumi.StringArrayInput
	// Sets whether logging for the tunnel is enabled or not. (default - false)
	Logging pulumi.BoolPtrInput
	// Name of IP Sec VPN Tunnel
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Pre-Shared Key (PSK)
	PreSharedKey pulumi.StringPtrInput
	// Public IPv4 Address of the remote device terminating the VPN connection
	RemoteIpAddress pulumi.StringPtrInput
	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	RemoteNetworks pulumi.StringArrayInput
	// Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some
	// changes are applied
	SecurityProfile pulumi.StringPtrInput
	// Security profile customization
	SecurityProfileCustomization NsxtIpsecVpnTunnelSecurityProfileCustomizationPtrInput
	// Overall IPsec VPN Tunnel Status
	Status pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtIpsecVpnTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtIpsecVpnTunnelState)(nil)).Elem()
}

type nsxtIpsecVpnTunnelArgs struct {
	// Description IP Sec VPN Tunnel
	Description *string `pulumi:"description"`
	// Edge gateway name in which IP Sec VPN configuration is located
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Enables or disables this configuration (default true)
	Enabled *bool `pulumi:"enabled"`
	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	LocalIpAddress string `pulumi:"localIpAddress"`
	// Set of local networks in CIDR format. At least one value is required
	LocalNetworks []string `pulumi:"localNetworks"`
	// Sets whether logging for the tunnel is enabled or not. (default - false)
	Logging *bool `pulumi:"logging"`
	// Name of IP Sec VPN Tunnel
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Pre-Shared Key (PSK)
	PreSharedKey string `pulumi:"preSharedKey"`
	// Public IPv4 Address of the remote device terminating the VPN connection
	RemoteIpAddress string `pulumi:"remoteIpAddress"`
	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	RemoteNetworks []string `pulumi:"remoteNetworks"`
	// Security profile customization
	SecurityProfileCustomization *NsxtIpsecVpnTunnelSecurityProfileCustomization `pulumi:"securityProfileCustomization"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtIpsecVpnTunnel resource.
type NsxtIpsecVpnTunnelArgs struct {
	// Description IP Sec VPN Tunnel
	Description pulumi.StringPtrInput
	// Edge gateway name in which IP Sec VPN configuration is located
	EdgeGatewayId pulumi.StringInput
	// Enables or disables this configuration (default true)
	Enabled pulumi.BoolPtrInput
	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	LocalIpAddress pulumi.StringInput
	// Set of local networks in CIDR format. At least one value is required
	LocalNetworks pulumi.StringArrayInput
	// Sets whether logging for the tunnel is enabled or not. (default - false)
	Logging pulumi.BoolPtrInput
	// Name of IP Sec VPN Tunnel
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Pre-Shared Key (PSK)
	PreSharedKey pulumi.StringInput
	// Public IPv4 Address of the remote device terminating the VPN connection
	RemoteIpAddress pulumi.StringInput
	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	RemoteNetworks pulumi.StringArrayInput
	// Security profile customization
	SecurityProfileCustomization NsxtIpsecVpnTunnelSecurityProfileCustomizationPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtIpsecVpnTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtIpsecVpnTunnelArgs)(nil)).Elem()
}

type NsxtIpsecVpnTunnelInput interface {
	pulumi.Input

	ToNsxtIpsecVpnTunnelOutput() NsxtIpsecVpnTunnelOutput
	ToNsxtIpsecVpnTunnelOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelOutput
}

func (*NsxtIpsecVpnTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtIpsecVpnTunnel)(nil)).Elem()
}

func (i *NsxtIpsecVpnTunnel) ToNsxtIpsecVpnTunnelOutput() NsxtIpsecVpnTunnelOutput {
	return i.ToNsxtIpsecVpnTunnelOutputWithContext(context.Background())
}

func (i *NsxtIpsecVpnTunnel) ToNsxtIpsecVpnTunnelOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtIpsecVpnTunnelOutput)
}

// NsxtIpsecVpnTunnelArrayInput is an input type that accepts NsxtIpsecVpnTunnelArray and NsxtIpsecVpnTunnelArrayOutput values.
// You can construct a concrete instance of `NsxtIpsecVpnTunnelArrayInput` via:
//
//	NsxtIpsecVpnTunnelArray{ NsxtIpsecVpnTunnelArgs{...} }
type NsxtIpsecVpnTunnelArrayInput interface {
	pulumi.Input

	ToNsxtIpsecVpnTunnelArrayOutput() NsxtIpsecVpnTunnelArrayOutput
	ToNsxtIpsecVpnTunnelArrayOutputWithContext(context.Context) NsxtIpsecVpnTunnelArrayOutput
}

type NsxtIpsecVpnTunnelArray []NsxtIpsecVpnTunnelInput

func (NsxtIpsecVpnTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtIpsecVpnTunnel)(nil)).Elem()
}

func (i NsxtIpsecVpnTunnelArray) ToNsxtIpsecVpnTunnelArrayOutput() NsxtIpsecVpnTunnelArrayOutput {
	return i.ToNsxtIpsecVpnTunnelArrayOutputWithContext(context.Background())
}

func (i NsxtIpsecVpnTunnelArray) ToNsxtIpsecVpnTunnelArrayOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtIpsecVpnTunnelArrayOutput)
}

// NsxtIpsecVpnTunnelMapInput is an input type that accepts NsxtIpsecVpnTunnelMap and NsxtIpsecVpnTunnelMapOutput values.
// You can construct a concrete instance of `NsxtIpsecVpnTunnelMapInput` via:
//
//	NsxtIpsecVpnTunnelMap{ "key": NsxtIpsecVpnTunnelArgs{...} }
type NsxtIpsecVpnTunnelMapInput interface {
	pulumi.Input

	ToNsxtIpsecVpnTunnelMapOutput() NsxtIpsecVpnTunnelMapOutput
	ToNsxtIpsecVpnTunnelMapOutputWithContext(context.Context) NsxtIpsecVpnTunnelMapOutput
}

type NsxtIpsecVpnTunnelMap map[string]NsxtIpsecVpnTunnelInput

func (NsxtIpsecVpnTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtIpsecVpnTunnel)(nil)).Elem()
}

func (i NsxtIpsecVpnTunnelMap) ToNsxtIpsecVpnTunnelMapOutput() NsxtIpsecVpnTunnelMapOutput {
	return i.ToNsxtIpsecVpnTunnelMapOutputWithContext(context.Background())
}

func (i NsxtIpsecVpnTunnelMap) ToNsxtIpsecVpnTunnelMapOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtIpsecVpnTunnelMapOutput)
}

type NsxtIpsecVpnTunnelOutput struct{ *pulumi.OutputState }

func (NsxtIpsecVpnTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtIpsecVpnTunnel)(nil)).Elem()
}

func (o NsxtIpsecVpnTunnelOutput) ToNsxtIpsecVpnTunnelOutput() NsxtIpsecVpnTunnelOutput {
	return o
}

func (o NsxtIpsecVpnTunnelOutput) ToNsxtIpsecVpnTunnelOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelOutput {
	return o
}

// Description IP Sec VPN Tunnel
func (o NsxtIpsecVpnTunnelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Edge gateway name in which IP Sec VPN configuration is located
func (o NsxtIpsecVpnTunnelOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Enables or disables this configuration (default true)
func (o NsxtIpsecVpnTunnelOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Provides more details of failure if the IKE service is not UP
func (o NsxtIpsecVpnTunnelOutput) IkeFailReason() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.IkeFailReason }).(pulumi.StringOutput)
}

// Status for the actual IKE Session for the given tunnel
func (o NsxtIpsecVpnTunnelOutput) IkeServiceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.IkeServiceStatus }).(pulumi.StringOutput)
}

// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
func (o NsxtIpsecVpnTunnelOutput) LocalIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.LocalIpAddress }).(pulumi.StringOutput)
}

// Set of local networks in CIDR format. At least one value is required
func (o NsxtIpsecVpnTunnelOutput) LocalNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringArrayOutput { return v.LocalNetworks }).(pulumi.StringArrayOutput)
}

// Sets whether logging for the tunnel is enabled or not. (default - false)
func (o NsxtIpsecVpnTunnelOutput) Logging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.BoolPtrOutput { return v.Logging }).(pulumi.BoolPtrOutput)
}

// Name of IP Sec VPN Tunnel
func (o NsxtIpsecVpnTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxtIpsecVpnTunnelOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Pre-Shared Key (PSK)
func (o NsxtIpsecVpnTunnelOutput) PreSharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.PreSharedKey }).(pulumi.StringOutput)
}

// Public IPv4 Address of the remote device terminating the VPN connection
func (o NsxtIpsecVpnTunnelOutput) RemoteIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.RemoteIpAddress }).(pulumi.StringOutput)
}

// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
func (o NsxtIpsecVpnTunnelOutput) RemoteNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringArrayOutput { return v.RemoteNetworks }).(pulumi.StringArrayOutput)
}

// Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some
// changes are applied
func (o NsxtIpsecVpnTunnelOutput) SecurityProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.SecurityProfile }).(pulumi.StringOutput)
}

// Security profile customization
func (o NsxtIpsecVpnTunnelOutput) SecurityProfileCustomization() NsxtIpsecVpnTunnelSecurityProfileCustomizationPtrOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) NsxtIpsecVpnTunnelSecurityProfileCustomizationPtrOutput {
		return v.SecurityProfileCustomization
	}).(NsxtIpsecVpnTunnelSecurityProfileCustomizationPtrOutput)
}

// Overall IPsec VPN Tunnel Status
func (o NsxtIpsecVpnTunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
func (o NsxtIpsecVpnTunnelOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtIpsecVpnTunnel) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtIpsecVpnTunnelArrayOutput struct{ *pulumi.OutputState }

func (NsxtIpsecVpnTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtIpsecVpnTunnel)(nil)).Elem()
}

func (o NsxtIpsecVpnTunnelArrayOutput) ToNsxtIpsecVpnTunnelArrayOutput() NsxtIpsecVpnTunnelArrayOutput {
	return o
}

func (o NsxtIpsecVpnTunnelArrayOutput) ToNsxtIpsecVpnTunnelArrayOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelArrayOutput {
	return o
}

func (o NsxtIpsecVpnTunnelArrayOutput) Index(i pulumi.IntInput) NsxtIpsecVpnTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtIpsecVpnTunnel {
		return vs[0].([]*NsxtIpsecVpnTunnel)[vs[1].(int)]
	}).(NsxtIpsecVpnTunnelOutput)
}

type NsxtIpsecVpnTunnelMapOutput struct{ *pulumi.OutputState }

func (NsxtIpsecVpnTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtIpsecVpnTunnel)(nil)).Elem()
}

func (o NsxtIpsecVpnTunnelMapOutput) ToNsxtIpsecVpnTunnelMapOutput() NsxtIpsecVpnTunnelMapOutput {
	return o
}

func (o NsxtIpsecVpnTunnelMapOutput) ToNsxtIpsecVpnTunnelMapOutputWithContext(ctx context.Context) NsxtIpsecVpnTunnelMapOutput {
	return o
}

func (o NsxtIpsecVpnTunnelMapOutput) MapIndex(k pulumi.StringInput) NsxtIpsecVpnTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtIpsecVpnTunnel {
		return vs[0].(map[string]*NsxtIpsecVpnTunnel)[vs[1].(string)]
	}).(NsxtIpsecVpnTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtIpsecVpnTunnelInput)(nil)).Elem(), &NsxtIpsecVpnTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtIpsecVpnTunnelArrayInput)(nil)).Elem(), NsxtIpsecVpnTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtIpsecVpnTunnelMapInput)(nil)).Elem(), NsxtIpsecVpnTunnelMap{})
	pulumi.RegisterOutputType(NsxtIpsecVpnTunnelOutput{})
	pulumi.RegisterOutputType(NsxtIpsecVpnTunnelArrayOutput{})
	pulumi.RegisterOutputType(NsxtIpsecVpnTunnelMapOutput{})
}
