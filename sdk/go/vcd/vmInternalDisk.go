// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmInternalDisk struct {
	pulumi.CustomResourceState

	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
	// complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
	AllowVmReboot pulumi.BoolPtrOutput `pulumi:"allowVmReboot"`
	// The number of the SCSI or IDE controller itself.
	BusNumber pulumi.IntOutput `pulumi:"busNumber"`
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
	// paravirtual(Paravirtual (SCSI)), sata, nvme
	BusType pulumi.StringOutput `pulumi:"busType"`
	// Specifies the IOPS for the disk.
	Iops pulumi.IntOutput `pulumi:"iops"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The size of the disk in MB.
	SizeInMb pulumi.IntOutput `pulumi:"sizeInMb"`
	// Storage profile to override the VM default one
	StorageProfile pulumi.StringOutput `pulumi:"storageProfile"`
	// Specifies whether the disk storage is pre-allocated or allocated on demand.
	ThinProvisioned pulumi.BoolOutput `pulumi:"thinProvisioned"`
	// The device number on the SCSI or IDE controller of the disk.
	UnitNumber pulumi.IntOutput `pulumi:"unitNumber"`
	// The vApp this VM internal disk belongs to
	VappName pulumi.StringOutput `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
	// VM in vApp in which internal disk is created
	VmName pulumi.StringOutput `pulumi:"vmName"`
}

// NewVmInternalDisk registers a new resource with the given unique name, arguments, and options.
func NewVmInternalDisk(ctx *pulumi.Context,
	name string, args *VmInternalDiskArgs, opts ...pulumi.ResourceOption) (*VmInternalDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusNumber == nil {
		return nil, errors.New("invalid value for required argument 'BusNumber'")
	}
	if args.BusType == nil {
		return nil, errors.New("invalid value for required argument 'BusType'")
	}
	if args.SizeInMb == nil {
		return nil, errors.New("invalid value for required argument 'SizeInMb'")
	}
	if args.UnitNumber == nil {
		return nil, errors.New("invalid value for required argument 'UnitNumber'")
	}
	if args.VappName == nil {
		return nil, errors.New("invalid value for required argument 'VappName'")
	}
	if args.VmName == nil {
		return nil, errors.New("invalid value for required argument 'VmName'")
	}
	var resource VmInternalDisk
	err := ctx.RegisterResource("vcd:index/vmInternalDisk:VmInternalDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmInternalDisk gets an existing VmInternalDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmInternalDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmInternalDiskState, opts ...pulumi.ResourceOption) (*VmInternalDisk, error) {
	var resource VmInternalDisk
	err := ctx.ReadResource("vcd:index/vmInternalDisk:VmInternalDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmInternalDisk resources.
type vmInternalDiskState struct {
	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
	// complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
	AllowVmReboot *bool `pulumi:"allowVmReboot"`
	// The number of the SCSI or IDE controller itself.
	BusNumber *int `pulumi:"busNumber"`
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
	// paravirtual(Paravirtual (SCSI)), sata, nvme
	BusType *string `pulumi:"busType"`
	// Specifies the IOPS for the disk.
	Iops *int `pulumi:"iops"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// The size of the disk in MB.
	SizeInMb *int `pulumi:"sizeInMb"`
	// Storage profile to override the VM default one
	StorageProfile *string `pulumi:"storageProfile"`
	// Specifies whether the disk storage is pre-allocated or allocated on demand.
	ThinProvisioned *bool `pulumi:"thinProvisioned"`
	// The device number on the SCSI or IDE controller of the disk.
	UnitNumber *int `pulumi:"unitNumber"`
	// The vApp this VM internal disk belongs to
	VappName *string `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// VM in vApp in which internal disk is created
	VmName *string `pulumi:"vmName"`
}

type VmInternalDiskState struct {
	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
	// complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
	AllowVmReboot pulumi.BoolPtrInput
	// The number of the SCSI or IDE controller itself.
	BusNumber pulumi.IntPtrInput
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
	// paravirtual(Paravirtual (SCSI)), sata, nvme
	BusType pulumi.StringPtrInput
	// Specifies the IOPS for the disk.
	Iops pulumi.IntPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// The size of the disk in MB.
	SizeInMb pulumi.IntPtrInput
	// Storage profile to override the VM default one
	StorageProfile pulumi.StringPtrInput
	// Specifies whether the disk storage is pre-allocated or allocated on demand.
	ThinProvisioned pulumi.BoolPtrInput
	// The device number on the SCSI or IDE controller of the disk.
	UnitNumber pulumi.IntPtrInput
	// The vApp this VM internal disk belongs to
	VappName pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// VM in vApp in which internal disk is created
	VmName pulumi.StringPtrInput
}

func (VmInternalDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmInternalDiskState)(nil)).Elem()
}

type vmInternalDiskArgs struct {
	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
	// complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
	AllowVmReboot *bool `pulumi:"allowVmReboot"`
	// The number of the SCSI or IDE controller itself.
	BusNumber int `pulumi:"busNumber"`
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
	// paravirtual(Paravirtual (SCSI)), sata, nvme
	BusType string `pulumi:"busType"`
	// Specifies the IOPS for the disk.
	Iops *int `pulumi:"iops"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// The size of the disk in MB.
	SizeInMb int `pulumi:"sizeInMb"`
	// Storage profile to override the VM default one
	StorageProfile *string `pulumi:"storageProfile"`
	// The device number on the SCSI or IDE controller of the disk.
	UnitNumber int `pulumi:"unitNumber"`
	// The vApp this VM internal disk belongs to
	VappName string `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// VM in vApp in which internal disk is created
	VmName string `pulumi:"vmName"`
}

// The set of arguments for constructing a VmInternalDisk resource.
type VmInternalDiskArgs struct {
	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
	// complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
	AllowVmReboot pulumi.BoolPtrInput
	// The number of the SCSI or IDE controller itself.
	BusNumber pulumi.IntInput
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
	// paravirtual(Paravirtual (SCSI)), sata, nvme
	BusType pulumi.StringInput
	// Specifies the IOPS for the disk.
	Iops pulumi.IntPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// The size of the disk in MB.
	SizeInMb pulumi.IntInput
	// Storage profile to override the VM default one
	StorageProfile pulumi.StringPtrInput
	// The device number on the SCSI or IDE controller of the disk.
	UnitNumber pulumi.IntInput
	// The vApp this VM internal disk belongs to
	VappName pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// VM in vApp in which internal disk is created
	VmName pulumi.StringInput
}

func (VmInternalDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmInternalDiskArgs)(nil)).Elem()
}

type VmInternalDiskInput interface {
	pulumi.Input

	ToVmInternalDiskOutput() VmInternalDiskOutput
	ToVmInternalDiskOutputWithContext(ctx context.Context) VmInternalDiskOutput
}

func (*VmInternalDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**VmInternalDisk)(nil)).Elem()
}

func (i *VmInternalDisk) ToVmInternalDiskOutput() VmInternalDiskOutput {
	return i.ToVmInternalDiskOutputWithContext(context.Background())
}

func (i *VmInternalDisk) ToVmInternalDiskOutputWithContext(ctx context.Context) VmInternalDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmInternalDiskOutput)
}

// VmInternalDiskArrayInput is an input type that accepts VmInternalDiskArray and VmInternalDiskArrayOutput values.
// You can construct a concrete instance of `VmInternalDiskArrayInput` via:
//
//	VmInternalDiskArray{ VmInternalDiskArgs{...} }
type VmInternalDiskArrayInput interface {
	pulumi.Input

	ToVmInternalDiskArrayOutput() VmInternalDiskArrayOutput
	ToVmInternalDiskArrayOutputWithContext(context.Context) VmInternalDiskArrayOutput
}

type VmInternalDiskArray []VmInternalDiskInput

func (VmInternalDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmInternalDisk)(nil)).Elem()
}

func (i VmInternalDiskArray) ToVmInternalDiskArrayOutput() VmInternalDiskArrayOutput {
	return i.ToVmInternalDiskArrayOutputWithContext(context.Background())
}

func (i VmInternalDiskArray) ToVmInternalDiskArrayOutputWithContext(ctx context.Context) VmInternalDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmInternalDiskArrayOutput)
}

// VmInternalDiskMapInput is an input type that accepts VmInternalDiskMap and VmInternalDiskMapOutput values.
// You can construct a concrete instance of `VmInternalDiskMapInput` via:
//
//	VmInternalDiskMap{ "key": VmInternalDiskArgs{...} }
type VmInternalDiskMapInput interface {
	pulumi.Input

	ToVmInternalDiskMapOutput() VmInternalDiskMapOutput
	ToVmInternalDiskMapOutputWithContext(context.Context) VmInternalDiskMapOutput
}

type VmInternalDiskMap map[string]VmInternalDiskInput

func (VmInternalDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmInternalDisk)(nil)).Elem()
}

func (i VmInternalDiskMap) ToVmInternalDiskMapOutput() VmInternalDiskMapOutput {
	return i.ToVmInternalDiskMapOutputWithContext(context.Background())
}

func (i VmInternalDiskMap) ToVmInternalDiskMapOutputWithContext(ctx context.Context) VmInternalDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmInternalDiskMapOutput)
}

type VmInternalDiskOutput struct{ *pulumi.OutputState }

func (VmInternalDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmInternalDisk)(nil)).Elem()
}

func (o VmInternalDiskOutput) ToVmInternalDiskOutput() VmInternalDiskOutput {
	return o
}

func (o VmInternalDiskOutput) ToVmInternalDiskOutputWithContext(ctx context.Context) VmInternalDiskOutput {
	return o
}

// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
// complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
func (o VmInternalDiskOutput) AllowVmReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.BoolPtrOutput { return v.AllowVmReboot }).(pulumi.BoolPtrOutput)
}

// The number of the SCSI or IDE controller itself.
func (o VmInternalDiskOutput) BusNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.IntOutput { return v.BusNumber }).(pulumi.IntOutput)
}

// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
// paravirtual(Paravirtual (SCSI)), sata, nvme
func (o VmInternalDiskOutput) BusType() pulumi.StringOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.StringOutput { return v.BusType }).(pulumi.StringOutput)
}

// Specifies the IOPS for the disk.
func (o VmInternalDiskOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o VmInternalDiskOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The size of the disk in MB.
func (o VmInternalDiskOutput) SizeInMb() pulumi.IntOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.IntOutput { return v.SizeInMb }).(pulumi.IntOutput)
}

// Storage profile to override the VM default one
func (o VmInternalDiskOutput) StorageProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.StringOutput { return v.StorageProfile }).(pulumi.StringOutput)
}

// Specifies whether the disk storage is pre-allocated or allocated on demand.
func (o VmInternalDiskOutput) ThinProvisioned() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.BoolOutput { return v.ThinProvisioned }).(pulumi.BoolOutput)
}

// The device number on the SCSI or IDE controller of the disk.
func (o VmInternalDiskOutput) UnitNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.IntOutput { return v.UnitNumber }).(pulumi.IntOutput)
}

// The vApp this VM internal disk belongs to
func (o VmInternalDiskOutput) VappName() pulumi.StringOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.StringOutput { return v.VappName }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o VmInternalDiskOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

// VM in vApp in which internal disk is created
func (o VmInternalDiskOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v *VmInternalDisk) pulumi.StringOutput { return v.VmName }).(pulumi.StringOutput)
}

type VmInternalDiskArrayOutput struct{ *pulumi.OutputState }

func (VmInternalDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmInternalDisk)(nil)).Elem()
}

func (o VmInternalDiskArrayOutput) ToVmInternalDiskArrayOutput() VmInternalDiskArrayOutput {
	return o
}

func (o VmInternalDiskArrayOutput) ToVmInternalDiskArrayOutputWithContext(ctx context.Context) VmInternalDiskArrayOutput {
	return o
}

func (o VmInternalDiskArrayOutput) Index(i pulumi.IntInput) VmInternalDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmInternalDisk {
		return vs[0].([]*VmInternalDisk)[vs[1].(int)]
	}).(VmInternalDiskOutput)
}

type VmInternalDiskMapOutput struct{ *pulumi.OutputState }

func (VmInternalDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmInternalDisk)(nil)).Elem()
}

func (o VmInternalDiskMapOutput) ToVmInternalDiskMapOutput() VmInternalDiskMapOutput {
	return o
}

func (o VmInternalDiskMapOutput) ToVmInternalDiskMapOutputWithContext(ctx context.Context) VmInternalDiskMapOutput {
	return o
}

func (o VmInternalDiskMapOutput) MapIndex(k pulumi.StringInput) VmInternalDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmInternalDisk {
		return vs[0].(map[string]*VmInternalDisk)[vs[1].(string)]
	}).(VmInternalDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmInternalDiskInput)(nil)).Elem(), &VmInternalDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmInternalDiskArrayInput)(nil)).Elem(), VmInternalDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmInternalDiskMapInput)(nil)).Elem(), VmInternalDiskMap{})
	pulumi.RegisterOutputType(VmInternalDiskOutput{})
	pulumi.RegisterOutputType(VmInternalDiskArrayOutput{})
	pulumi.RegisterOutputType(VmInternalDiskMapOutput{})
}
