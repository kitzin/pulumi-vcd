// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "vcd:index/catalog:Catalog":
		r = &Catalog{}
	case "vcd:index/catalogAccessControl:CatalogAccessControl":
		r = &CatalogAccessControl{}
	case "vcd:index/catalogItem:CatalogItem":
		r = &CatalogItem{}
	case "vcd:index/catalogMedia:CatalogMedia":
		r = &CatalogMedia{}
	case "vcd:index/catalogVappTemplate:CatalogVappTemplate":
		r = &CatalogVappTemplate{}
	case "vcd:index/edgeGateway:EdgeGateway":
		r = &EdgeGateway{}
	case "vcd:index/edgeGatewaySettings:EdgeGatewaySettings":
		r = &EdgeGatewaySettings{}
	case "vcd:index/edgeGatewayVpn:EdgeGatewayVpn":
		r = &EdgeGatewayVpn{}
	case "vcd:index/externalNetwork:ExternalNetwork":
		r = &ExternalNetwork{}
	case "vcd:index/externalNetworkV2:ExternalNetworkV2":
		r = &ExternalNetworkV2{}
	case "vcd:index/globalRole:GlobalRole":
		r = &GlobalRole{}
	case "vcd:index/independentDisk:IndependentDisk":
		r = &IndependentDisk{}
	case "vcd:index/insertedMedia:InsertedMedia":
		r = &InsertedMedia{}
	case "vcd:index/lbAppProfile:LbAppProfile":
		r = &LbAppProfile{}
	case "vcd:index/lbAppRule:LbAppRule":
		r = &LbAppRule{}
	case "vcd:index/lbServerPool:LbServerPool":
		r = &LbServerPool{}
	case "vcd:index/lbServiceMonitor:LbServiceMonitor":
		r = &LbServiceMonitor{}
	case "vcd:index/lbVirtualServer:LbVirtualServer":
		r = &LbVirtualServer{}
	case "vcd:index/libraryCertificate:LibraryCertificate":
		r = &LibraryCertificate{}
	case "vcd:index/networkDirect:NetworkDirect":
		r = &NetworkDirect{}
	case "vcd:index/networkIsolated:NetworkIsolated":
		r = &NetworkIsolated{}
	case "vcd:index/networkIsolatedV2:NetworkIsolatedV2":
		r = &NetworkIsolatedV2{}
	case "vcd:index/networkRouted:NetworkRouted":
		r = &NetworkRouted{}
	case "vcd:index/networkRoutedV2:NetworkRoutedV2":
		r = &NetworkRoutedV2{}
	case "vcd:index/nsxtAlbCloud:NsxtAlbCloud":
		r = &NsxtAlbCloud{}
	case "vcd:index/nsxtAlbController:NsxtAlbController":
		r = &NsxtAlbController{}
	case "vcd:index/nsxtAlbEdgegatewayServiceEngineGroup:NsxtAlbEdgegatewayServiceEngineGroup":
		r = &NsxtAlbEdgegatewayServiceEngineGroup{}
	case "vcd:index/nsxtAlbPool:NsxtAlbPool":
		r = &NsxtAlbPool{}
	case "vcd:index/nsxtAlbServiceEngineGroup:NsxtAlbServiceEngineGroup":
		r = &NsxtAlbServiceEngineGroup{}
	case "vcd:index/nsxtAlbSettings:NsxtAlbSettings":
		r = &NsxtAlbSettings{}
	case "vcd:index/nsxtAlbVirtualService:NsxtAlbVirtualService":
		r = &NsxtAlbVirtualService{}
	case "vcd:index/nsxtAppPortProfile:NsxtAppPortProfile":
		r = &NsxtAppPortProfile{}
	case "vcd:index/nsxtDistributedFirewall:NsxtDistributedFirewall":
		r = &NsxtDistributedFirewall{}
	case "vcd:index/nsxtDynamicSecurityGroup:NsxtDynamicSecurityGroup":
		r = &NsxtDynamicSecurityGroup{}
	case "vcd:index/nsxtEdgegateway:NsxtEdgegateway":
		r = &NsxtEdgegateway{}
	case "vcd:index/nsxtEdgegatewayBgpConfiguration:NsxtEdgegatewayBgpConfiguration":
		r = &NsxtEdgegatewayBgpConfiguration{}
	case "vcd:index/nsxtEdgegatewayBgpIpPrefixList:NsxtEdgegatewayBgpIpPrefixList":
		r = &NsxtEdgegatewayBgpIpPrefixList{}
	case "vcd:index/nsxtEdgegatewayBgpNeighbor:NsxtEdgegatewayBgpNeighbor":
		r = &NsxtEdgegatewayBgpNeighbor{}
	case "vcd:index/nsxtFirewall:NsxtFirewall":
		r = &NsxtFirewall{}
	case "vcd:index/nsxtIpSet:NsxtIpSet":
		r = &NsxtIpSet{}
	case "vcd:index/nsxtIpsecVpnTunnel:NsxtIpsecVpnTunnel":
		r = &NsxtIpsecVpnTunnel{}
	case "vcd:index/nsxtNatRule:NsxtNatRule":
		r = &NsxtNatRule{}
	case "vcd:index/nsxtNetworkDhcp:NsxtNetworkDhcp":
		r = &NsxtNetworkDhcp{}
	case "vcd:index/nsxtNetworkImported:NsxtNetworkImported":
		r = &NsxtNetworkImported{}
	case "vcd:index/nsxtRouteAdvertisement:NsxtRouteAdvertisement":
		r = &NsxtRouteAdvertisement{}
	case "vcd:index/nsxtSecurityGroup:NsxtSecurityGroup":
		r = &NsxtSecurityGroup{}
	case "vcd:index/nsxvDhcpRelay:NsxvDhcpRelay":
		r = &NsxvDhcpRelay{}
	case "vcd:index/nsxvDnat:NsxvDnat":
		r = &NsxvDnat{}
	case "vcd:index/nsxvFirewallRule:NsxvFirewallRule":
		r = &NsxvFirewallRule{}
	case "vcd:index/nsxvIpSet:NsxvIpSet":
		r = &NsxvIpSet{}
	case "vcd:index/nsxvSnat:NsxvSnat":
		r = &NsxvSnat{}
	case "vcd:index/org:Org":
		r = &Org{}
	case "vcd:index/orgGroup:OrgGroup":
		r = &OrgGroup{}
	case "vcd:index/orgLdap:OrgLdap":
		r = &OrgLdap{}
	case "vcd:index/orgUser:OrgUser":
		r = &OrgUser{}
	case "vcd:index/orgVdc:OrgVdc":
		r = &OrgVdc{}
	case "vcd:index/orgVdcAccessControl:OrgVdcAccessControl":
		r = &OrgVdcAccessControl{}
	case "vcd:index/rightsBundle:RightsBundle":
		r = &RightsBundle{}
	case "vcd:index/role:Role":
		r = &Role{}
	case "vcd:index/securityTag:SecurityTag":
		r = &SecurityTag{}
	case "vcd:index/subscribedCatalog:SubscribedCatalog":
		r = &SubscribedCatalog{}
	case "vcd:index/vapp:Vapp":
		r = &Vapp{}
	case "vcd:index/vappAccessControl:VappAccessControl":
		r = &VappAccessControl{}
	case "vcd:index/vappFirewallRules:VappFirewallRules":
		r = &VappFirewallRules{}
	case "vcd:index/vappNatRules:VappNatRules":
		r = &VappNatRules{}
	case "vcd:index/vappNetwork:VappNetwork":
		r = &VappNetwork{}
	case "vcd:index/vappOrgNetwork:VappOrgNetwork":
		r = &VappOrgNetwork{}
	case "vcd:index/vappStaticRouting:VappStaticRouting":
		r = &VappStaticRouting{}
	case "vcd:index/vappVm:VappVm":
		r = &VappVm{}
	case "vcd:index/vdcGroup:VdcGroup":
		r = &VdcGroup{}
	case "vcd:index/vm:Vm":
		r = &Vm{}
	case "vcd:index/vmAffinityRule:VmAffinityRule":
		r = &VmAffinityRule{}
	case "vcd:index/vmInternalDisk:VmInternalDisk":
		r = &VmInternalDisk{}
	case "vcd:index/vmPlacementPolicy:VmPlacementPolicy":
		r = &VmPlacementPolicy{}
	case "vcd:index/vmSizingPolicy:VmSizingPolicy":
		r = &VmSizingPolicy{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:vcd" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"vcd",
		"index/catalog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/catalogAccessControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/catalogItem",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/catalogMedia",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/catalogVappTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/edgeGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/edgeGatewaySettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/edgeGatewayVpn",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/externalNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/externalNetworkV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/globalRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/independentDisk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/insertedMedia",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/lbAppProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/lbAppRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/lbServerPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/lbServiceMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/lbVirtualServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/libraryCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/networkDirect",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/networkIsolated",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/networkIsolatedV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/networkRouted",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/networkRoutedV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbCloud",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbController",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbEdgegatewayServiceEngineGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbServiceEngineGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbSettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAlbVirtualService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtAppPortProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtDistributedFirewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtDynamicSecurityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtEdgegateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtEdgegatewayBgpConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtEdgegatewayBgpIpPrefixList",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtEdgegatewayBgpNeighbor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtFirewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtIpSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtIpsecVpnTunnel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtNatRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtNetworkDhcp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtNetworkImported",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtRouteAdvertisement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxtSecurityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxvDhcpRelay",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxvDnat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxvFirewallRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxvIpSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/nsxvSnat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/org",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/orgGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/orgLdap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/orgUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/orgVdc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/orgVdcAccessControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/rightsBundle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/role",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/securityTag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/subscribedCatalog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vapp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappAccessControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappFirewallRules",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappNatRules",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappOrgNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappStaticRouting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vappVm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vdcGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vmAffinityRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vmInternalDisk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vmPlacementPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vcd",
		"index/vmSizingPolicy",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"vcd",
		&pkg{version},
	)
}
