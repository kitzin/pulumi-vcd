// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtNetworkDhcp struct {
	pulumi.CustomResourceState

	// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Lease time in seconds
	LeaseTime pulumi.IntOutput `pulumi:"leaseTime"`
	// IP Address of DHCP server in network. Only applicable when mode=NETWORK
	ListenerIpAddress pulumi.StringPtrOutput `pulumi:"listenerIpAddress"`
	// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Parent Org VDC network ID
	OrgNetworkId pulumi.StringOutput `pulumi:"orgNetworkId"`
	// IP ranges used for DHCP pool allocation in the network
	Pools NsxtNetworkDhcpPoolArrayOutput `pulumi:"pools"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Org network will be looked up based on 'org_network_id' field
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtNetworkDhcp registers a new resource with the given unique name, arguments, and options.
func NewNsxtNetworkDhcp(ctx *pulumi.Context,
	name string, args *NsxtNetworkDhcpArgs, opts ...pulumi.ResourceOption) (*NsxtNetworkDhcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'OrgNetworkId'")
	}
	var resource NsxtNetworkDhcp
	err := ctx.RegisterResource("vcd:index/nsxtNetworkDhcp:NsxtNetworkDhcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtNetworkDhcp gets an existing NsxtNetworkDhcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtNetworkDhcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtNetworkDhcpState, opts ...pulumi.ResourceOption) (*NsxtNetworkDhcp, error) {
	var resource NsxtNetworkDhcp
	err := ctx.ReadResource("vcd:index/nsxtNetworkDhcp:NsxtNetworkDhcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtNetworkDhcp resources.
type nsxtNetworkDhcpState struct {
	// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
	DnsServers []string `pulumi:"dnsServers"`
	// Lease time in seconds
	LeaseTime *int `pulumi:"leaseTime"`
	// IP Address of DHCP server in network. Only applicable when mode=NETWORK
	ListenerIpAddress *string `pulumi:"listenerIpAddress"`
	// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
	Mode *string `pulumi:"mode"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Parent Org VDC network ID
	OrgNetworkId *string `pulumi:"orgNetworkId"`
	// IP ranges used for DHCP pool allocation in the network
	Pools []NsxtNetworkDhcpPool `pulumi:"pools"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Org network will be looked up based on 'org_network_id' field
	Vdc *string `pulumi:"vdc"`
}

type NsxtNetworkDhcpState struct {
	// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
	DnsServers pulumi.StringArrayInput
	// Lease time in seconds
	LeaseTime pulumi.IntPtrInput
	// IP Address of DHCP server in network. Only applicable when mode=NETWORK
	ListenerIpAddress pulumi.StringPtrInput
	// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
	Mode pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Parent Org VDC network ID
	OrgNetworkId pulumi.StringPtrInput
	// IP ranges used for DHCP pool allocation in the network
	Pools NsxtNetworkDhcpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Org network will be looked up based on 'org_network_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtNetworkDhcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNetworkDhcpState)(nil)).Elem()
}

type nsxtNetworkDhcpArgs struct {
	// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
	DnsServers []string `pulumi:"dnsServers"`
	// Lease time in seconds
	LeaseTime *int `pulumi:"leaseTime"`
	// IP Address of DHCP server in network. Only applicable when mode=NETWORK
	ListenerIpAddress *string `pulumi:"listenerIpAddress"`
	// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
	Mode *string `pulumi:"mode"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Parent Org VDC network ID
	OrgNetworkId string `pulumi:"orgNetworkId"`
	// IP ranges used for DHCP pool allocation in the network
	Pools []NsxtNetworkDhcpPool `pulumi:"pools"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Org network will be looked up based on 'org_network_id' field
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtNetworkDhcp resource.
type NsxtNetworkDhcpArgs struct {
	// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
	DnsServers pulumi.StringArrayInput
	// Lease time in seconds
	LeaseTime pulumi.IntPtrInput
	// IP Address of DHCP server in network. Only applicable when mode=NETWORK
	ListenerIpAddress pulumi.StringPtrInput
	// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
	Mode pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Parent Org VDC network ID
	OrgNetworkId pulumi.StringInput
	// IP ranges used for DHCP pool allocation in the network
	Pools NsxtNetworkDhcpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Org network will be looked up based on 'org_network_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtNetworkDhcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNetworkDhcpArgs)(nil)).Elem()
}

type NsxtNetworkDhcpInput interface {
	pulumi.Input

	ToNsxtNetworkDhcpOutput() NsxtNetworkDhcpOutput
	ToNsxtNetworkDhcpOutputWithContext(ctx context.Context) NsxtNetworkDhcpOutput
}

func (*NsxtNetworkDhcp) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNetworkDhcp)(nil)).Elem()
}

func (i *NsxtNetworkDhcp) ToNsxtNetworkDhcpOutput() NsxtNetworkDhcpOutput {
	return i.ToNsxtNetworkDhcpOutputWithContext(context.Background())
}

func (i *NsxtNetworkDhcp) ToNsxtNetworkDhcpOutputWithContext(ctx context.Context) NsxtNetworkDhcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkDhcpOutput)
}

// NsxtNetworkDhcpArrayInput is an input type that accepts NsxtNetworkDhcpArray and NsxtNetworkDhcpArrayOutput values.
// You can construct a concrete instance of `NsxtNetworkDhcpArrayInput` via:
//
//	NsxtNetworkDhcpArray{ NsxtNetworkDhcpArgs{...} }
type NsxtNetworkDhcpArrayInput interface {
	pulumi.Input

	ToNsxtNetworkDhcpArrayOutput() NsxtNetworkDhcpArrayOutput
	ToNsxtNetworkDhcpArrayOutputWithContext(context.Context) NsxtNetworkDhcpArrayOutput
}

type NsxtNetworkDhcpArray []NsxtNetworkDhcpInput

func (NsxtNetworkDhcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNetworkDhcp)(nil)).Elem()
}

func (i NsxtNetworkDhcpArray) ToNsxtNetworkDhcpArrayOutput() NsxtNetworkDhcpArrayOutput {
	return i.ToNsxtNetworkDhcpArrayOutputWithContext(context.Background())
}

func (i NsxtNetworkDhcpArray) ToNsxtNetworkDhcpArrayOutputWithContext(ctx context.Context) NsxtNetworkDhcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkDhcpArrayOutput)
}

// NsxtNetworkDhcpMapInput is an input type that accepts NsxtNetworkDhcpMap and NsxtNetworkDhcpMapOutput values.
// You can construct a concrete instance of `NsxtNetworkDhcpMapInput` via:
//
//	NsxtNetworkDhcpMap{ "key": NsxtNetworkDhcpArgs{...} }
type NsxtNetworkDhcpMapInput interface {
	pulumi.Input

	ToNsxtNetworkDhcpMapOutput() NsxtNetworkDhcpMapOutput
	ToNsxtNetworkDhcpMapOutputWithContext(context.Context) NsxtNetworkDhcpMapOutput
}

type NsxtNetworkDhcpMap map[string]NsxtNetworkDhcpInput

func (NsxtNetworkDhcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNetworkDhcp)(nil)).Elem()
}

func (i NsxtNetworkDhcpMap) ToNsxtNetworkDhcpMapOutput() NsxtNetworkDhcpMapOutput {
	return i.ToNsxtNetworkDhcpMapOutputWithContext(context.Background())
}

func (i NsxtNetworkDhcpMap) ToNsxtNetworkDhcpMapOutputWithContext(ctx context.Context) NsxtNetworkDhcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkDhcpMapOutput)
}

type NsxtNetworkDhcpOutput struct{ *pulumi.OutputState }

func (NsxtNetworkDhcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNetworkDhcp)(nil)).Elem()
}

func (o NsxtNetworkDhcpOutput) ToNsxtNetworkDhcpOutput() NsxtNetworkDhcpOutput {
	return o
}

func (o NsxtNetworkDhcpOutput) ToNsxtNetworkDhcpOutputWithContext(ctx context.Context) NsxtNetworkDhcpOutput {
	return o
}

// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
func (o NsxtNetworkDhcpOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Lease time in seconds
func (o NsxtNetworkDhcpOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.IntOutput { return v.LeaseTime }).(pulumi.IntOutput)
}

// IP Address of DHCP server in network. Only applicable when mode=NETWORK
func (o NsxtNetworkDhcpOutput) ListenerIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.StringPtrOutput { return v.ListenerIpAddress }).(pulumi.StringPtrOutput)
}

// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
func (o NsxtNetworkDhcpOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxtNetworkDhcpOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Parent Org VDC network ID
func (o NsxtNetworkDhcpOutput) OrgNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.StringOutput { return v.OrgNetworkId }).(pulumi.StringOutput)
}

// IP ranges used for DHCP pool allocation in the network
func (o NsxtNetworkDhcpOutput) Pools() NsxtNetworkDhcpPoolArrayOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) NsxtNetworkDhcpPoolArrayOutput { return v.Pools }).(NsxtNetworkDhcpPoolArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: Org network will be looked up based on 'org_network_id' field
func (o NsxtNetworkDhcpOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcp) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtNetworkDhcpArrayOutput struct{ *pulumi.OutputState }

func (NsxtNetworkDhcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNetworkDhcp)(nil)).Elem()
}

func (o NsxtNetworkDhcpArrayOutput) ToNsxtNetworkDhcpArrayOutput() NsxtNetworkDhcpArrayOutput {
	return o
}

func (o NsxtNetworkDhcpArrayOutput) ToNsxtNetworkDhcpArrayOutputWithContext(ctx context.Context) NsxtNetworkDhcpArrayOutput {
	return o
}

func (o NsxtNetworkDhcpArrayOutput) Index(i pulumi.IntInput) NsxtNetworkDhcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtNetworkDhcp {
		return vs[0].([]*NsxtNetworkDhcp)[vs[1].(int)]
	}).(NsxtNetworkDhcpOutput)
}

type NsxtNetworkDhcpMapOutput struct{ *pulumi.OutputState }

func (NsxtNetworkDhcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNetworkDhcp)(nil)).Elem()
}

func (o NsxtNetworkDhcpMapOutput) ToNsxtNetworkDhcpMapOutput() NsxtNetworkDhcpMapOutput {
	return o
}

func (o NsxtNetworkDhcpMapOutput) ToNsxtNetworkDhcpMapOutputWithContext(ctx context.Context) NsxtNetworkDhcpMapOutput {
	return o
}

func (o NsxtNetworkDhcpMapOutput) MapIndex(k pulumi.StringInput) NsxtNetworkDhcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtNetworkDhcp {
		return vs[0].(map[string]*NsxtNetworkDhcp)[vs[1].(string)]
	}).(NsxtNetworkDhcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkDhcpInput)(nil)).Elem(), &NsxtNetworkDhcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkDhcpArrayInput)(nil)).Elem(), NsxtNetworkDhcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkDhcpMapInput)(nil)).Elem(), NsxtNetworkDhcpMap{})
	pulumi.RegisterOutputType(NsxtNetworkDhcpOutput{})
	pulumi.RegisterOutputType(NsxtNetworkDhcpArrayOutput{})
	pulumi.RegisterOutputType(NsxtNetworkDhcpMapOutput{})
}
