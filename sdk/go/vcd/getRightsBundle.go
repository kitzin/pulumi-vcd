// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRightsBundle(ctx *pulumi.Context, args *LookupRightsBundleArgs, opts ...pulumi.InvokeOption) (*LookupRightsBundleResult, error) {
	var rv LookupRightsBundleResult
	err := ctx.Invoke("vcd:index/getRightsBundle:getRightsBundle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRightsBundle.
type LookupRightsBundleArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getRightsBundle.
type LookupRightsBundleResult struct {
	BundleKey   string `pulumi:"bundleKey"`
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string   `pulumi:"id"`
	Name                string   `pulumi:"name"`
	PublishToAllTenants bool     `pulumi:"publishToAllTenants"`
	ReadOnly            bool     `pulumi:"readOnly"`
	Rights              []string `pulumi:"rights"`
	Tenants             []string `pulumi:"tenants"`
}

func LookupRightsBundleOutput(ctx *pulumi.Context, args LookupRightsBundleOutputArgs, opts ...pulumi.InvokeOption) LookupRightsBundleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRightsBundleResult, error) {
			args := v.(LookupRightsBundleArgs)
			r, err := LookupRightsBundle(ctx, &args, opts...)
			var s LookupRightsBundleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRightsBundleResultOutput)
}

// A collection of arguments for invoking getRightsBundle.
type LookupRightsBundleOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRightsBundleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRightsBundleArgs)(nil)).Elem()
}

// A collection of values returned by getRightsBundle.
type LookupRightsBundleResultOutput struct{ *pulumi.OutputState }

func (LookupRightsBundleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRightsBundleResult)(nil)).Elem()
}

func (o LookupRightsBundleResultOutput) ToLookupRightsBundleResultOutput() LookupRightsBundleResultOutput {
	return o
}

func (o LookupRightsBundleResultOutput) ToLookupRightsBundleResultOutputWithContext(ctx context.Context) LookupRightsBundleResultOutput {
	return o
}

func (o LookupRightsBundleResultOutput) BundleKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) string { return v.BundleKey }).(pulumi.StringOutput)
}

func (o LookupRightsBundleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRightsBundleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRightsBundleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRightsBundleResultOutput) PublishToAllTenants() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) bool { return v.PublishToAllTenants }).(pulumi.BoolOutput)
}

func (o LookupRightsBundleResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o LookupRightsBundleResultOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

func (o LookupRightsBundleResultOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRightsBundleResult) []string { return v.Tenants }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRightsBundleResultOutput{})
}
