// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExternalNetwork struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of IP scopes for the network
	IpScopes ExternalNetworkIpScopeArrayOutput `pulumi:"ipScopes"`
	Name     pulumi.StringOutput               `pulumi:"name"`
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainNetInfoAcrossDeployments pulumi.BoolPtrOutput `pulumi:"retainNetInfoAcrossDeployments"`
	// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
	// registered with the system.
	VsphereNetworks ExternalNetworkVsphereNetworkArrayOutput `pulumi:"vsphereNetworks"`
}

// NewExternalNetwork registers a new resource with the given unique name, arguments, and options.
func NewExternalNetwork(ctx *pulumi.Context,
	name string, args *ExternalNetworkArgs, opts ...pulumi.ResourceOption) (*ExternalNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpScopes == nil {
		return nil, errors.New("invalid value for required argument 'IpScopes'")
	}
	if args.VsphereNetworks == nil {
		return nil, errors.New("invalid value for required argument 'VsphereNetworks'")
	}
	var resource ExternalNetwork
	err := ctx.RegisterResource("vcd:index/externalNetwork:ExternalNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalNetwork gets an existing ExternalNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalNetworkState, opts ...pulumi.ResourceOption) (*ExternalNetwork, error) {
	var resource ExternalNetwork
	err := ctx.ReadResource("vcd:index/externalNetwork:ExternalNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalNetwork resources.
type externalNetworkState struct {
	Description *string `pulumi:"description"`
	// A list of IP scopes for the network
	IpScopes []ExternalNetworkIpScope `pulumi:"ipScopes"`
	Name     *string                  `pulumi:"name"`
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainNetInfoAcrossDeployments *bool `pulumi:"retainNetInfoAcrossDeployments"`
	// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
	// registered with the system.
	VsphereNetworks []ExternalNetworkVsphereNetwork `pulumi:"vsphereNetworks"`
}

type ExternalNetworkState struct {
	Description pulumi.StringPtrInput
	// A list of IP scopes for the network
	IpScopes ExternalNetworkIpScopeArrayInput
	Name     pulumi.StringPtrInput
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainNetInfoAcrossDeployments pulumi.BoolPtrInput
	// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
	// registered with the system.
	VsphereNetworks ExternalNetworkVsphereNetworkArrayInput
}

func (ExternalNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalNetworkState)(nil)).Elem()
}

type externalNetworkArgs struct {
	Description *string `pulumi:"description"`
	// A list of IP scopes for the network
	IpScopes []ExternalNetworkIpScope `pulumi:"ipScopes"`
	Name     *string                  `pulumi:"name"`
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainNetInfoAcrossDeployments *bool `pulumi:"retainNetInfoAcrossDeployments"`
	// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
	// registered with the system.
	VsphereNetworks []ExternalNetworkVsphereNetwork `pulumi:"vsphereNetworks"`
}

// The set of arguments for constructing a ExternalNetwork resource.
type ExternalNetworkArgs struct {
	Description pulumi.StringPtrInput
	// A list of IP scopes for the network
	IpScopes ExternalNetworkIpScopeArrayInput
	Name     pulumi.StringPtrInput
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainNetInfoAcrossDeployments pulumi.BoolPtrInput
	// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
	// registered with the system.
	VsphereNetworks ExternalNetworkVsphereNetworkArrayInput
}

func (ExternalNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalNetworkArgs)(nil)).Elem()
}

type ExternalNetworkInput interface {
	pulumi.Input

	ToExternalNetworkOutput() ExternalNetworkOutput
	ToExternalNetworkOutputWithContext(ctx context.Context) ExternalNetworkOutput
}

func (*ExternalNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetwork)(nil)).Elem()
}

func (i *ExternalNetwork) ToExternalNetworkOutput() ExternalNetworkOutput {
	return i.ToExternalNetworkOutputWithContext(context.Background())
}

func (i *ExternalNetwork) ToExternalNetworkOutputWithContext(ctx context.Context) ExternalNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkOutput)
}

// ExternalNetworkArrayInput is an input type that accepts ExternalNetworkArray and ExternalNetworkArrayOutput values.
// You can construct a concrete instance of `ExternalNetworkArrayInput` via:
//
//	ExternalNetworkArray{ ExternalNetworkArgs{...} }
type ExternalNetworkArrayInput interface {
	pulumi.Input

	ToExternalNetworkArrayOutput() ExternalNetworkArrayOutput
	ToExternalNetworkArrayOutputWithContext(context.Context) ExternalNetworkArrayOutput
}

type ExternalNetworkArray []ExternalNetworkInput

func (ExternalNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalNetwork)(nil)).Elem()
}

func (i ExternalNetworkArray) ToExternalNetworkArrayOutput() ExternalNetworkArrayOutput {
	return i.ToExternalNetworkArrayOutputWithContext(context.Background())
}

func (i ExternalNetworkArray) ToExternalNetworkArrayOutputWithContext(ctx context.Context) ExternalNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkArrayOutput)
}

// ExternalNetworkMapInput is an input type that accepts ExternalNetworkMap and ExternalNetworkMapOutput values.
// You can construct a concrete instance of `ExternalNetworkMapInput` via:
//
//	ExternalNetworkMap{ "key": ExternalNetworkArgs{...} }
type ExternalNetworkMapInput interface {
	pulumi.Input

	ToExternalNetworkMapOutput() ExternalNetworkMapOutput
	ToExternalNetworkMapOutputWithContext(context.Context) ExternalNetworkMapOutput
}

type ExternalNetworkMap map[string]ExternalNetworkInput

func (ExternalNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalNetwork)(nil)).Elem()
}

func (i ExternalNetworkMap) ToExternalNetworkMapOutput() ExternalNetworkMapOutput {
	return i.ToExternalNetworkMapOutputWithContext(context.Background())
}

func (i ExternalNetworkMap) ToExternalNetworkMapOutputWithContext(ctx context.Context) ExternalNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkMapOutput)
}

type ExternalNetworkOutput struct{ *pulumi.OutputState }

func (ExternalNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetwork)(nil)).Elem()
}

func (o ExternalNetworkOutput) ToExternalNetworkOutput() ExternalNetworkOutput {
	return o
}

func (o ExternalNetworkOutput) ToExternalNetworkOutputWithContext(ctx context.Context) ExternalNetworkOutput {
	return o
}

func (o ExternalNetworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetwork) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of IP scopes for the network
func (o ExternalNetworkOutput) IpScopes() ExternalNetworkIpScopeArrayOutput {
	return o.ApplyT(func(v *ExternalNetwork) ExternalNetworkIpScopeArrayOutput { return v.IpScopes }).(ExternalNetworkIpScopeArrayOutput)
}

func (o ExternalNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
func (o ExternalNetworkOutput) RetainNetInfoAcrossDeployments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalNetwork) pulumi.BoolPtrOutput { return v.RetainNetInfoAcrossDeployments }).(pulumi.BoolPtrOutput)
}

// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server
// registered with the system.
func (o ExternalNetworkOutput) VsphereNetworks() ExternalNetworkVsphereNetworkArrayOutput {
	return o.ApplyT(func(v *ExternalNetwork) ExternalNetworkVsphereNetworkArrayOutput { return v.VsphereNetworks }).(ExternalNetworkVsphereNetworkArrayOutput)
}

type ExternalNetworkArrayOutput struct{ *pulumi.OutputState }

func (ExternalNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalNetwork)(nil)).Elem()
}

func (o ExternalNetworkArrayOutput) ToExternalNetworkArrayOutput() ExternalNetworkArrayOutput {
	return o
}

func (o ExternalNetworkArrayOutput) ToExternalNetworkArrayOutputWithContext(ctx context.Context) ExternalNetworkArrayOutput {
	return o
}

func (o ExternalNetworkArrayOutput) Index(i pulumi.IntInput) ExternalNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalNetwork {
		return vs[0].([]*ExternalNetwork)[vs[1].(int)]
	}).(ExternalNetworkOutput)
}

type ExternalNetworkMapOutput struct{ *pulumi.OutputState }

func (ExternalNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalNetwork)(nil)).Elem()
}

func (o ExternalNetworkMapOutput) ToExternalNetworkMapOutput() ExternalNetworkMapOutput {
	return o
}

func (o ExternalNetworkMapOutput) ToExternalNetworkMapOutputWithContext(ctx context.Context) ExternalNetworkMapOutput {
	return o
}

func (o ExternalNetworkMapOutput) MapIndex(k pulumi.StringInput) ExternalNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalNetwork {
		return vs[0].(map[string]*ExternalNetwork)[vs[1].(string)]
	}).(ExternalNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNetworkInput)(nil)).Elem(), &ExternalNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNetworkArrayInput)(nil)).Elem(), ExternalNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNetworkMapInput)(nil)).Elem(), ExternalNetworkMap{})
	pulumi.RegisterOutputType(ExternalNetworkOutput{})
	pulumi.RegisterOutputType(ExternalNetworkArrayOutput{})
	pulumi.RegisterOutputType(ExternalNetworkMapOutput{})
}
