// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LbVirtualServer struct {
	pulumi.CustomResourceState

	// Application profile ID to be associated with the virtual server
	AppProfileId pulumi.StringPtrOutput `pulumi:"appProfileId"`
	// List of attached application rule IDs
	AppRuleIds pulumi.StringArrayOutput `pulumi:"appRuleIds"`
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit pulumi.IntPtrOutput `pulumi:"connectionLimit"`
	// Maximum incoming new connection requests per second
	ConnectionRateLimit pulumi.IntPtrOutput `pulumi:"connectionRateLimit"`
	// Virtual Server description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// Enable virtual server acceleration
	EnableAcceleration pulumi.BoolPtrOutput `pulumi:"enableAcceleration"`
	// Defines if the virtual server is enabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// IP address that the load balancer listens on
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Unique Virtual Server name
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Port number that the load balancer listens on
	Port pulumi.IntOutput `pulumi:"port"`
	// Protocol that the virtual server accepts
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The server pool that the load balancer will use
	ServerPoolId pulumi.StringPtrOutput `pulumi:"serverPoolId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewLbVirtualServer registers a new resource with the given unique name, arguments, and options.
func NewLbVirtualServer(ctx *pulumi.Context,
	name string, args *LbVirtualServerArgs, opts ...pulumi.ResourceOption) (*LbVirtualServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	var resource LbVirtualServer
	err := ctx.RegisterResource("vcd:index/lbVirtualServer:LbVirtualServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbVirtualServer gets an existing LbVirtualServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbVirtualServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbVirtualServerState, opts ...pulumi.ResourceOption) (*LbVirtualServer, error) {
	var resource LbVirtualServer
	err := ctx.ReadResource("vcd:index/lbVirtualServer:LbVirtualServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbVirtualServer resources.
type lbVirtualServerState struct {
	// Application profile ID to be associated with the virtual server
	AppProfileId *string `pulumi:"appProfileId"`
	// List of attached application rule IDs
	AppRuleIds []string `pulumi:"appRuleIds"`
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// Maximum incoming new connection requests per second
	ConnectionRateLimit *int `pulumi:"connectionRateLimit"`
	// Virtual Server description
	Description *string `pulumi:"description"`
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway *string `pulumi:"edgeGateway"`
	// Enable virtual server acceleration
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// Defines if the virtual server is enabled
	Enabled *bool `pulumi:"enabled"`
	// IP address that the load balancer listens on
	IpAddress *string `pulumi:"ipAddress"`
	// Unique Virtual Server name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Port number that the load balancer listens on
	Port *int `pulumi:"port"`
	// Protocol that the virtual server accepts
	Protocol *string `pulumi:"protocol"`
	// The server pool that the load balancer will use
	ServerPoolId *string `pulumi:"serverPoolId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type LbVirtualServerState struct {
	// Application profile ID to be associated with the virtual server
	AppProfileId pulumi.StringPtrInput
	// List of attached application rule IDs
	AppRuleIds pulumi.StringArrayInput
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit pulumi.IntPtrInput
	// Maximum incoming new connection requests per second
	ConnectionRateLimit pulumi.IntPtrInput
	// Virtual Server description
	Description pulumi.StringPtrInput
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway pulumi.StringPtrInput
	// Enable virtual server acceleration
	EnableAcceleration pulumi.BoolPtrInput
	// Defines if the virtual server is enabled
	Enabled pulumi.BoolPtrInput
	// IP address that the load balancer listens on
	IpAddress pulumi.StringPtrInput
	// Unique Virtual Server name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Port number that the load balancer listens on
	Port pulumi.IntPtrInput
	// Protocol that the virtual server accepts
	Protocol pulumi.StringPtrInput
	// The server pool that the load balancer will use
	ServerPoolId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbVirtualServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbVirtualServerState)(nil)).Elem()
}

type lbVirtualServerArgs struct {
	// Application profile ID to be associated with the virtual server
	AppProfileId *string `pulumi:"appProfileId"`
	// List of attached application rule IDs
	AppRuleIds []string `pulumi:"appRuleIds"`
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// Maximum incoming new connection requests per second
	ConnectionRateLimit *int `pulumi:"connectionRateLimit"`
	// Virtual Server description
	Description *string `pulumi:"description"`
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway string `pulumi:"edgeGateway"`
	// Enable virtual server acceleration
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// Defines if the virtual server is enabled
	Enabled *bool `pulumi:"enabled"`
	// IP address that the load balancer listens on
	IpAddress string `pulumi:"ipAddress"`
	// Unique Virtual Server name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Port number that the load balancer listens on
	Port int `pulumi:"port"`
	// Protocol that the virtual server accepts
	Protocol string `pulumi:"protocol"`
	// The server pool that the load balancer will use
	ServerPoolId *string `pulumi:"serverPoolId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a LbVirtualServer resource.
type LbVirtualServerArgs struct {
	// Application profile ID to be associated with the virtual server
	AppProfileId pulumi.StringPtrInput
	// List of attached application rule IDs
	AppRuleIds pulumi.StringArrayInput
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit pulumi.IntPtrInput
	// Maximum incoming new connection requests per second
	ConnectionRateLimit pulumi.IntPtrInput
	// Virtual Server description
	Description pulumi.StringPtrInput
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway pulumi.StringInput
	// Enable virtual server acceleration
	EnableAcceleration pulumi.BoolPtrInput
	// Defines if the virtual server is enabled
	Enabled pulumi.BoolPtrInput
	// IP address that the load balancer listens on
	IpAddress pulumi.StringInput
	// Unique Virtual Server name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Port number that the load balancer listens on
	Port pulumi.IntInput
	// Protocol that the virtual server accepts
	Protocol pulumi.StringInput
	// The server pool that the load balancer will use
	ServerPoolId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbVirtualServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbVirtualServerArgs)(nil)).Elem()
}

type LbVirtualServerInput interface {
	pulumi.Input

	ToLbVirtualServerOutput() LbVirtualServerOutput
	ToLbVirtualServerOutputWithContext(ctx context.Context) LbVirtualServerOutput
}

func (*LbVirtualServer) ElementType() reflect.Type {
	return reflect.TypeOf((**LbVirtualServer)(nil)).Elem()
}

func (i *LbVirtualServer) ToLbVirtualServerOutput() LbVirtualServerOutput {
	return i.ToLbVirtualServerOutputWithContext(context.Background())
}

func (i *LbVirtualServer) ToLbVirtualServerOutputWithContext(ctx context.Context) LbVirtualServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbVirtualServerOutput)
}

// LbVirtualServerArrayInput is an input type that accepts LbVirtualServerArray and LbVirtualServerArrayOutput values.
// You can construct a concrete instance of `LbVirtualServerArrayInput` via:
//
//	LbVirtualServerArray{ LbVirtualServerArgs{...} }
type LbVirtualServerArrayInput interface {
	pulumi.Input

	ToLbVirtualServerArrayOutput() LbVirtualServerArrayOutput
	ToLbVirtualServerArrayOutputWithContext(context.Context) LbVirtualServerArrayOutput
}

type LbVirtualServerArray []LbVirtualServerInput

func (LbVirtualServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbVirtualServer)(nil)).Elem()
}

func (i LbVirtualServerArray) ToLbVirtualServerArrayOutput() LbVirtualServerArrayOutput {
	return i.ToLbVirtualServerArrayOutputWithContext(context.Background())
}

func (i LbVirtualServerArray) ToLbVirtualServerArrayOutputWithContext(ctx context.Context) LbVirtualServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbVirtualServerArrayOutput)
}

// LbVirtualServerMapInput is an input type that accepts LbVirtualServerMap and LbVirtualServerMapOutput values.
// You can construct a concrete instance of `LbVirtualServerMapInput` via:
//
//	LbVirtualServerMap{ "key": LbVirtualServerArgs{...} }
type LbVirtualServerMapInput interface {
	pulumi.Input

	ToLbVirtualServerMapOutput() LbVirtualServerMapOutput
	ToLbVirtualServerMapOutputWithContext(context.Context) LbVirtualServerMapOutput
}

type LbVirtualServerMap map[string]LbVirtualServerInput

func (LbVirtualServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbVirtualServer)(nil)).Elem()
}

func (i LbVirtualServerMap) ToLbVirtualServerMapOutput() LbVirtualServerMapOutput {
	return i.ToLbVirtualServerMapOutputWithContext(context.Background())
}

func (i LbVirtualServerMap) ToLbVirtualServerMapOutputWithContext(ctx context.Context) LbVirtualServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbVirtualServerMapOutput)
}

type LbVirtualServerOutput struct{ *pulumi.OutputState }

func (LbVirtualServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbVirtualServer)(nil)).Elem()
}

func (o LbVirtualServerOutput) ToLbVirtualServerOutput() LbVirtualServerOutput {
	return o
}

func (o LbVirtualServerOutput) ToLbVirtualServerOutputWithContext(ctx context.Context) LbVirtualServerOutput {
	return o
}

// Application profile ID to be associated with the virtual server
func (o LbVirtualServerOutput) AppProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringPtrOutput { return v.AppProfileId }).(pulumi.StringPtrOutput)
}

// List of attached application rule IDs
func (o LbVirtualServerOutput) AppRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringArrayOutput { return v.AppRuleIds }).(pulumi.StringArrayOutput)
}

// Maximum concurrent connections that the virtual server can process
func (o LbVirtualServerOutput) ConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.IntPtrOutput { return v.ConnectionLimit }).(pulumi.IntPtrOutput)
}

// Maximum incoming new connection requests per second
func (o LbVirtualServerOutput) ConnectionRateLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.IntPtrOutput { return v.ConnectionRateLimit }).(pulumi.IntPtrOutput)
}

// Virtual Server description
func (o LbVirtualServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Edge gateway name in which the LB Virtual Server is located
func (o LbVirtualServerOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// Enable virtual server acceleration
func (o LbVirtualServerOutput) EnableAcceleration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.BoolPtrOutput { return v.EnableAcceleration }).(pulumi.BoolPtrOutput)
}

// Defines if the virtual server is enabled
func (o LbVirtualServerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// IP address that the load balancer listens on
func (o LbVirtualServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Unique Virtual Server name
func (o LbVirtualServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o LbVirtualServerOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Port number that the load balancer listens on
func (o LbVirtualServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Protocol that the virtual server accepts
func (o LbVirtualServerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The server pool that the load balancer will use
func (o LbVirtualServerOutput) ServerPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringPtrOutput { return v.ServerPoolId }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o LbVirtualServerOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbVirtualServer) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type LbVirtualServerArrayOutput struct{ *pulumi.OutputState }

func (LbVirtualServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbVirtualServer)(nil)).Elem()
}

func (o LbVirtualServerArrayOutput) ToLbVirtualServerArrayOutput() LbVirtualServerArrayOutput {
	return o
}

func (o LbVirtualServerArrayOutput) ToLbVirtualServerArrayOutputWithContext(ctx context.Context) LbVirtualServerArrayOutput {
	return o
}

func (o LbVirtualServerArrayOutput) Index(i pulumi.IntInput) LbVirtualServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbVirtualServer {
		return vs[0].([]*LbVirtualServer)[vs[1].(int)]
	}).(LbVirtualServerOutput)
}

type LbVirtualServerMapOutput struct{ *pulumi.OutputState }

func (LbVirtualServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbVirtualServer)(nil)).Elem()
}

func (o LbVirtualServerMapOutput) ToLbVirtualServerMapOutput() LbVirtualServerMapOutput {
	return o
}

func (o LbVirtualServerMapOutput) ToLbVirtualServerMapOutputWithContext(ctx context.Context) LbVirtualServerMapOutput {
	return o
}

func (o LbVirtualServerMapOutput) MapIndex(k pulumi.StringInput) LbVirtualServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbVirtualServer {
		return vs[0].(map[string]*LbVirtualServer)[vs[1].(string)]
	}).(LbVirtualServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbVirtualServerInput)(nil)).Elem(), &LbVirtualServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbVirtualServerArrayInput)(nil)).Elem(), LbVirtualServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbVirtualServerMapInput)(nil)).Elem(), LbVirtualServerMap{})
	pulumi.RegisterOutputType(LbVirtualServerOutput{})
	pulumi.RegisterOutputType(LbVirtualServerArrayOutput{})
	pulumi.RegisterOutputType(LbVirtualServerMapOutput{})
}
