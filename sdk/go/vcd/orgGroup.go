// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgGroup struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Group name
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Identity provider type - 'SAML' or 'INTEGRATED' for LDAP
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// Existing role name to assign
	Role pulumi.StringOutput `pulumi:"role"`
	// Read only. Set of user names that belong to the group
	UserNames pulumi.StringArrayOutput `pulumi:"userNames"`
}

// NewOrgGroup registers a new resource with the given unique name, arguments, and options.
func NewOrgGroup(ctx *pulumi.Context,
	name string, args *OrgGroupArgs, opts ...pulumi.ResourceOption) (*OrgGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource OrgGroup
	err := ctx.RegisterResource("vcd:index/orgGroup:OrgGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgGroup gets an existing OrgGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgGroupState, opts ...pulumi.ResourceOption) (*OrgGroup, error) {
	var resource OrgGroup
	err := ctx.ReadResource("vcd:index/orgGroup:OrgGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgGroup resources.
type orgGroupState struct {
	// Description
	Description *string `pulumi:"description"`
	// Group name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Identity provider type - 'SAML' or 'INTEGRATED' for LDAP
	ProviderType *string `pulumi:"providerType"`
	// Existing role name to assign
	Role *string `pulumi:"role"`
	// Read only. Set of user names that belong to the group
	UserNames []string `pulumi:"userNames"`
}

type OrgGroupState struct {
	// Description
	Description pulumi.StringPtrInput
	// Group name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Identity provider type - 'SAML' or 'INTEGRATED' for LDAP
	ProviderType pulumi.StringPtrInput
	// Existing role name to assign
	Role pulumi.StringPtrInput
	// Read only. Set of user names that belong to the group
	UserNames pulumi.StringArrayInput
}

func (OrgGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgGroupState)(nil)).Elem()
}

type orgGroupArgs struct {
	// Description
	Description *string `pulumi:"description"`
	// Group name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Identity provider type - 'SAML' or 'INTEGRATED' for LDAP
	ProviderType string `pulumi:"providerType"`
	// Existing role name to assign
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a OrgGroup resource.
type OrgGroupArgs struct {
	// Description
	Description pulumi.StringPtrInput
	// Group name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Identity provider type - 'SAML' or 'INTEGRATED' for LDAP
	ProviderType pulumi.StringInput
	// Existing role name to assign
	Role pulumi.StringInput
}

func (OrgGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgGroupArgs)(nil)).Elem()
}

type OrgGroupInput interface {
	pulumi.Input

	ToOrgGroupOutput() OrgGroupOutput
	ToOrgGroupOutputWithContext(ctx context.Context) OrgGroupOutput
}

func (*OrgGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgGroup)(nil)).Elem()
}

func (i *OrgGroup) ToOrgGroupOutput() OrgGroupOutput {
	return i.ToOrgGroupOutputWithContext(context.Background())
}

func (i *OrgGroup) ToOrgGroupOutputWithContext(ctx context.Context) OrgGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgGroupOutput)
}

// OrgGroupArrayInput is an input type that accepts OrgGroupArray and OrgGroupArrayOutput values.
// You can construct a concrete instance of `OrgGroupArrayInput` via:
//
//	OrgGroupArray{ OrgGroupArgs{...} }
type OrgGroupArrayInput interface {
	pulumi.Input

	ToOrgGroupArrayOutput() OrgGroupArrayOutput
	ToOrgGroupArrayOutputWithContext(context.Context) OrgGroupArrayOutput
}

type OrgGroupArray []OrgGroupInput

func (OrgGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgGroup)(nil)).Elem()
}

func (i OrgGroupArray) ToOrgGroupArrayOutput() OrgGroupArrayOutput {
	return i.ToOrgGroupArrayOutputWithContext(context.Background())
}

func (i OrgGroupArray) ToOrgGroupArrayOutputWithContext(ctx context.Context) OrgGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgGroupArrayOutput)
}

// OrgGroupMapInput is an input type that accepts OrgGroupMap and OrgGroupMapOutput values.
// You can construct a concrete instance of `OrgGroupMapInput` via:
//
//	OrgGroupMap{ "key": OrgGroupArgs{...} }
type OrgGroupMapInput interface {
	pulumi.Input

	ToOrgGroupMapOutput() OrgGroupMapOutput
	ToOrgGroupMapOutputWithContext(context.Context) OrgGroupMapOutput
}

type OrgGroupMap map[string]OrgGroupInput

func (OrgGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgGroup)(nil)).Elem()
}

func (i OrgGroupMap) ToOrgGroupMapOutput() OrgGroupMapOutput {
	return i.ToOrgGroupMapOutputWithContext(context.Background())
}

func (i OrgGroupMap) ToOrgGroupMapOutputWithContext(ctx context.Context) OrgGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgGroupMapOutput)
}

type OrgGroupOutput struct{ *pulumi.OutputState }

func (OrgGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgGroup)(nil)).Elem()
}

func (o OrgGroupOutput) ToOrgGroupOutput() OrgGroupOutput {
	return o
}

func (o OrgGroupOutput) ToOrgGroupOutputWithContext(ctx context.Context) OrgGroupOutput {
	return o
}

// Description
func (o OrgGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Group name
func (o OrgGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o OrgGroupOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgGroup) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Identity provider type - 'SAML' or 'INTEGRATED' for LDAP
func (o OrgGroupOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgGroup) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// Existing role name to assign
func (o OrgGroupOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgGroup) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Read only. Set of user names that belong to the group
func (o OrgGroupOutput) UserNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgGroup) pulumi.StringArrayOutput { return v.UserNames }).(pulumi.StringArrayOutput)
}

type OrgGroupArrayOutput struct{ *pulumi.OutputState }

func (OrgGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgGroup)(nil)).Elem()
}

func (o OrgGroupArrayOutput) ToOrgGroupArrayOutput() OrgGroupArrayOutput {
	return o
}

func (o OrgGroupArrayOutput) ToOrgGroupArrayOutputWithContext(ctx context.Context) OrgGroupArrayOutput {
	return o
}

func (o OrgGroupArrayOutput) Index(i pulumi.IntInput) OrgGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgGroup {
		return vs[0].([]*OrgGroup)[vs[1].(int)]
	}).(OrgGroupOutput)
}

type OrgGroupMapOutput struct{ *pulumi.OutputState }

func (OrgGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgGroup)(nil)).Elem()
}

func (o OrgGroupMapOutput) ToOrgGroupMapOutput() OrgGroupMapOutput {
	return o
}

func (o OrgGroupMapOutput) ToOrgGroupMapOutputWithContext(ctx context.Context) OrgGroupMapOutput {
	return o
}

func (o OrgGroupMapOutput) MapIndex(k pulumi.StringInput) OrgGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgGroup {
		return vs[0].(map[string]*OrgGroup)[vs[1].(string)]
	}).(OrgGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgGroupInput)(nil)).Elem(), &OrgGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgGroupArrayInput)(nil)).Elem(), OrgGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgGroupMapInput)(nil)).Elem(), OrgGroupMap{})
	pulumi.RegisterOutputType(OrgGroupOutput{})
	pulumi.RegisterOutputType(OrgGroupArrayOutput{})
	pulumi.RegisterOutputType(OrgGroupMapOutput{})
}
