// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupLibraryCertificate(ctx *pulumi.Context, args *LookupLibraryCertificateArgs, opts ...pulumi.InvokeOption) (*LookupLibraryCertificateResult, error) {
	var rv LookupLibraryCertificateResult
	err := ctx.Invoke("vcd:index/getLibraryCertificate:getLibraryCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLibraryCertificate.
type LookupLibraryCertificateArgs struct {
	Alias       *string `pulumi:"alias"`
	Certificate *string `pulumi:"certificate"`
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	Org         *string `pulumi:"org"`
}

// A collection of values returned by getLibraryCertificate.
type LookupLibraryCertificateResult struct {
	Alias       string  `pulumi:"alias"`
	Certificate string  `pulumi:"certificate"`
	Description string  `pulumi:"description"`
	Id          string  `pulumi:"id"`
	Org         *string `pulumi:"org"`
}

func LookupLibraryCertificateOutput(ctx *pulumi.Context, args LookupLibraryCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupLibraryCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLibraryCertificateResult, error) {
			args := v.(LookupLibraryCertificateArgs)
			r, err := LookupLibraryCertificate(ctx, &args, opts...)
			var s LookupLibraryCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLibraryCertificateResultOutput)
}

// A collection of arguments for invoking getLibraryCertificate.
type LookupLibraryCertificateOutputArgs struct {
	Alias       pulumi.StringPtrInput `pulumi:"alias"`
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	Org         pulumi.StringPtrInput `pulumi:"org"`
}

func (LookupLibraryCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLibraryCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getLibraryCertificate.
type LookupLibraryCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupLibraryCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLibraryCertificateResult)(nil)).Elem()
}

func (o LookupLibraryCertificateResultOutput) ToLookupLibraryCertificateResultOutput() LookupLibraryCertificateResultOutput {
	return o
}

func (o LookupLibraryCertificateResultOutput) ToLookupLibraryCertificateResultOutputWithContext(ctx context.Context) LookupLibraryCertificateResultOutput {
	return o
}

func (o LookupLibraryCertificateResultOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLibraryCertificateResult) string { return v.Alias }).(pulumi.StringOutput)
}

func (o LookupLibraryCertificateResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLibraryCertificateResult) string { return v.Certificate }).(pulumi.StringOutput)
}

func (o LookupLibraryCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLibraryCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupLibraryCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLibraryCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLibraryCertificateResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLibraryCertificateResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLibraryCertificateResultOutput{})
}
