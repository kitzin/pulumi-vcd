// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgVdc struct {
	pulumi.CustomResourceState

	// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
	AllocationModel pulumi.StringOutput `pulumi:"allocationModel"`
	// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
	// ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit pulumi.BoolOutput `pulumi:"allowOverCommit"`
	// The compute capacity allocated to this VDC.
	ComputeCapacity OrgVdcComputeCapacityOutput `pulumi:"computeCapacity"`
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
	// 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
	// element is empty, vCD sets a value
	CpuGuaranteed pulumi.Float64Output `pulumi:"cpuGuaranteed"`
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
	// consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
	// AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
	CpuSpeed pulumi.IntOutput `pulumi:"cpuSpeed"`
	// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	DefaultComputePolicyId pulumi.StringOutput `pulumi:"defaultComputePolicyId"`
	// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	//
	// Deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId pulumi.StringOutput `pulumi:"defaultVmSizingPolicyId"`
	// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
	DeleteForce pulumi.BoolOutput `pulumi:"deleteForce"`
	// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive pulumi.BoolOutput      `pulumi:"deleteRecursive"`
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
	EdgeClusterId pulumi.StringPtrOutput `pulumi:"edgeClusterId"`
	// Set to true to indicate if the Flex VDC is to be elastic.
	Elasticity pulumi.BoolOutput `pulumi:"elasticity"`
	// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
	// can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
	// provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning pulumi.BoolPtrOutput `pulumi:"enableFastProvisioning"`
	// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
	// provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning pulumi.BoolPtrOutput `pulumi:"enableThinProvisioning"`
	// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
	// behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery pulumi.BoolPtrOutput `pulumi:"enableVmDiscovery"`
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
	IncludeVmMemoryOverhead pulumi.BoolOutput `pulumi:"includeVmMemoryOverhead"`
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
	// then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
	// Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
	MemoryGuaranteed pulumi.Float64Output `pulumi:"memoryGuaranteed"`
	// Key and value pairs for Org VDC metadata
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// Metadata entries for the given VDC
	MetadataEntries OrgVdcMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	Name            pulumi.StringOutput            `pulumi:"name"`
	// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName pulumi.StringPtrOutput `pulumi:"networkPoolName"`
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
	// deployed.
	NetworkQuota pulumi.IntPtrOutput `pulumi:"networkQuota"`
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota pulumi.IntPtrOutput `pulumi:"nicQuota"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// A reference to the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName pulumi.StringOutput `pulumi:"providerVdcName"`
	// Storage profiles supported by this VDC.
	StorageProfiles OrgVdcStorageProfileArrayOutput `pulumi:"storageProfiles"`
	// Set of VM Placement Policy IDs
	VmPlacementPolicyIds pulumi.StringArrayOutput `pulumi:"vmPlacementPolicyIds"`
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
	// templates. Defaults to 0, which specifies an unlimited number.
	VmQuota pulumi.IntPtrOutput `pulumi:"vmQuota"`
	// Set of VM Sizing Policy IDs
	VmSizingPolicyIds pulumi.StringArrayOutput `pulumi:"vmSizingPolicyIds"`
}

// NewOrgVdc registers a new resource with the given unique name, arguments, and options.
func NewOrgVdc(ctx *pulumi.Context,
	name string, args *OrgVdcArgs, opts ...pulumi.ResourceOption) (*OrgVdc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocationModel == nil {
		return nil, errors.New("invalid value for required argument 'AllocationModel'")
	}
	if args.ComputeCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ComputeCapacity'")
	}
	if args.DeleteForce == nil {
		return nil, errors.New("invalid value for required argument 'DeleteForce'")
	}
	if args.DeleteRecursive == nil {
		return nil, errors.New("invalid value for required argument 'DeleteRecursive'")
	}
	if args.ProviderVdcName == nil {
		return nil, errors.New("invalid value for required argument 'ProviderVdcName'")
	}
	if args.StorageProfiles == nil {
		return nil, errors.New("invalid value for required argument 'StorageProfiles'")
	}
	var resource OrgVdc
	err := ctx.RegisterResource("vcd:index/orgVdc:OrgVdc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgVdc gets an existing OrgVdc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgVdc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgVdcState, opts ...pulumi.ResourceOption) (*OrgVdc, error) {
	var resource OrgVdc
	err := ctx.ReadResource("vcd:index/orgVdc:OrgVdc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgVdc resources.
type orgVdcState struct {
	// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
	AllocationModel *string `pulumi:"allocationModel"`
	// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
	// ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit *bool `pulumi:"allowOverCommit"`
	// The compute capacity allocated to this VDC.
	ComputeCapacity *OrgVdcComputeCapacity `pulumi:"computeCapacity"`
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
	// 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
	// element is empty, vCD sets a value
	CpuGuaranteed *float64 `pulumi:"cpuGuaranteed"`
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
	// consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
	// AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
	CpuSpeed *int `pulumi:"cpuSpeed"`
	// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	DefaultComputePolicyId *string `pulumi:"defaultComputePolicyId"`
	// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	//
	// Deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId *string `pulumi:"defaultVmSizingPolicyId"`
	// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
	DeleteForce *bool `pulumi:"deleteForce"`
	// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive *bool   `pulumi:"deleteRecursive"`
	Description     *string `pulumi:"description"`
	// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
	EdgeClusterId *string `pulumi:"edgeClusterId"`
	// Set to true to indicate if the Flex VDC is to be elastic.
	Elasticity *bool `pulumi:"elasticity"`
	// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
	// can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
	// provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning *bool `pulumi:"enableFastProvisioning"`
	// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
	// provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning *bool `pulumi:"enableThinProvisioning"`
	// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
	// behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery *bool `pulumi:"enableVmDiscovery"`
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled *bool `pulumi:"enabled"`
	// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
	IncludeVmMemoryOverhead *bool `pulumi:"includeVmMemoryOverhead"`
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
	// then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
	// Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
	MemoryGuaranteed *float64 `pulumi:"memoryGuaranteed"`
	// Key and value pairs for Org VDC metadata
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given VDC
	MetadataEntries []OrgVdcMetadataEntry `pulumi:"metadataEntries"`
	Name            *string               `pulumi:"name"`
	// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName *string `pulumi:"networkPoolName"`
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
	// deployed.
	NetworkQuota *int `pulumi:"networkQuota"`
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota *int `pulumi:"nicQuota"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// A reference to the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName *string `pulumi:"providerVdcName"`
	// Storage profiles supported by this VDC.
	StorageProfiles []OrgVdcStorageProfile `pulumi:"storageProfiles"`
	// Set of VM Placement Policy IDs
	VmPlacementPolicyIds []string `pulumi:"vmPlacementPolicyIds"`
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
	// templates. Defaults to 0, which specifies an unlimited number.
	VmQuota *int `pulumi:"vmQuota"`
	// Set of VM Sizing Policy IDs
	VmSizingPolicyIds []string `pulumi:"vmSizingPolicyIds"`
}

type OrgVdcState struct {
	// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
	AllocationModel pulumi.StringPtrInput
	// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
	// ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit pulumi.BoolPtrInput
	// The compute capacity allocated to this VDC.
	ComputeCapacity OrgVdcComputeCapacityPtrInput
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
	// 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
	// element is empty, vCD sets a value
	CpuGuaranteed pulumi.Float64PtrInput
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
	// consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
	// AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
	CpuSpeed pulumi.IntPtrInput
	// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	DefaultComputePolicyId pulumi.StringPtrInput
	// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	//
	// Deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId pulumi.StringPtrInput
	// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
	DeleteForce pulumi.BoolPtrInput
	// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive pulumi.BoolPtrInput
	Description     pulumi.StringPtrInput
	// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
	EdgeClusterId pulumi.StringPtrInput
	// Set to true to indicate if the Flex VDC is to be elastic.
	Elasticity pulumi.BoolPtrInput
	// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
	// can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
	// provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning pulumi.BoolPtrInput
	// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
	// provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning pulumi.BoolPtrInput
	// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
	// behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery pulumi.BoolPtrInput
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled pulumi.BoolPtrInput
	// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
	IncludeVmMemoryOverhead pulumi.BoolPtrInput
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
	// then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
	// Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
	MemoryGuaranteed pulumi.Float64PtrInput
	// Key and value pairs for Org VDC metadata
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given VDC
	MetadataEntries OrgVdcMetadataEntryArrayInput
	Name            pulumi.StringPtrInput
	// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName pulumi.StringPtrInput
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
	// deployed.
	NetworkQuota pulumi.IntPtrInput
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota pulumi.IntPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// A reference to the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName pulumi.StringPtrInput
	// Storage profiles supported by this VDC.
	StorageProfiles OrgVdcStorageProfileArrayInput
	// Set of VM Placement Policy IDs
	VmPlacementPolicyIds pulumi.StringArrayInput
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
	// templates. Defaults to 0, which specifies an unlimited number.
	VmQuota pulumi.IntPtrInput
	// Set of VM Sizing Policy IDs
	VmSizingPolicyIds pulumi.StringArrayInput
}

func (OrgVdcState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgVdcState)(nil)).Elem()
}

type orgVdcArgs struct {
	// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
	AllocationModel string `pulumi:"allocationModel"`
	// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
	// ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit *bool `pulumi:"allowOverCommit"`
	// The compute capacity allocated to this VDC.
	ComputeCapacity OrgVdcComputeCapacity `pulumi:"computeCapacity"`
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
	// 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
	// element is empty, vCD sets a value
	CpuGuaranteed *float64 `pulumi:"cpuGuaranteed"`
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
	// consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
	// AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
	CpuSpeed *int `pulumi:"cpuSpeed"`
	// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	DefaultComputePolicyId *string `pulumi:"defaultComputePolicyId"`
	// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	//
	// Deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId *string `pulumi:"defaultVmSizingPolicyId"`
	// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
	DeleteForce bool `pulumi:"deleteForce"`
	// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive bool    `pulumi:"deleteRecursive"`
	Description     *string `pulumi:"description"`
	// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
	EdgeClusterId *string `pulumi:"edgeClusterId"`
	// Set to true to indicate if the Flex VDC is to be elastic.
	Elasticity *bool `pulumi:"elasticity"`
	// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
	// can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
	// provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning *bool `pulumi:"enableFastProvisioning"`
	// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
	// provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning *bool `pulumi:"enableThinProvisioning"`
	// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
	// behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery *bool `pulumi:"enableVmDiscovery"`
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled *bool `pulumi:"enabled"`
	// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
	IncludeVmMemoryOverhead *bool `pulumi:"includeVmMemoryOverhead"`
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
	// then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
	// Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
	MemoryGuaranteed *float64 `pulumi:"memoryGuaranteed"`
	// Key and value pairs for Org VDC metadata
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given VDC
	MetadataEntries []OrgVdcMetadataEntry `pulumi:"metadataEntries"`
	Name            *string               `pulumi:"name"`
	// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName *string `pulumi:"networkPoolName"`
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
	// deployed.
	NetworkQuota *int `pulumi:"networkQuota"`
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota *int `pulumi:"nicQuota"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// A reference to the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName string `pulumi:"providerVdcName"`
	// Storage profiles supported by this VDC.
	StorageProfiles []OrgVdcStorageProfile `pulumi:"storageProfiles"`
	// Set of VM Placement Policy IDs
	VmPlacementPolicyIds []string `pulumi:"vmPlacementPolicyIds"`
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
	// templates. Defaults to 0, which specifies an unlimited number.
	VmQuota *int `pulumi:"vmQuota"`
	// Set of VM Sizing Policy IDs
	VmSizingPolicyIds []string `pulumi:"vmSizingPolicyIds"`
}

// The set of arguments for constructing a OrgVdc resource.
type OrgVdcArgs struct {
	// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
	AllocationModel pulumi.StringInput
	// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
	// ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit pulumi.BoolPtrInput
	// The compute capacity allocated to this VDC.
	ComputeCapacity OrgVdcComputeCapacityInput
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
	// 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
	// element is empty, vCD sets a value
	CpuGuaranteed pulumi.Float64PtrInput
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
	// consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
	// AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
	CpuSpeed pulumi.IntPtrInput
	// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	DefaultComputePolicyId pulumi.StringPtrInput
	// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	//
	// Deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId pulumi.StringPtrInput
	// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
	DeleteForce pulumi.BoolInput
	// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive pulumi.BoolInput
	Description     pulumi.StringPtrInput
	// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
	EdgeClusterId pulumi.StringPtrInput
	// Set to true to indicate if the Flex VDC is to be elastic.
	Elasticity pulumi.BoolPtrInput
	// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
	// can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
	// provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning pulumi.BoolPtrInput
	// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
	// provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning pulumi.BoolPtrInput
	// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
	// behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery pulumi.BoolPtrInput
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled pulumi.BoolPtrInput
	// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
	IncludeVmMemoryOverhead pulumi.BoolPtrInput
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
	// then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
	// Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
	MemoryGuaranteed pulumi.Float64PtrInput
	// Key and value pairs for Org VDC metadata
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given VDC
	MetadataEntries OrgVdcMetadataEntryArrayInput
	Name            pulumi.StringPtrInput
	// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName pulumi.StringPtrInput
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
	// deployed.
	NetworkQuota pulumi.IntPtrInput
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota pulumi.IntPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// A reference to the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName pulumi.StringInput
	// Storage profiles supported by this VDC.
	StorageProfiles OrgVdcStorageProfileArrayInput
	// Set of VM Placement Policy IDs
	VmPlacementPolicyIds pulumi.StringArrayInput
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
	// templates. Defaults to 0, which specifies an unlimited number.
	VmQuota pulumi.IntPtrInput
	// Set of VM Sizing Policy IDs
	VmSizingPolicyIds pulumi.StringArrayInput
}

func (OrgVdcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgVdcArgs)(nil)).Elem()
}

type OrgVdcInput interface {
	pulumi.Input

	ToOrgVdcOutput() OrgVdcOutput
	ToOrgVdcOutputWithContext(ctx context.Context) OrgVdcOutput
}

func (*OrgVdc) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgVdc)(nil)).Elem()
}

func (i *OrgVdc) ToOrgVdcOutput() OrgVdcOutput {
	return i.ToOrgVdcOutputWithContext(context.Background())
}

func (i *OrgVdc) ToOrgVdcOutputWithContext(ctx context.Context) OrgVdcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcOutput)
}

// OrgVdcArrayInput is an input type that accepts OrgVdcArray and OrgVdcArrayOutput values.
// You can construct a concrete instance of `OrgVdcArrayInput` via:
//
//	OrgVdcArray{ OrgVdcArgs{...} }
type OrgVdcArrayInput interface {
	pulumi.Input

	ToOrgVdcArrayOutput() OrgVdcArrayOutput
	ToOrgVdcArrayOutputWithContext(context.Context) OrgVdcArrayOutput
}

type OrgVdcArray []OrgVdcInput

func (OrgVdcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgVdc)(nil)).Elem()
}

func (i OrgVdcArray) ToOrgVdcArrayOutput() OrgVdcArrayOutput {
	return i.ToOrgVdcArrayOutputWithContext(context.Background())
}

func (i OrgVdcArray) ToOrgVdcArrayOutputWithContext(ctx context.Context) OrgVdcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcArrayOutput)
}

// OrgVdcMapInput is an input type that accepts OrgVdcMap and OrgVdcMapOutput values.
// You can construct a concrete instance of `OrgVdcMapInput` via:
//
//	OrgVdcMap{ "key": OrgVdcArgs{...} }
type OrgVdcMapInput interface {
	pulumi.Input

	ToOrgVdcMapOutput() OrgVdcMapOutput
	ToOrgVdcMapOutputWithContext(context.Context) OrgVdcMapOutput
}

type OrgVdcMap map[string]OrgVdcInput

func (OrgVdcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgVdc)(nil)).Elem()
}

func (i OrgVdcMap) ToOrgVdcMapOutput() OrgVdcMapOutput {
	return i.ToOrgVdcMapOutputWithContext(context.Background())
}

func (i OrgVdcMap) ToOrgVdcMapOutputWithContext(ctx context.Context) OrgVdcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcMapOutput)
}

type OrgVdcOutput struct{ *pulumi.OutputState }

func (OrgVdcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgVdc)(nil)).Elem()
}

func (o OrgVdcOutput) ToOrgVdcOutput() OrgVdcOutput {
	return o
}

func (o OrgVdcOutput) ToOrgVdcOutputWithContext(ctx context.Context) OrgVdcOutput {
	return o
}

// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
func (o OrgVdcOutput) AllocationModel() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.AllocationModel }).(pulumi.StringOutput)
}

// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
// ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
func (o OrgVdcOutput) AllowOverCommit() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.AllowOverCommit }).(pulumi.BoolOutput)
}

// The compute capacity allocated to this VDC.
func (o OrgVdcOutput) ComputeCapacity() OrgVdcComputeCapacityOutput {
	return o.ApplyT(func(v *OrgVdc) OrgVdcComputeCapacityOutput { return v.ComputeCapacity }).(OrgVdcComputeCapacityOutput)
}

// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
// 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
// element is empty, vCD sets a value
func (o OrgVdcOutput) CpuGuaranteed() pulumi.Float64Output {
	return o.ApplyT(func(v *OrgVdc) pulumi.Float64Output { return v.CpuGuaranteed }).(pulumi.Float64Output)
}

// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
// consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
// AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
func (o OrgVdcOutput) CpuSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntOutput { return v.CpuSpeed }).(pulumi.IntOutput)
}

// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
func (o OrgVdcOutput) DefaultComputePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.DefaultComputePolicyId }).(pulumi.StringOutput)
}

// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
//
// Deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
func (o OrgVdcOutput) DefaultVmSizingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.DefaultVmSizingPolicyId }).(pulumi.StringOutput)
}

// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
func (o OrgVdcOutput) DeleteForce() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.DeleteForce }).(pulumi.BoolOutput)
}

// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
// normally allows removal.
func (o OrgVdcOutput) DeleteRecursive() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.DeleteRecursive }).(pulumi.BoolOutput)
}

func (o OrgVdcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
func (o OrgVdcOutput) EdgeClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.EdgeClusterId }).(pulumi.StringPtrOutput)
}

// Set to true to indicate if the Flex VDC is to be elastic.
func (o OrgVdcOutput) Elasticity() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.Elasticity }).(pulumi.BoolOutput)
}

// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
// can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
// provisioning, all provisioning operations will result in full clones.
func (o OrgVdcOutput) EnableFastProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.EnableFastProvisioning }).(pulumi.BoolPtrOutput)
}

// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
// provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
func (o OrgVdcOutput) EnableThinProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.EnableThinProvisioning }).(pulumi.BoolPtrOutput)
}

// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
// behaviour depends on enablement at the organization level and at the system level.
func (o OrgVdcOutput) EnableVmDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.EnableVmDiscovery }).(pulumi.BoolPtrOutput)
}

// True if this VDC is enabled for use by the organization VDCs. Default is true.
func (o OrgVdcOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
func (o OrgVdcOutput) IncludeVmMemoryOverhead() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.IncludeVmMemoryOverhead }).(pulumi.BoolOutput)
}

// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
// then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
// Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
func (o OrgVdcOutput) MemoryGuaranteed() pulumi.Float64Output {
	return o.ApplyT(func(v *OrgVdc) pulumi.Float64Output { return v.MemoryGuaranteed }).(pulumi.Float64Output)
}

// Key and value pairs for Org VDC metadata
//
// Deprecated: Use metadata_entry instead
func (o OrgVdcOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

// Metadata entries for the given VDC
func (o OrgVdcOutput) MetadataEntries() OrgVdcMetadataEntryArrayOutput {
	return o.ApplyT(func(v *OrgVdc) OrgVdcMetadataEntryArrayOutput { return v.MetadataEntries }).(OrgVdcMetadataEntryArrayOutput)
}

func (o OrgVdcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
func (o OrgVdcOutput) NetworkPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.NetworkPoolName }).(pulumi.StringPtrOutput)
}

// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
// deployed.
func (o OrgVdcOutput) NetworkQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntPtrOutput { return v.NetworkQuota }).(pulumi.IntPtrOutput)
}

// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
func (o OrgVdcOutput) NicQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntPtrOutput { return v.NicQuota }).(pulumi.IntPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o OrgVdcOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// A reference to the Provider VDC from which this organization VDC is provisioned.
func (o OrgVdcOutput) ProviderVdcName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.ProviderVdcName }).(pulumi.StringOutput)
}

// Storage profiles supported by this VDC.
func (o OrgVdcOutput) StorageProfiles() OrgVdcStorageProfileArrayOutput {
	return o.ApplyT(func(v *OrgVdc) OrgVdcStorageProfileArrayOutput { return v.StorageProfiles }).(OrgVdcStorageProfileArrayOutput)
}

// Set of VM Placement Policy IDs
func (o OrgVdcOutput) VmPlacementPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringArrayOutput { return v.VmPlacementPolicyIds }).(pulumi.StringArrayOutput)
}

// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
// templates. Defaults to 0, which specifies an unlimited number.
func (o OrgVdcOutput) VmQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntPtrOutput { return v.VmQuota }).(pulumi.IntPtrOutput)
}

// Set of VM Sizing Policy IDs
func (o OrgVdcOutput) VmSizingPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringArrayOutput { return v.VmSizingPolicyIds }).(pulumi.StringArrayOutput)
}

type OrgVdcArrayOutput struct{ *pulumi.OutputState }

func (OrgVdcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgVdc)(nil)).Elem()
}

func (o OrgVdcArrayOutput) ToOrgVdcArrayOutput() OrgVdcArrayOutput {
	return o
}

func (o OrgVdcArrayOutput) ToOrgVdcArrayOutputWithContext(ctx context.Context) OrgVdcArrayOutput {
	return o
}

func (o OrgVdcArrayOutput) Index(i pulumi.IntInput) OrgVdcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgVdc {
		return vs[0].([]*OrgVdc)[vs[1].(int)]
	}).(OrgVdcOutput)
}

type OrgVdcMapOutput struct{ *pulumi.OutputState }

func (OrgVdcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgVdc)(nil)).Elem()
}

func (o OrgVdcMapOutput) ToOrgVdcMapOutput() OrgVdcMapOutput {
	return o
}

func (o OrgVdcMapOutput) ToOrgVdcMapOutputWithContext(ctx context.Context) OrgVdcMapOutput {
	return o
}

func (o OrgVdcMapOutput) MapIndex(k pulumi.StringInput) OrgVdcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgVdc {
		return vs[0].(map[string]*OrgVdc)[vs[1].(string)]
	}).(OrgVdcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcInput)(nil)).Elem(), &OrgVdc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcArrayInput)(nil)).Elem(), OrgVdcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcMapInput)(nil)).Elem(), OrgVdcMap{})
	pulumi.RegisterOutputType(OrgVdcOutput{})
	pulumi.RegisterOutputType(OrgVdcArrayOutput{})
	pulumi.RegisterOutputType(OrgVdcMapOutput{})
}
