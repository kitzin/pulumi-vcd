// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtAlbPool struct {
	pulumi.CustomResourceState

	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
	// `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	Algorithm pulumi.StringPtrOutput `pulumi:"algorithm"`
	// IDs of associated virtual services
	AssociatedVirtualServiceIds pulumi.StringArrayOutput `pulumi:"associatedVirtualServiceIds"`
	// Names of associated virtual services
	AssociatedVirtualServices pulumi.StringArrayOutput `pulumi:"associatedVirtualServices"`
	// A set of root certificate IDs to use when validating certificates presented by pool members
	CaCertificateIds pulumi.StringArrayOutput `pulumi:"caCertificateIds"`
	// Boolean flag if common name check of the certificate should be enabled
	CnCheckEnabled pulumi.BoolPtrOutput `pulumi:"cnCheckEnabled"`
	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	DefaultPort pulumi.IntPtrOutput `pulumi:"defaultPort"`
	// Description of ALB Pool
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of domain names which will be used to verify common names
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Boolean value if ALB Pool is enabled or not (default true)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Number of enabled members in the pool
	EnabledMemberCount pulumi.IntOutput `pulumi:"enabledMemberCount"`
	// Maximum time in minutes to gracefully disable pool member (default 1)
	GracefulTimeoutPeriod pulumi.IntPtrOutput `pulumi:"gracefulTimeoutPeriod"`
	// Health message
	HealthMessage  pulumi.StringOutput                 `pulumi:"healthMessage"`
	HealthMonitors NsxtAlbPoolHealthMonitorArrayOutput `pulumi:"healthMonitors"`
	// Number of members in the pool
	MemberCount pulumi.IntOutput `pulumi:"memberCount"`
	// ALB Pool Members
	Members NsxtAlbPoolMemberArrayOutput `pulumi:"members"`
	// Name of ALB Pool
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Monitors if the traffic is accepted by node (default true)
	PassiveMonitoringEnabled pulumi.BoolPtrOutput                   `pulumi:"passiveMonitoringEnabled"`
	PersistenceProfile       NsxtAlbPoolPersistenceProfilePtrOutput `pulumi:"persistenceProfile"`
	// Number of members in the pool serving the traffic
	UpMemberCount pulumi.IntOutput `pulumi:"upMemberCount"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtAlbPool registers a new resource with the given unique name, arguments, and options.
func NewNsxtAlbPool(ctx *pulumi.Context,
	name string, args *NsxtAlbPoolArgs, opts ...pulumi.ResourceOption) (*NsxtAlbPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	var resource NsxtAlbPool
	err := ctx.RegisterResource("vcd:index/nsxtAlbPool:NsxtAlbPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtAlbPool gets an existing NsxtAlbPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtAlbPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtAlbPoolState, opts ...pulumi.ResourceOption) (*NsxtAlbPool, error) {
	var resource NsxtAlbPool
	err := ctx.ReadResource("vcd:index/nsxtAlbPool:NsxtAlbPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtAlbPool resources.
type nsxtAlbPoolState struct {
	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
	// `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	Algorithm *string `pulumi:"algorithm"`
	// IDs of associated virtual services
	AssociatedVirtualServiceIds []string `pulumi:"associatedVirtualServiceIds"`
	// Names of associated virtual services
	AssociatedVirtualServices []string `pulumi:"associatedVirtualServices"`
	// A set of root certificate IDs to use when validating certificates presented by pool members
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// Boolean flag if common name check of the certificate should be enabled
	CnCheckEnabled *bool `pulumi:"cnCheckEnabled"`
	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	DefaultPort *int `pulumi:"defaultPort"`
	// Description of ALB Pool
	Description *string `pulumi:"description"`
	// List of domain names which will be used to verify common names
	DomainNames []string `pulumi:"domainNames"`
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Boolean value if ALB Pool is enabled or not (default true)
	Enabled *bool `pulumi:"enabled"`
	// Number of enabled members in the pool
	EnabledMemberCount *int `pulumi:"enabledMemberCount"`
	// Maximum time in minutes to gracefully disable pool member (default 1)
	GracefulTimeoutPeriod *int `pulumi:"gracefulTimeoutPeriod"`
	// Health message
	HealthMessage  *string                    `pulumi:"healthMessage"`
	HealthMonitors []NsxtAlbPoolHealthMonitor `pulumi:"healthMonitors"`
	// Number of members in the pool
	MemberCount *int `pulumi:"memberCount"`
	// ALB Pool Members
	Members []NsxtAlbPoolMember `pulumi:"members"`
	// Name of ALB Pool
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Monitors if the traffic is accepted by node (default true)
	PassiveMonitoringEnabled *bool                          `pulumi:"passiveMonitoringEnabled"`
	PersistenceProfile       *NsxtAlbPoolPersistenceProfile `pulumi:"persistenceProfile"`
	// Number of members in the pool serving the traffic
	UpMemberCount *int `pulumi:"upMemberCount"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

type NsxtAlbPoolState struct {
	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
	// `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	Algorithm pulumi.StringPtrInput
	// IDs of associated virtual services
	AssociatedVirtualServiceIds pulumi.StringArrayInput
	// Names of associated virtual services
	AssociatedVirtualServices pulumi.StringArrayInput
	// A set of root certificate IDs to use when validating certificates presented by pool members
	CaCertificateIds pulumi.StringArrayInput
	// Boolean flag if common name check of the certificate should be enabled
	CnCheckEnabled pulumi.BoolPtrInput
	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	DefaultPort pulumi.IntPtrInput
	// Description of ALB Pool
	Description pulumi.StringPtrInput
	// List of domain names which will be used to verify common names
	DomainNames pulumi.StringArrayInput
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayId pulumi.StringPtrInput
	// Boolean value if ALB Pool is enabled or not (default true)
	Enabled pulumi.BoolPtrInput
	// Number of enabled members in the pool
	EnabledMemberCount pulumi.IntPtrInput
	// Maximum time in minutes to gracefully disable pool member (default 1)
	GracefulTimeoutPeriod pulumi.IntPtrInput
	// Health message
	HealthMessage  pulumi.StringPtrInput
	HealthMonitors NsxtAlbPoolHealthMonitorArrayInput
	// Number of members in the pool
	MemberCount pulumi.IntPtrInput
	// ALB Pool Members
	Members NsxtAlbPoolMemberArrayInput
	// Name of ALB Pool
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Monitors if the traffic is accepted by node (default true)
	PassiveMonitoringEnabled pulumi.BoolPtrInput
	PersistenceProfile       NsxtAlbPoolPersistenceProfilePtrInput
	// Number of members in the pool serving the traffic
	UpMemberCount pulumi.IntPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtAlbPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAlbPoolState)(nil)).Elem()
}

type nsxtAlbPoolArgs struct {
	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
	// `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	Algorithm *string `pulumi:"algorithm"`
	// A set of root certificate IDs to use when validating certificates presented by pool members
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// Boolean flag if common name check of the certificate should be enabled
	CnCheckEnabled *bool `pulumi:"cnCheckEnabled"`
	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	DefaultPort *int `pulumi:"defaultPort"`
	// Description of ALB Pool
	Description *string `pulumi:"description"`
	// List of domain names which will be used to verify common names
	DomainNames []string `pulumi:"domainNames"`
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Boolean value if ALB Pool is enabled or not (default true)
	Enabled *bool `pulumi:"enabled"`
	// Maximum time in minutes to gracefully disable pool member (default 1)
	GracefulTimeoutPeriod *int                       `pulumi:"gracefulTimeoutPeriod"`
	HealthMonitors        []NsxtAlbPoolHealthMonitor `pulumi:"healthMonitors"`
	// ALB Pool Members
	Members []NsxtAlbPoolMember `pulumi:"members"`
	// Name of ALB Pool
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Monitors if the traffic is accepted by node (default true)
	PassiveMonitoringEnabled *bool                          `pulumi:"passiveMonitoringEnabled"`
	PersistenceProfile       *NsxtAlbPoolPersistenceProfile `pulumi:"persistenceProfile"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtAlbPool resource.
type NsxtAlbPoolArgs struct {
	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
	// `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	Algorithm pulumi.StringPtrInput
	// A set of root certificate IDs to use when validating certificates presented by pool members
	CaCertificateIds pulumi.StringArrayInput
	// Boolean flag if common name check of the certificate should be enabled
	CnCheckEnabled pulumi.BoolPtrInput
	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	DefaultPort pulumi.IntPtrInput
	// Description of ALB Pool
	Description pulumi.StringPtrInput
	// List of domain names which will be used to verify common names
	DomainNames pulumi.StringArrayInput
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayId pulumi.StringInput
	// Boolean value if ALB Pool is enabled or not (default true)
	Enabled pulumi.BoolPtrInput
	// Maximum time in minutes to gracefully disable pool member (default 1)
	GracefulTimeoutPeriod pulumi.IntPtrInput
	HealthMonitors        NsxtAlbPoolHealthMonitorArrayInput
	// ALB Pool Members
	Members NsxtAlbPoolMemberArrayInput
	// Name of ALB Pool
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Monitors if the traffic is accepted by node (default true)
	PassiveMonitoringEnabled pulumi.BoolPtrInput
	PersistenceProfile       NsxtAlbPoolPersistenceProfilePtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtAlbPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAlbPoolArgs)(nil)).Elem()
}

type NsxtAlbPoolInput interface {
	pulumi.Input

	ToNsxtAlbPoolOutput() NsxtAlbPoolOutput
	ToNsxtAlbPoolOutputWithContext(ctx context.Context) NsxtAlbPoolOutput
}

func (*NsxtAlbPool) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAlbPool)(nil)).Elem()
}

func (i *NsxtAlbPool) ToNsxtAlbPoolOutput() NsxtAlbPoolOutput {
	return i.ToNsxtAlbPoolOutputWithContext(context.Background())
}

func (i *NsxtAlbPool) ToNsxtAlbPoolOutputWithContext(ctx context.Context) NsxtAlbPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbPoolOutput)
}

// NsxtAlbPoolArrayInput is an input type that accepts NsxtAlbPoolArray and NsxtAlbPoolArrayOutput values.
// You can construct a concrete instance of `NsxtAlbPoolArrayInput` via:
//
//	NsxtAlbPoolArray{ NsxtAlbPoolArgs{...} }
type NsxtAlbPoolArrayInput interface {
	pulumi.Input

	ToNsxtAlbPoolArrayOutput() NsxtAlbPoolArrayOutput
	ToNsxtAlbPoolArrayOutputWithContext(context.Context) NsxtAlbPoolArrayOutput
}

type NsxtAlbPoolArray []NsxtAlbPoolInput

func (NsxtAlbPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAlbPool)(nil)).Elem()
}

func (i NsxtAlbPoolArray) ToNsxtAlbPoolArrayOutput() NsxtAlbPoolArrayOutput {
	return i.ToNsxtAlbPoolArrayOutputWithContext(context.Background())
}

func (i NsxtAlbPoolArray) ToNsxtAlbPoolArrayOutputWithContext(ctx context.Context) NsxtAlbPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbPoolArrayOutput)
}

// NsxtAlbPoolMapInput is an input type that accepts NsxtAlbPoolMap and NsxtAlbPoolMapOutput values.
// You can construct a concrete instance of `NsxtAlbPoolMapInput` via:
//
//	NsxtAlbPoolMap{ "key": NsxtAlbPoolArgs{...} }
type NsxtAlbPoolMapInput interface {
	pulumi.Input

	ToNsxtAlbPoolMapOutput() NsxtAlbPoolMapOutput
	ToNsxtAlbPoolMapOutputWithContext(context.Context) NsxtAlbPoolMapOutput
}

type NsxtAlbPoolMap map[string]NsxtAlbPoolInput

func (NsxtAlbPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAlbPool)(nil)).Elem()
}

func (i NsxtAlbPoolMap) ToNsxtAlbPoolMapOutput() NsxtAlbPoolMapOutput {
	return i.ToNsxtAlbPoolMapOutputWithContext(context.Background())
}

func (i NsxtAlbPoolMap) ToNsxtAlbPoolMapOutputWithContext(ctx context.Context) NsxtAlbPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbPoolMapOutput)
}

type NsxtAlbPoolOutput struct{ *pulumi.OutputState }

func (NsxtAlbPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAlbPool)(nil)).Elem()
}

func (o NsxtAlbPoolOutput) ToNsxtAlbPoolOutput() NsxtAlbPoolOutput {
	return o
}

func (o NsxtAlbPoolOutput) ToNsxtAlbPoolOutputWithContext(ctx context.Context) NsxtAlbPoolOutput {
	return o
}

// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
// `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
func (o NsxtAlbPoolOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringPtrOutput { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// IDs of associated virtual services
func (o NsxtAlbPoolOutput) AssociatedVirtualServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringArrayOutput { return v.AssociatedVirtualServiceIds }).(pulumi.StringArrayOutput)
}

// Names of associated virtual services
func (o NsxtAlbPoolOutput) AssociatedVirtualServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringArrayOutput { return v.AssociatedVirtualServices }).(pulumi.StringArrayOutput)
}

// A set of root certificate IDs to use when validating certificates presented by pool members
func (o NsxtAlbPoolOutput) CaCertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringArrayOutput { return v.CaCertificateIds }).(pulumi.StringArrayOutput)
}

// Boolean flag if common name check of the certificate should be enabled
func (o NsxtAlbPoolOutput) CnCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.BoolPtrOutput { return v.CnCheckEnabled }).(pulumi.BoolPtrOutput)
}

// Default Port defines destination server port used by the traffic sent to the member (default 80)
func (o NsxtAlbPoolOutput) DefaultPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.IntPtrOutput { return v.DefaultPort }).(pulumi.IntPtrOutput)
}

// Description of ALB Pool
func (o NsxtAlbPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of domain names which will be used to verify common names
func (o NsxtAlbPoolOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// Edge gateway ID in which ALB Pool should be created
func (o NsxtAlbPoolOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Boolean value if ALB Pool is enabled or not (default true)
func (o NsxtAlbPoolOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Number of enabled members in the pool
func (o NsxtAlbPoolOutput) EnabledMemberCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.IntOutput { return v.EnabledMemberCount }).(pulumi.IntOutput)
}

// Maximum time in minutes to gracefully disable pool member (default 1)
func (o NsxtAlbPoolOutput) GracefulTimeoutPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.IntPtrOutput { return v.GracefulTimeoutPeriod }).(pulumi.IntPtrOutput)
}

// Health message
func (o NsxtAlbPoolOutput) HealthMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringOutput { return v.HealthMessage }).(pulumi.StringOutput)
}

func (o NsxtAlbPoolOutput) HealthMonitors() NsxtAlbPoolHealthMonitorArrayOutput {
	return o.ApplyT(func(v *NsxtAlbPool) NsxtAlbPoolHealthMonitorArrayOutput { return v.HealthMonitors }).(NsxtAlbPoolHealthMonitorArrayOutput)
}

// Number of members in the pool
func (o NsxtAlbPoolOutput) MemberCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.IntOutput { return v.MemberCount }).(pulumi.IntOutput)
}

// ALB Pool Members
func (o NsxtAlbPoolOutput) Members() NsxtAlbPoolMemberArrayOutput {
	return o.ApplyT(func(v *NsxtAlbPool) NsxtAlbPoolMemberArrayOutput { return v.Members }).(NsxtAlbPoolMemberArrayOutput)
}

// Name of ALB Pool
func (o NsxtAlbPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxtAlbPoolOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Monitors if the traffic is accepted by node (default true)
func (o NsxtAlbPoolOutput) PassiveMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.BoolPtrOutput { return v.PassiveMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

func (o NsxtAlbPoolOutput) PersistenceProfile() NsxtAlbPoolPersistenceProfilePtrOutput {
	return o.ApplyT(func(v *NsxtAlbPool) NsxtAlbPoolPersistenceProfilePtrOutput { return v.PersistenceProfile }).(NsxtAlbPoolPersistenceProfilePtrOutput)
}

// Number of members in the pool serving the traffic
func (o NsxtAlbPoolOutput) UpMemberCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.IntOutput { return v.UpMemberCount }).(pulumi.IntOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
func (o NsxtAlbPoolOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbPool) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtAlbPoolArrayOutput struct{ *pulumi.OutputState }

func (NsxtAlbPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAlbPool)(nil)).Elem()
}

func (o NsxtAlbPoolArrayOutput) ToNsxtAlbPoolArrayOutput() NsxtAlbPoolArrayOutput {
	return o
}

func (o NsxtAlbPoolArrayOutput) ToNsxtAlbPoolArrayOutputWithContext(ctx context.Context) NsxtAlbPoolArrayOutput {
	return o
}

func (o NsxtAlbPoolArrayOutput) Index(i pulumi.IntInput) NsxtAlbPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtAlbPool {
		return vs[0].([]*NsxtAlbPool)[vs[1].(int)]
	}).(NsxtAlbPoolOutput)
}

type NsxtAlbPoolMapOutput struct{ *pulumi.OutputState }

func (NsxtAlbPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAlbPool)(nil)).Elem()
}

func (o NsxtAlbPoolMapOutput) ToNsxtAlbPoolMapOutput() NsxtAlbPoolMapOutput {
	return o
}

func (o NsxtAlbPoolMapOutput) ToNsxtAlbPoolMapOutputWithContext(ctx context.Context) NsxtAlbPoolMapOutput {
	return o
}

func (o NsxtAlbPoolMapOutput) MapIndex(k pulumi.StringInput) NsxtAlbPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtAlbPool {
		return vs[0].(map[string]*NsxtAlbPool)[vs[1].(string)]
	}).(NsxtAlbPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbPoolInput)(nil)).Elem(), &NsxtAlbPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbPoolArrayInput)(nil)).Elem(), NsxtAlbPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbPoolMapInput)(nil)).Elem(), NsxtAlbPoolMap{})
	pulumi.RegisterOutputType(NsxtAlbPoolOutput{})
	pulumi.RegisterOutputType(NsxtAlbPoolArrayOutput{})
	pulumi.RegisterOutputType(NsxtAlbPoolMapOutput{})
}
