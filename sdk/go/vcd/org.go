// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Org struct {
	pulumi.CustomResourceState

	// True if this organization is allowed to share catalogs.
	CanPublishCatalogs pulumi.BoolPtrOutput `pulumi:"canPublishCatalogs"`
	// True if this organization is allowed to publish external catalogs.
	CanPublishExternalCatalogs pulumi.BoolPtrOutput `pulumi:"canPublishExternalCatalogs"`
	// True if this organization is allowed to subscribe to external catalogs.
	CanSubscribeExternalCatalogs pulumi.BoolPtrOutput `pulumi:"canSubscribeExternalCatalogs"`
	// Specifies this organization's default for virtual machine boot delay after power on.
	DelayAfterPowerOnSeconds pulumi.IntPtrOutput `pulumi:"delayAfterPowerOnSeconds"`
	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
	// regardless of their state.
	DeleteForce pulumi.BoolOutput `pulumi:"deleteForce"`
	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive pulumi.BoolOutput `pulumi:"deleteRecursive"`
	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	DeployedVmQuota pulumi.IntPtrOutput    `pulumi:"deployedVmQuota"`
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	FullName        pulumi.StringOutput    `pulumi:"fullName"`
	// True if this organization is enabled (allows login and all other operations).
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Key value map of metadata to assign to this organization. Key and value can be any string.
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// Metadata entries for the given Organization
	MetadataEntries OrgMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	Name            pulumi.StringOutput         `pulumi:"name"`
	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
	// this organization. (0 = unlimited)
	StoredVmQuota pulumi.IntPtrOutput `pulumi:"storedVmQuota"`
	// Defines lease parameters for vApps created in this organization
	VappLease OrgVappLeaseOutput `pulumi:"vappLease"`
	// Defines lease parameters for vApp templates created in this organization
	VappTemplateLease OrgVappTemplateLeaseOutput `pulumi:"vappTemplateLease"`
}

// NewOrg registers a new resource with the given unique name, arguments, and options.
func NewOrg(ctx *pulumi.Context,
	name string, args *OrgArgs, opts ...pulumi.ResourceOption) (*Org, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeleteForce == nil {
		return nil, errors.New("invalid value for required argument 'DeleteForce'")
	}
	if args.DeleteRecursive == nil {
		return nil, errors.New("invalid value for required argument 'DeleteRecursive'")
	}
	if args.FullName == nil {
		return nil, errors.New("invalid value for required argument 'FullName'")
	}
	var resource Org
	err := ctx.RegisterResource("vcd:index/org:Org", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrg gets an existing Org resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrg(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgState, opts ...pulumi.ResourceOption) (*Org, error) {
	var resource Org
	err := ctx.ReadResource("vcd:index/org:Org", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Org resources.
type orgState struct {
	// True if this organization is allowed to share catalogs.
	CanPublishCatalogs *bool `pulumi:"canPublishCatalogs"`
	// True if this organization is allowed to publish external catalogs.
	CanPublishExternalCatalogs *bool `pulumi:"canPublishExternalCatalogs"`
	// True if this organization is allowed to subscribe to external catalogs.
	CanSubscribeExternalCatalogs *bool `pulumi:"canSubscribeExternalCatalogs"`
	// Specifies this organization's default for virtual machine boot delay after power on.
	DelayAfterPowerOnSeconds *int `pulumi:"delayAfterPowerOnSeconds"`
	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
	// regardless of their state.
	DeleteForce *bool `pulumi:"deleteForce"`
	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive *bool `pulumi:"deleteRecursive"`
	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	DeployedVmQuota *int    `pulumi:"deployedVmQuota"`
	Description     *string `pulumi:"description"`
	FullName        *string `pulumi:"fullName"`
	// True if this organization is enabled (allows login and all other operations).
	IsEnabled *bool `pulumi:"isEnabled"`
	// Key value map of metadata to assign to this organization. Key and value can be any string.
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given Organization
	MetadataEntries []OrgMetadataEntry `pulumi:"metadataEntries"`
	Name            *string            `pulumi:"name"`
	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
	// this organization. (0 = unlimited)
	StoredVmQuota *int `pulumi:"storedVmQuota"`
	// Defines lease parameters for vApps created in this organization
	VappLease *OrgVappLease `pulumi:"vappLease"`
	// Defines lease parameters for vApp templates created in this organization
	VappTemplateLease *OrgVappTemplateLease `pulumi:"vappTemplateLease"`
}

type OrgState struct {
	// True if this organization is allowed to share catalogs.
	CanPublishCatalogs pulumi.BoolPtrInput
	// True if this organization is allowed to publish external catalogs.
	CanPublishExternalCatalogs pulumi.BoolPtrInput
	// True if this organization is allowed to subscribe to external catalogs.
	CanSubscribeExternalCatalogs pulumi.BoolPtrInput
	// Specifies this organization's default for virtual machine boot delay after power on.
	DelayAfterPowerOnSeconds pulumi.IntPtrInput
	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
	// regardless of their state.
	DeleteForce pulumi.BoolPtrInput
	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive pulumi.BoolPtrInput
	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	DeployedVmQuota pulumi.IntPtrInput
	Description     pulumi.StringPtrInput
	FullName        pulumi.StringPtrInput
	// True if this organization is enabled (allows login and all other operations).
	IsEnabled pulumi.BoolPtrInput
	// Key value map of metadata to assign to this organization. Key and value can be any string.
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given Organization
	MetadataEntries OrgMetadataEntryArrayInput
	Name            pulumi.StringPtrInput
	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
	// this organization. (0 = unlimited)
	StoredVmQuota pulumi.IntPtrInput
	// Defines lease parameters for vApps created in this organization
	VappLease OrgVappLeasePtrInput
	// Defines lease parameters for vApp templates created in this organization
	VappTemplateLease OrgVappTemplateLeasePtrInput
}

func (OrgState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgState)(nil)).Elem()
}

type orgArgs struct {
	// True if this organization is allowed to share catalogs.
	CanPublishCatalogs *bool `pulumi:"canPublishCatalogs"`
	// True if this organization is allowed to publish external catalogs.
	CanPublishExternalCatalogs *bool `pulumi:"canPublishExternalCatalogs"`
	// True if this organization is allowed to subscribe to external catalogs.
	CanSubscribeExternalCatalogs *bool `pulumi:"canSubscribeExternalCatalogs"`
	// Specifies this organization's default for virtual machine boot delay after power on.
	DelayAfterPowerOnSeconds *int `pulumi:"delayAfterPowerOnSeconds"`
	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
	// regardless of their state.
	DeleteForce bool `pulumi:"deleteForce"`
	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive bool `pulumi:"deleteRecursive"`
	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	DeployedVmQuota *int    `pulumi:"deployedVmQuota"`
	Description     *string `pulumi:"description"`
	FullName        string  `pulumi:"fullName"`
	// True if this organization is enabled (allows login and all other operations).
	IsEnabled *bool `pulumi:"isEnabled"`
	// Key value map of metadata to assign to this organization. Key and value can be any string.
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given Organization
	MetadataEntries []OrgMetadataEntry `pulumi:"metadataEntries"`
	Name            *string            `pulumi:"name"`
	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
	// this organization. (0 = unlimited)
	StoredVmQuota *int `pulumi:"storedVmQuota"`
	// Defines lease parameters for vApps created in this organization
	VappLease *OrgVappLease `pulumi:"vappLease"`
	// Defines lease parameters for vApp templates created in this organization
	VappTemplateLease *OrgVappTemplateLease `pulumi:"vappTemplateLease"`
}

// The set of arguments for constructing a Org resource.
type OrgArgs struct {
	// True if this organization is allowed to share catalogs.
	CanPublishCatalogs pulumi.BoolPtrInput
	// True if this organization is allowed to publish external catalogs.
	CanPublishExternalCatalogs pulumi.BoolPtrInput
	// True if this organization is allowed to subscribe to external catalogs.
	CanSubscribeExternalCatalogs pulumi.BoolPtrInput
	// Specifies this organization's default for virtual machine boot delay after power on.
	DelayAfterPowerOnSeconds pulumi.IntPtrInput
	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
	// regardless of their state.
	DeleteForce pulumi.BoolInput
	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
	// normally allows removal.
	DeleteRecursive pulumi.BoolInput
	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	DeployedVmQuota pulumi.IntPtrInput
	Description     pulumi.StringPtrInput
	FullName        pulumi.StringInput
	// True if this organization is enabled (allows login and all other operations).
	IsEnabled pulumi.BoolPtrInput
	// Key value map of metadata to assign to this organization. Key and value can be any string.
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given Organization
	MetadataEntries OrgMetadataEntryArrayInput
	Name            pulumi.StringPtrInput
	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
	// this organization. (0 = unlimited)
	StoredVmQuota pulumi.IntPtrInput
	// Defines lease parameters for vApps created in this organization
	VappLease OrgVappLeasePtrInput
	// Defines lease parameters for vApp templates created in this organization
	VappTemplateLease OrgVappTemplateLeasePtrInput
}

func (OrgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgArgs)(nil)).Elem()
}

type OrgInput interface {
	pulumi.Input

	ToOrgOutput() OrgOutput
	ToOrgOutputWithContext(ctx context.Context) OrgOutput
}

func (*Org) ElementType() reflect.Type {
	return reflect.TypeOf((**Org)(nil)).Elem()
}

func (i *Org) ToOrgOutput() OrgOutput {
	return i.ToOrgOutputWithContext(context.Background())
}

func (i *Org) ToOrgOutputWithContext(ctx context.Context) OrgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgOutput)
}

// OrgArrayInput is an input type that accepts OrgArray and OrgArrayOutput values.
// You can construct a concrete instance of `OrgArrayInput` via:
//
//	OrgArray{ OrgArgs{...} }
type OrgArrayInput interface {
	pulumi.Input

	ToOrgArrayOutput() OrgArrayOutput
	ToOrgArrayOutputWithContext(context.Context) OrgArrayOutput
}

type OrgArray []OrgInput

func (OrgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Org)(nil)).Elem()
}

func (i OrgArray) ToOrgArrayOutput() OrgArrayOutput {
	return i.ToOrgArrayOutputWithContext(context.Background())
}

func (i OrgArray) ToOrgArrayOutputWithContext(ctx context.Context) OrgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgArrayOutput)
}

// OrgMapInput is an input type that accepts OrgMap and OrgMapOutput values.
// You can construct a concrete instance of `OrgMapInput` via:
//
//	OrgMap{ "key": OrgArgs{...} }
type OrgMapInput interface {
	pulumi.Input

	ToOrgMapOutput() OrgMapOutput
	ToOrgMapOutputWithContext(context.Context) OrgMapOutput
}

type OrgMap map[string]OrgInput

func (OrgMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Org)(nil)).Elem()
}

func (i OrgMap) ToOrgMapOutput() OrgMapOutput {
	return i.ToOrgMapOutputWithContext(context.Background())
}

func (i OrgMap) ToOrgMapOutputWithContext(ctx context.Context) OrgMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgMapOutput)
}

type OrgOutput struct{ *pulumi.OutputState }

func (OrgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Org)(nil)).Elem()
}

func (o OrgOutput) ToOrgOutput() OrgOutput {
	return o
}

func (o OrgOutput) ToOrgOutputWithContext(ctx context.Context) OrgOutput {
	return o
}

// True if this organization is allowed to share catalogs.
func (o OrgOutput) CanPublishCatalogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.BoolPtrOutput { return v.CanPublishCatalogs }).(pulumi.BoolPtrOutput)
}

// True if this organization is allowed to publish external catalogs.
func (o OrgOutput) CanPublishExternalCatalogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.BoolPtrOutput { return v.CanPublishExternalCatalogs }).(pulumi.BoolPtrOutput)
}

// True if this organization is allowed to subscribe to external catalogs.
func (o OrgOutput) CanSubscribeExternalCatalogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.BoolPtrOutput { return v.CanSubscribeExternalCatalogs }).(pulumi.BoolPtrOutput)
}

// Specifies this organization's default for virtual machine boot delay after power on.
func (o OrgOutput) DelayAfterPowerOnSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.IntPtrOutput { return v.DelayAfterPowerOnSeconds }).(pulumi.IntPtrOutput)
}

// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
// regardless of their state.
func (o OrgOutput) DeleteForce() pulumi.BoolOutput {
	return o.ApplyT(func(v *Org) pulumi.BoolOutput { return v.DeleteForce }).(pulumi.BoolOutput)
}

// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
// normally allows removal.
func (o OrgOutput) DeleteRecursive() pulumi.BoolOutput {
	return o.ApplyT(func(v *Org) pulumi.BoolOutput { return v.DeleteRecursive }).(pulumi.BoolOutput)
}

// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
func (o OrgOutput) DeployedVmQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.IntPtrOutput { return v.DeployedVmQuota }).(pulumi.IntPtrOutput)
}

func (o OrgOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o OrgOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v *Org) pulumi.StringOutput { return v.FullName }).(pulumi.StringOutput)
}

// True if this organization is enabled (allows login and all other operations).
func (o OrgOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Key value map of metadata to assign to this organization. Key and value can be any string.
//
// Deprecated: Use metadata_entry instead
func (o OrgOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *Org) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

// Metadata entries for the given Organization
func (o OrgOutput) MetadataEntries() OrgMetadataEntryArrayOutput {
	return o.ApplyT(func(v *Org) OrgMetadataEntryArrayOutput { return v.MetadataEntries }).(OrgMetadataEntryArrayOutput)
}

func (o OrgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Org) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
// this organization. (0 = unlimited)
func (o OrgOutput) StoredVmQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.IntPtrOutput { return v.StoredVmQuota }).(pulumi.IntPtrOutput)
}

// Defines lease parameters for vApps created in this organization
func (o OrgOutput) VappLease() OrgVappLeaseOutput {
	return o.ApplyT(func(v *Org) OrgVappLeaseOutput { return v.VappLease }).(OrgVappLeaseOutput)
}

// Defines lease parameters for vApp templates created in this organization
func (o OrgOutput) VappTemplateLease() OrgVappTemplateLeaseOutput {
	return o.ApplyT(func(v *Org) OrgVappTemplateLeaseOutput { return v.VappTemplateLease }).(OrgVappTemplateLeaseOutput)
}

type OrgArrayOutput struct{ *pulumi.OutputState }

func (OrgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Org)(nil)).Elem()
}

func (o OrgArrayOutput) ToOrgArrayOutput() OrgArrayOutput {
	return o
}

func (o OrgArrayOutput) ToOrgArrayOutputWithContext(ctx context.Context) OrgArrayOutput {
	return o
}

func (o OrgArrayOutput) Index(i pulumi.IntInput) OrgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Org {
		return vs[0].([]*Org)[vs[1].(int)]
	}).(OrgOutput)
}

type OrgMapOutput struct{ *pulumi.OutputState }

func (OrgMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Org)(nil)).Elem()
}

func (o OrgMapOutput) ToOrgMapOutput() OrgMapOutput {
	return o
}

func (o OrgMapOutput) ToOrgMapOutputWithContext(ctx context.Context) OrgMapOutput {
	return o
}

func (o OrgMapOutput) MapIndex(k pulumi.StringInput) OrgOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Org {
		return vs[0].(map[string]*Org)[vs[1].(string)]
	}).(OrgOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgInput)(nil)).Elem(), &Org{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgArrayInput)(nil)).Elem(), OrgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgMapInput)(nil)).Elem(), OrgMap{})
	pulumi.RegisterOutputType(OrgOutput{})
	pulumi.RegisterOutputType(OrgArrayOutput{})
	pulumi.RegisterOutputType(OrgMapOutput{})
}
