// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VappVm struct {
	pulumi.CustomResourceState

	// Automatically accept EULA if OVA has it
	AcceptAllEulas pulumi.BoolPtrOutput `pulumi:"acceptAllEulas"`
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage pulumi.StringPtrOutput `pulumi:"bootImage"`
	// The URN of the media to use as boot image.
	BootImageId pulumi.StringPtrOutput `pulumi:"bootImageId"`
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName pulumi.StringPtrOutput `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine
	ComputerName pulumi.StringOutput `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores pulumi.IntOutput `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotAddEnabled"`
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit pulumi.IntOutput `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority pulumi.StringOutput `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation pulumi.IntOutput `pulumi:"cpuReservation"`
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares pulumi.IntOutput `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM
	Cpus pulumi.IntOutput `pulumi:"cpus"`
	// Guest customization block
	Customization VappVmCustomizationOutput `pulumi:"customization"`
	// The VM description
	Description pulumi.StringOutput   `pulumi:"description"`
	Disks       VappVmDiskArrayOutput `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization pulumi.BoolPtrOutput `pulumi:"exposeHardwareVirtualization"`
	// Key/value settings for guest properties
	GuestProperties pulumi.MapOutput `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion pulumi.StringOutput `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href pulumi.StringOutput `pulumi:"href"`
	// A block will show internal disk details
	InternalDisks VappVmInternalDiskArrayOutput `pulumi:"internalDisks"`
	// The amount of RAM (in MB) to allocate to the VM
	Memory pulumi.IntOutput `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled pulumi.BoolPtrOutput `pulumi:"memoryHotAddEnabled"`
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority pulumi.StringOutput `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntOutput `pulumi:"memoryReservation"`
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares pulumi.IntOutput `pulumi:"memoryShares"`
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// Metadata entries for the given VM
	MetadataEntries VappVmMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds pulumi.IntPtrOutput `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used.
	Networks VappVmNetworkArrayOutput `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Operating System type. Possible values can be found in documentation.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks VappVmOverrideTemplateDiskArrayOutput `pulumi:"overrideTemplateDisks"`
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId pulumi.StringOutput `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on
	PowerOn pulumi.BoolPtrOutput `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff pulumi.BoolPtrOutput `pulumi:"preventUpdatePowerOff"`
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId pulumi.StringOutput `pulumi:"sizingPolicyId"`
	// Shows the status code of the VM
	Status pulumi.IntOutput `pulumi:"status"`
	// Shows the status of the VM
	StatusText pulumi.StringOutput `pulumi:"statusText"`
	// Storage profile to override the default one
	StorageProfile pulumi.StringOutput `pulumi:"storageProfile"`
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName pulumi.StringOutput `pulumi:"vappName"`
	// The URN of the vApp Template to use
	VappTemplateId pulumi.StringPtrOutput `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate pulumi.StringPtrOutput `pulumi:"vmNameInTemplate"`
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VmType pulumi.StringOutput `pulumi:"vmType"`
}

// NewVappVm registers a new resource with the given unique name, arguments, and options.
func NewVappVm(ctx *pulumi.Context,
	name string, args *VappVmArgs, opts ...pulumi.ResourceOption) (*VappVm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VappName == nil {
		return nil, errors.New("invalid value for required argument 'VappName'")
	}
	var resource VappVm
	err := ctx.RegisterResource("vcd:index/vappVm:VappVm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVappVm gets an existing VappVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVappVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VappVmState, opts ...pulumi.ResourceOption) (*VappVm, error) {
	var resource VappVm
	err := ctx.ReadResource("vcd:index/vappVm:VappVm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VappVm resources.
type vappVmState struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas *bool `pulumi:"acceptAllEulas"`
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage *string `pulumi:"bootImage"`
	// The URN of the media to use as boot image.
	BootImageId *string `pulumi:"bootImageId"`
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine
	ComputerName *string `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores *int `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority *string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation *int `pulumi:"cpuReservation"`
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares *int `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM
	Cpus *int `pulumi:"cpus"`
	// Guest customization block
	Customization *VappVmCustomization `pulumi:"customization"`
	// The VM description
	Description *string      `pulumi:"description"`
	Disks       []VappVmDisk `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization *bool `pulumi:"exposeHardwareVirtualization"`
	// Key/value settings for guest properties
	GuestProperties map[string]interface{} `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion *string `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href *string `pulumi:"href"`
	// A block will show internal disk details
	InternalDisks []VappVmInternalDisk `pulumi:"internalDisks"`
	// The amount of RAM (in MB) to allocate to the VM
	Memory *int `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority *string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares *int `pulumi:"memoryShares"`
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given VM
	MetadataEntries []VappVmMetadataEntry `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name *string `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used.
	Networks []VappVmNetwork `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Operating System type. Possible values can be found in documentation.
	OsType *string `pulumi:"osType"`
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks []VappVmOverrideTemplateDisk `pulumi:"overrideTemplateDisks"`
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on
	PowerOn *bool `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff *bool `pulumi:"preventUpdatePowerOff"`
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// Shows the status code of the VM
	Status *int `pulumi:"status"`
	// Shows the status of the VM
	StatusText *string `pulumi:"statusText"`
	// Storage profile to override the default one
	StorageProfile *string `pulumi:"storageProfile"`
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName *string `pulumi:"templateName"`
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName *string `pulumi:"vappName"`
	// The URN of the vApp Template to use
	VappTemplateId *string `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate *string `pulumi:"vmNameInTemplate"`
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VmType *string `pulumi:"vmType"`
}

type VappVmState struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas pulumi.BoolPtrInput
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage pulumi.StringPtrInput
	// The URN of the media to use as boot image.
	BootImageId pulumi.StringPtrInput
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName pulumi.StringPtrInput
	// Computer name to assign to this virtual machine
	ComputerName pulumi.StringPtrInput
	// The number of cores per socket
	CpuCores pulumi.IntPtrInput
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority pulumi.StringPtrInput
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares pulumi.IntPtrInput
	// The number of virtual CPUs to allocate to the VM
	Cpus pulumi.IntPtrInput
	// Guest customization block
	Customization VappVmCustomizationPtrInput
	// The VM description
	Description pulumi.StringPtrInput
	Disks       VappVmDiskArrayInput
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization pulumi.BoolPtrInput
	// Key/value settings for guest properties
	GuestProperties pulumi.MapInput
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion pulumi.StringPtrInput
	// VM Hyper Reference
	Href pulumi.StringPtrInput
	// A block will show internal disk details
	InternalDisks VappVmInternalDiskArrayInput
	// The amount of RAM (in MB) to allocate to the VM
	Memory pulumi.IntPtrInput
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority pulumi.StringPtrInput
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares pulumi.IntPtrInput
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given VM
	MetadataEntries VappVmMetadataEntryArrayInput
	// A name for the VM, unique within the vApp
	Name pulumi.StringPtrInput
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds pulumi.IntPtrInput
	// A block to define network interface. Multiple can be used.
	Networks VappVmNetworkArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Operating System type. Possible values can be found in documentation.
	OsType pulumi.StringPtrInput
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks VappVmOverrideTemplateDiskArrayInput
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId pulumi.StringPtrInput
	// A boolean value stating if this VM should be powered on
	PowerOn pulumi.BoolPtrInput
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff pulumi.BoolPtrInput
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId pulumi.StringPtrInput
	// Shows the status code of the VM
	Status pulumi.IntPtrInput
	// Shows the status of the VM
	StatusText pulumi.StringPtrInput
	// Storage profile to override the default one
	StorageProfile pulumi.StringPtrInput
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName pulumi.StringPtrInput
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName pulumi.StringPtrInput
	// The URN of the vApp Template to use
	VappTemplateId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate pulumi.StringPtrInput
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VmType pulumi.StringPtrInput
}

func (VappVmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vappVmState)(nil)).Elem()
}

type vappVmArgs struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas *bool `pulumi:"acceptAllEulas"`
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage *string `pulumi:"bootImage"`
	// The URN of the media to use as boot image.
	BootImageId *string `pulumi:"bootImageId"`
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine
	ComputerName *string `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores *int `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority *string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation *int `pulumi:"cpuReservation"`
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares *int `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM
	Cpus *int `pulumi:"cpus"`
	// Guest customization block
	Customization *VappVmCustomization `pulumi:"customization"`
	// The VM description
	Description *string      `pulumi:"description"`
	Disks       []VappVmDisk `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization *bool `pulumi:"exposeHardwareVirtualization"`
	// Key/value settings for guest properties
	GuestProperties map[string]interface{} `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion *string `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href *string `pulumi:"href"`
	// The amount of RAM (in MB) to allocate to the VM
	Memory *int `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority *string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares *int `pulumi:"memoryShares"`
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given VM
	MetadataEntries []VappVmMetadataEntry `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name *string `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used.
	Networks []VappVmNetwork `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Operating System type. Possible values can be found in documentation.
	OsType *string `pulumi:"osType"`
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks []VappVmOverrideTemplateDisk `pulumi:"overrideTemplateDisks"`
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on
	PowerOn *bool `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff *bool `pulumi:"preventUpdatePowerOff"`
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// Storage profile to override the default one
	StorageProfile *string `pulumi:"storageProfile"`
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName *string `pulumi:"templateName"`
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName string `pulumi:"vappName"`
	// The URN of the vApp Template to use
	VappTemplateId *string `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate *string `pulumi:"vmNameInTemplate"`
}

// The set of arguments for constructing a VappVm resource.
type VappVmArgs struct {
	// Automatically accept EULA if OVA has it
	AcceptAllEulas pulumi.BoolPtrInput
	// Media name to add as boot image.
	//
	// Deprecated: Use `boot_image_id` instead
	BootImage pulumi.StringPtrInput
	// The URN of the media to use as boot image.
	BootImageId pulumi.StringPtrInput
	// The catalog name in which to find the given vApp Template or media for boot_image
	//
	// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
	CatalogName pulumi.StringPtrInput
	// Computer name to assign to this virtual machine
	ComputerName pulumi.StringPtrInput
	// The number of cores per socket
	CpuCores pulumi.IntPtrInput
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
	// the resource allocation is not unlimited.
	CpuLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	CpuPriority pulumi.StringPtrInput
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	CpuShares pulumi.IntPtrInput
	// The number of virtual CPUs to allocate to the VM
	Cpus pulumi.IntPtrInput
	// Guest customization block
	Customization VappVmCustomizationPtrInput
	// The VM description
	Description pulumi.StringPtrInput
	Disks       VappVmDiskArrayInput
	// Expose hardware-assisted CPU virtualization to guest OS.
	ExposeHardwareVirtualization pulumi.BoolPtrInput
	// Key/value settings for guest properties
	GuestProperties pulumi.MapInput
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	HardwareVersion pulumi.StringPtrInput
	// VM Hyper Reference
	Href pulumi.StringPtrInput
	// The amount of RAM (in MB) to allocate to the VM
	Memory pulumi.IntPtrInput
	// True if the virtual machine supports addition of memory while powered on.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
	// when the resource allocation is not unlimited.
	MemoryLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
	// virtualized workload
	MemoryPriority pulumi.StringPtrInput
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntPtrInput
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	MemoryShares pulumi.IntPtrInput
	// Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given VM
	MetadataEntries VappVmMetadataEntryArrayInput
	// A name for the VM, unique within the vApp
	Name pulumi.StringPtrInput
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	NetworkDhcpWaitSeconds pulumi.IntPtrInput
	// A block to define network interface. Multiple can be used.
	Networks VappVmNetworkArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Operating System type. Possible values can be found in documentation.
	OsType pulumi.StringPtrInput
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
	// and unit_number.
	OverrideTemplateDisks VappVmOverrideTemplateDiskArrayInput
	// VM placement policy ID. Has to be assigned to Org VDC.
	PlacementPolicyId pulumi.StringPtrInput
	// A boolean value stating if this VM should be powered on
	PowerOn pulumi.BoolPtrInput
	// True if the update of resource should fail when virtual machine power off needed.
	PreventUpdatePowerOff pulumi.BoolPtrInput
	// VM sizing policy ID. Has to be assigned to Org VDC.
	SizingPolicyId pulumi.StringPtrInput
	// Storage profile to override the default one
	StorageProfile pulumi.StringPtrInput
	// The name of the vApp Template to use
	//
	// Deprecated: Use `vapp_template_id` instead
	TemplateName pulumi.StringPtrInput
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	VappName pulumi.StringInput
	// The URN of the vApp Template to use
	VappTemplateId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	VmNameInTemplate pulumi.StringPtrInput
}

func (VappVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vappVmArgs)(nil)).Elem()
}

type VappVmInput interface {
	pulumi.Input

	ToVappVmOutput() VappVmOutput
	ToVappVmOutputWithContext(ctx context.Context) VappVmOutput
}

func (*VappVm) ElementType() reflect.Type {
	return reflect.TypeOf((**VappVm)(nil)).Elem()
}

func (i *VappVm) ToVappVmOutput() VappVmOutput {
	return i.ToVappVmOutputWithContext(context.Background())
}

func (i *VappVm) ToVappVmOutputWithContext(ctx context.Context) VappVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappVmOutput)
}

// VappVmArrayInput is an input type that accepts VappVmArray and VappVmArrayOutput values.
// You can construct a concrete instance of `VappVmArrayInput` via:
//
//	VappVmArray{ VappVmArgs{...} }
type VappVmArrayInput interface {
	pulumi.Input

	ToVappVmArrayOutput() VappVmArrayOutput
	ToVappVmArrayOutputWithContext(context.Context) VappVmArrayOutput
}

type VappVmArray []VappVmInput

func (VappVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappVm)(nil)).Elem()
}

func (i VappVmArray) ToVappVmArrayOutput() VappVmArrayOutput {
	return i.ToVappVmArrayOutputWithContext(context.Background())
}

func (i VappVmArray) ToVappVmArrayOutputWithContext(ctx context.Context) VappVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappVmArrayOutput)
}

// VappVmMapInput is an input type that accepts VappVmMap and VappVmMapOutput values.
// You can construct a concrete instance of `VappVmMapInput` via:
//
//	VappVmMap{ "key": VappVmArgs{...} }
type VappVmMapInput interface {
	pulumi.Input

	ToVappVmMapOutput() VappVmMapOutput
	ToVappVmMapOutputWithContext(context.Context) VappVmMapOutput
}

type VappVmMap map[string]VappVmInput

func (VappVmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappVm)(nil)).Elem()
}

func (i VappVmMap) ToVappVmMapOutput() VappVmMapOutput {
	return i.ToVappVmMapOutputWithContext(context.Background())
}

func (i VappVmMap) ToVappVmMapOutputWithContext(ctx context.Context) VappVmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappVmMapOutput)
}

type VappVmOutput struct{ *pulumi.OutputState }

func (VappVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VappVm)(nil)).Elem()
}

func (o VappVmOutput) ToVappVmOutput() VappVmOutput {
	return o
}

func (o VappVmOutput) ToVappVmOutputWithContext(ctx context.Context) VappVmOutput {
	return o
}

// Automatically accept EULA if OVA has it
func (o VappVmOutput) AcceptAllEulas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.AcceptAllEulas }).(pulumi.BoolPtrOutput)
}

// Media name to add as boot image.
//
// Deprecated: Use `boot_image_id` instead
func (o VappVmOutput) BootImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.BootImage }).(pulumi.StringPtrOutput)
}

// The URN of the media to use as boot image.
func (o VappVmOutput) BootImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.BootImageId }).(pulumi.StringPtrOutput)
}

// The catalog name in which to find the given vApp Template or media for boot_image
//
// Deprecated: You should use `vapp_template_id` or `boot_image_id` without the need of a catalog name
func (o VappVmOutput) CatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.CatalogName }).(pulumi.StringPtrOutput)
}

// Computer name to assign to this virtual machine
func (o VappVmOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.ComputerName }).(pulumi.StringOutput)
}

// The number of cores per socket
func (o VappVmOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuCores }).(pulumi.IntOutput)
}

// True if the virtual machine supports addition of virtual CPUs while powered on.
func (o VappVmOutput) CpuHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.CpuHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
// the resource allocation is not unlimited.
func (o VappVmOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
// virtualized workload
func (o VappVmOutput) CpuPriority() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.CpuPriority }).(pulumi.StringOutput)
}

// The amount of MHz reservation on the underlying virtualization infrastructure
func (o VappVmOutput) CpuReservation() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
func (o VappVmOutput) CpuShares() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuShares }).(pulumi.IntOutput)
}

// The number of virtual CPUs to allocate to the VM
func (o VappVmOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.Cpus }).(pulumi.IntOutput)
}

// Guest customization block
func (o VappVmOutput) Customization() VappVmCustomizationOutput {
	return o.ApplyT(func(v *VappVm) VappVmCustomizationOutput { return v.Customization }).(VappVmCustomizationOutput)
}

// The VM description
func (o VappVmOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o VappVmOutput) Disks() VappVmDiskArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmDiskArrayOutput { return v.Disks }).(VappVmDiskArrayOutput)
}

// Expose hardware-assisted CPU virtualization to guest OS.
func (o VappVmOutput) ExposeHardwareVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.ExposeHardwareVirtualization }).(pulumi.BoolPtrOutput)
}

// Key/value settings for guest properties
func (o VappVmOutput) GuestProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *VappVm) pulumi.MapOutput { return v.GuestProperties }).(pulumi.MapOutput)
}

// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
func (o VappVmOutput) HardwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.HardwareVersion }).(pulumi.StringOutput)
}

// VM Hyper Reference
func (o VappVmOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// A block will show internal disk details
func (o VappVmOutput) InternalDisks() VappVmInternalDiskArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmInternalDiskArrayOutput { return v.InternalDisks }).(VappVmInternalDiskArrayOutput)
}

// The amount of RAM (in MB) to allocate to the VM
func (o VappVmOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// True if the virtual machine supports addition of memory while powered on.
func (o VappVmOutput) MemoryHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.MemoryHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
// when the resource allocation is not unlimited.
func (o VappVmOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
// virtualized workload
func (o VappVmOutput) MemoryPriority() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.MemoryPriority }).(pulumi.StringOutput)
}

// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
func (o VappVmOutput) MemoryReservation() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.MemoryReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
func (o VappVmOutput) MemoryShares() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.MemoryShares }).(pulumi.IntOutput)
}

// Key value map of metadata to assign to this VM
//
// Deprecated: Use metadata_entry instead
func (o VappVmOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *VappVm) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

// Metadata entries for the given VM
func (o VappVmOutput) MetadataEntries() VappVmMetadataEntryArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmMetadataEntryArrayOutput { return v.MetadataEntries }).(VappVmMetadataEntryArrayOutput)
}

// A name for the VM, unique within the vApp
func (o VappVmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
func (o VappVmOutput) NetworkDhcpWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntPtrOutput { return v.NetworkDhcpWaitSeconds }).(pulumi.IntPtrOutput)
}

// A block to define network interface. Multiple can be used.
func (o VappVmOutput) Networks() VappVmNetworkArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmNetworkArrayOutput { return v.Networks }).(VappVmNetworkArrayOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o VappVmOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Operating System type. Possible values can be found in documentation.
func (o VappVmOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
// and unit_number.
func (o VappVmOutput) OverrideTemplateDisks() VappVmOverrideTemplateDiskArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmOverrideTemplateDiskArrayOutput { return v.OverrideTemplateDisks }).(VappVmOverrideTemplateDiskArrayOutput)
}

// VM placement policy ID. Has to be assigned to Org VDC.
func (o VappVmOutput) PlacementPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.PlacementPolicyId }).(pulumi.StringOutput)
}

// A boolean value stating if this VM should be powered on
func (o VappVmOutput) PowerOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.PowerOn }).(pulumi.BoolPtrOutput)
}

// True if the update of resource should fail when virtual machine power off needed.
func (o VappVmOutput) PreventUpdatePowerOff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.PreventUpdatePowerOff }).(pulumi.BoolPtrOutput)
}

// VM sizing policy ID. Has to be assigned to Org VDC.
func (o VappVmOutput) SizingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.SizingPolicyId }).(pulumi.StringOutput)
}

// Shows the status code of the VM
func (o VappVmOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Shows the status of the VM
func (o VappVmOutput) StatusText() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.StatusText }).(pulumi.StringOutput)
}

// Storage profile to override the default one
func (o VappVmOutput) StorageProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.StorageProfile }).(pulumi.StringOutput)
}

// The name of the vApp Template to use
//
// Deprecated: Use `vapp_template_id` instead
func (o VappVmOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

// The vApp this VM belongs to - Required, unless it is a standalone VM
func (o VappVmOutput) VappName() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.VappName }).(pulumi.StringOutput)
}

// The URN of the vApp Template to use
func (o VappVmOutput) VappTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.VappTemplateId }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o VappVmOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
func (o VappVmOutput) VmNameInTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.VmNameInTemplate }).(pulumi.StringPtrOutput)
}

// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
func (o VappVmOutput) VmType() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.VmType }).(pulumi.StringOutput)
}

type VappVmArrayOutput struct{ *pulumi.OutputState }

func (VappVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappVm)(nil)).Elem()
}

func (o VappVmArrayOutput) ToVappVmArrayOutput() VappVmArrayOutput {
	return o
}

func (o VappVmArrayOutput) ToVappVmArrayOutputWithContext(ctx context.Context) VappVmArrayOutput {
	return o
}

func (o VappVmArrayOutput) Index(i pulumi.IntInput) VappVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VappVm {
		return vs[0].([]*VappVm)[vs[1].(int)]
	}).(VappVmOutput)
}

type VappVmMapOutput struct{ *pulumi.OutputState }

func (VappVmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappVm)(nil)).Elem()
}

func (o VappVmMapOutput) ToVappVmMapOutput() VappVmMapOutput {
	return o
}

func (o VappVmMapOutput) ToVappVmMapOutputWithContext(ctx context.Context) VappVmMapOutput {
	return o
}

func (o VappVmMapOutput) MapIndex(k pulumi.StringInput) VappVmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VappVm {
		return vs[0].(map[string]*VappVm)[vs[1].(string)]
	}).(VappVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VappVmInput)(nil)).Elem(), &VappVm{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappVmArrayInput)(nil)).Elem(), VappVmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappVmMapInput)(nil)).Elem(), VappVmMap{})
	pulumi.RegisterOutputType(VappVmOutput{})
	pulumi.RegisterOutputType(VappVmArrayOutput{})
	pulumi.RegisterOutputType(VappVmMapOutput{})
}
