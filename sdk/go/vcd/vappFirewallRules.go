// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VappFirewallRules struct {
	pulumi.CustomResourceState

	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	DefaultAction pulumi.StringOutput `pulumi:"defaultAction"`
	// Enable or disable firewall service. Default is `true`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Flag to enable logging for default action. Default value is false.
	LogDefaultAction pulumi.BoolPtrOutput `pulumi:"logDefaultAction"`
	// vApp network identifier
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   pulumi.StringPtrOutput           `pulumi:"org"`
	Rules VappFirewallRulesRuleArrayOutput `pulumi:"rules"`
	// vApp identifier
	VappId pulumi.StringOutput `pulumi:"vappId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewVappFirewallRules registers a new resource with the given unique name, arguments, and options.
func NewVappFirewallRules(ctx *pulumi.Context,
	name string, args *VappFirewallRulesArgs, opts ...pulumi.ResourceOption) (*VappFirewallRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultAction == nil {
		return nil, errors.New("invalid value for required argument 'DefaultAction'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.VappId == nil {
		return nil, errors.New("invalid value for required argument 'VappId'")
	}
	var resource VappFirewallRules
	err := ctx.RegisterResource("vcd:index/vappFirewallRules:VappFirewallRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVappFirewallRules gets an existing VappFirewallRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVappFirewallRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VappFirewallRulesState, opts ...pulumi.ResourceOption) (*VappFirewallRules, error) {
	var resource VappFirewallRules
	err := ctx.ReadResource("vcd:index/vappFirewallRules:VappFirewallRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VappFirewallRules resources.
type vappFirewallRulesState struct {
	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	DefaultAction *string `pulumi:"defaultAction"`
	// Enable or disable firewall service. Default is `true`
	Enabled *bool `pulumi:"enabled"`
	// Flag to enable logging for default action. Default value is false.
	LogDefaultAction *bool `pulumi:"logDefaultAction"`
	// vApp network identifier
	NetworkId *string `pulumi:"networkId"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   *string                 `pulumi:"org"`
	Rules []VappFirewallRulesRule `pulumi:"rules"`
	// vApp identifier
	VappId *string `pulumi:"vappId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type VappFirewallRulesState struct {
	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	DefaultAction pulumi.StringPtrInput
	// Enable or disable firewall service. Default is `true`
	Enabled pulumi.BoolPtrInput
	// Flag to enable logging for default action. Default value is false.
	LogDefaultAction pulumi.BoolPtrInput
	// vApp network identifier
	NetworkId pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   pulumi.StringPtrInput
	Rules VappFirewallRulesRuleArrayInput
	// vApp identifier
	VappId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (VappFirewallRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*vappFirewallRulesState)(nil)).Elem()
}

type vappFirewallRulesArgs struct {
	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	DefaultAction string `pulumi:"defaultAction"`
	// Enable or disable firewall service. Default is `true`
	Enabled *bool `pulumi:"enabled"`
	// Flag to enable logging for default action. Default value is false.
	LogDefaultAction *bool `pulumi:"logDefaultAction"`
	// vApp network identifier
	NetworkId string `pulumi:"networkId"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   *string                 `pulumi:"org"`
	Rules []VappFirewallRulesRule `pulumi:"rules"`
	// vApp identifier
	VappId string `pulumi:"vappId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a VappFirewallRules resource.
type VappFirewallRulesArgs struct {
	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	DefaultAction pulumi.StringInput
	// Enable or disable firewall service. Default is `true`
	Enabled pulumi.BoolPtrInput
	// Flag to enable logging for default action. Default value is false.
	LogDefaultAction pulumi.BoolPtrInput
	// vApp network identifier
	NetworkId pulumi.StringInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   pulumi.StringPtrInput
	Rules VappFirewallRulesRuleArrayInput
	// vApp identifier
	VappId pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (VappFirewallRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vappFirewallRulesArgs)(nil)).Elem()
}

type VappFirewallRulesInput interface {
	pulumi.Input

	ToVappFirewallRulesOutput() VappFirewallRulesOutput
	ToVappFirewallRulesOutputWithContext(ctx context.Context) VappFirewallRulesOutput
}

func (*VappFirewallRules) ElementType() reflect.Type {
	return reflect.TypeOf((**VappFirewallRules)(nil)).Elem()
}

func (i *VappFirewallRules) ToVappFirewallRulesOutput() VappFirewallRulesOutput {
	return i.ToVappFirewallRulesOutputWithContext(context.Background())
}

func (i *VappFirewallRules) ToVappFirewallRulesOutputWithContext(ctx context.Context) VappFirewallRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappFirewallRulesOutput)
}

// VappFirewallRulesArrayInput is an input type that accepts VappFirewallRulesArray and VappFirewallRulesArrayOutput values.
// You can construct a concrete instance of `VappFirewallRulesArrayInput` via:
//
//	VappFirewallRulesArray{ VappFirewallRulesArgs{...} }
type VappFirewallRulesArrayInput interface {
	pulumi.Input

	ToVappFirewallRulesArrayOutput() VappFirewallRulesArrayOutput
	ToVappFirewallRulesArrayOutputWithContext(context.Context) VappFirewallRulesArrayOutput
}

type VappFirewallRulesArray []VappFirewallRulesInput

func (VappFirewallRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappFirewallRules)(nil)).Elem()
}

func (i VappFirewallRulesArray) ToVappFirewallRulesArrayOutput() VappFirewallRulesArrayOutput {
	return i.ToVappFirewallRulesArrayOutputWithContext(context.Background())
}

func (i VappFirewallRulesArray) ToVappFirewallRulesArrayOutputWithContext(ctx context.Context) VappFirewallRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappFirewallRulesArrayOutput)
}

// VappFirewallRulesMapInput is an input type that accepts VappFirewallRulesMap and VappFirewallRulesMapOutput values.
// You can construct a concrete instance of `VappFirewallRulesMapInput` via:
//
//	VappFirewallRulesMap{ "key": VappFirewallRulesArgs{...} }
type VappFirewallRulesMapInput interface {
	pulumi.Input

	ToVappFirewallRulesMapOutput() VappFirewallRulesMapOutput
	ToVappFirewallRulesMapOutputWithContext(context.Context) VappFirewallRulesMapOutput
}

type VappFirewallRulesMap map[string]VappFirewallRulesInput

func (VappFirewallRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappFirewallRules)(nil)).Elem()
}

func (i VappFirewallRulesMap) ToVappFirewallRulesMapOutput() VappFirewallRulesMapOutput {
	return i.ToVappFirewallRulesMapOutputWithContext(context.Background())
}

func (i VappFirewallRulesMap) ToVappFirewallRulesMapOutputWithContext(ctx context.Context) VappFirewallRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappFirewallRulesMapOutput)
}

type VappFirewallRulesOutput struct{ *pulumi.OutputState }

func (VappFirewallRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VappFirewallRules)(nil)).Elem()
}

func (o VappFirewallRulesOutput) ToVappFirewallRulesOutput() VappFirewallRulesOutput {
	return o
}

func (o VappFirewallRulesOutput) ToVappFirewallRulesOutputWithContext(ctx context.Context) VappFirewallRulesOutput {
	return o
}

// Specifies what to do should none of the rules match. Either `allow` or `drop`
func (o VappFirewallRulesOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.StringOutput { return v.DefaultAction }).(pulumi.StringOutput)
}

// Enable or disable firewall service. Default is `true`
func (o VappFirewallRulesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Flag to enable logging for default action. Default value is false.
func (o VappFirewallRulesOutput) LogDefaultAction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.BoolPtrOutput { return v.LogDefaultAction }).(pulumi.BoolPtrOutput)
}

// vApp network identifier
func (o VappFirewallRulesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o VappFirewallRulesOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

func (o VappFirewallRulesOutput) Rules() VappFirewallRulesRuleArrayOutput {
	return o.ApplyT(func(v *VappFirewallRules) VappFirewallRulesRuleArrayOutput { return v.Rules }).(VappFirewallRulesRuleArrayOutput)
}

// vApp identifier
func (o VappFirewallRulesOutput) VappId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.StringOutput { return v.VappId }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o VappFirewallRulesOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappFirewallRules) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type VappFirewallRulesArrayOutput struct{ *pulumi.OutputState }

func (VappFirewallRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappFirewallRules)(nil)).Elem()
}

func (o VappFirewallRulesArrayOutput) ToVappFirewallRulesArrayOutput() VappFirewallRulesArrayOutput {
	return o
}

func (o VappFirewallRulesArrayOutput) ToVappFirewallRulesArrayOutputWithContext(ctx context.Context) VappFirewallRulesArrayOutput {
	return o
}

func (o VappFirewallRulesArrayOutput) Index(i pulumi.IntInput) VappFirewallRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VappFirewallRules {
		return vs[0].([]*VappFirewallRules)[vs[1].(int)]
	}).(VappFirewallRulesOutput)
}

type VappFirewallRulesMapOutput struct{ *pulumi.OutputState }

func (VappFirewallRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappFirewallRules)(nil)).Elem()
}

func (o VappFirewallRulesMapOutput) ToVappFirewallRulesMapOutput() VappFirewallRulesMapOutput {
	return o
}

func (o VappFirewallRulesMapOutput) ToVappFirewallRulesMapOutputWithContext(ctx context.Context) VappFirewallRulesMapOutput {
	return o
}

func (o VappFirewallRulesMapOutput) MapIndex(k pulumi.StringInput) VappFirewallRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VappFirewallRules {
		return vs[0].(map[string]*VappFirewallRules)[vs[1].(string)]
	}).(VappFirewallRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VappFirewallRulesInput)(nil)).Elem(), &VappFirewallRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappFirewallRulesArrayInput)(nil)).Elem(), VappFirewallRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappFirewallRulesMapInput)(nil)).Elem(), VappFirewallRulesMap{})
	pulumi.RegisterOutputType(VappFirewallRulesOutput{})
	pulumi.RegisterOutputType(VappFirewallRulesArrayOutput{})
	pulumi.RegisterOutputType(VappFirewallRulesMapOutput{})
}
