// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmPlacementPolicy struct {
	pulumi.CustomResourceState

	// Description of the VM Placement Policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the
	// entries set in this attribute
	LogicalVmGroupIds pulumi.StringArrayOutput `pulumi:"logicalVmGroupIds"`
	// Name of the VM Placement Policy
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcId pulumi.StringOutput `pulumi:"providerVdcId"`
	// IDs of the collection of VMs with similar host requirements
	VmGroupIds pulumi.StringArrayOutput `pulumi:"vmGroupIds"`
}

// NewVmPlacementPolicy registers a new resource with the given unique name, arguments, and options.
func NewVmPlacementPolicy(ctx *pulumi.Context,
	name string, args *VmPlacementPolicyArgs, opts ...pulumi.ResourceOption) (*VmPlacementPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderVdcId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderVdcId'")
	}
	var resource VmPlacementPolicy
	err := ctx.RegisterResource("vcd:index/vmPlacementPolicy:VmPlacementPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmPlacementPolicy gets an existing VmPlacementPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmPlacementPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmPlacementPolicyState, opts ...pulumi.ResourceOption) (*VmPlacementPolicy, error) {
	var resource VmPlacementPolicy
	err := ctx.ReadResource("vcd:index/vmPlacementPolicy:VmPlacementPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmPlacementPolicy resources.
type vmPlacementPolicyState struct {
	// Description of the VM Placement Policy
	Description *string `pulumi:"description"`
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the
	// entries set in this attribute
	LogicalVmGroupIds []string `pulumi:"logicalVmGroupIds"`
	// Name of the VM Placement Policy
	Name *string `pulumi:"name"`
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcId *string `pulumi:"providerVdcId"`
	// IDs of the collection of VMs with similar host requirements
	VmGroupIds []string `pulumi:"vmGroupIds"`
}

type VmPlacementPolicyState struct {
	// Description of the VM Placement Policy
	Description pulumi.StringPtrInput
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the
	// entries set in this attribute
	LogicalVmGroupIds pulumi.StringArrayInput
	// Name of the VM Placement Policy
	Name pulumi.StringPtrInput
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcId pulumi.StringPtrInput
	// IDs of the collection of VMs with similar host requirements
	VmGroupIds pulumi.StringArrayInput
}

func (VmPlacementPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmPlacementPolicyState)(nil)).Elem()
}

type vmPlacementPolicyArgs struct {
	// Description of the VM Placement Policy
	Description *string `pulumi:"description"`
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the
	// entries set in this attribute
	LogicalVmGroupIds []string `pulumi:"logicalVmGroupIds"`
	// Name of the VM Placement Policy
	Name *string `pulumi:"name"`
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcId string `pulumi:"providerVdcId"`
	// IDs of the collection of VMs with similar host requirements
	VmGroupIds []string `pulumi:"vmGroupIds"`
}

// The set of arguments for constructing a VmPlacementPolicy resource.
type VmPlacementPolicyArgs struct {
	// Description of the VM Placement Policy
	Description pulumi.StringPtrInput
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the
	// entries set in this attribute
	LogicalVmGroupIds pulumi.StringArrayInput
	// Name of the VM Placement Policy
	Name pulumi.StringPtrInput
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcId pulumi.StringInput
	// IDs of the collection of VMs with similar host requirements
	VmGroupIds pulumi.StringArrayInput
}

func (VmPlacementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmPlacementPolicyArgs)(nil)).Elem()
}

type VmPlacementPolicyInput interface {
	pulumi.Input

	ToVmPlacementPolicyOutput() VmPlacementPolicyOutput
	ToVmPlacementPolicyOutputWithContext(ctx context.Context) VmPlacementPolicyOutput
}

func (*VmPlacementPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VmPlacementPolicy)(nil)).Elem()
}

func (i *VmPlacementPolicy) ToVmPlacementPolicyOutput() VmPlacementPolicyOutput {
	return i.ToVmPlacementPolicyOutputWithContext(context.Background())
}

func (i *VmPlacementPolicy) ToVmPlacementPolicyOutputWithContext(ctx context.Context) VmPlacementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmPlacementPolicyOutput)
}

// VmPlacementPolicyArrayInput is an input type that accepts VmPlacementPolicyArray and VmPlacementPolicyArrayOutput values.
// You can construct a concrete instance of `VmPlacementPolicyArrayInput` via:
//
//	VmPlacementPolicyArray{ VmPlacementPolicyArgs{...} }
type VmPlacementPolicyArrayInput interface {
	pulumi.Input

	ToVmPlacementPolicyArrayOutput() VmPlacementPolicyArrayOutput
	ToVmPlacementPolicyArrayOutputWithContext(context.Context) VmPlacementPolicyArrayOutput
}

type VmPlacementPolicyArray []VmPlacementPolicyInput

func (VmPlacementPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmPlacementPolicy)(nil)).Elem()
}

func (i VmPlacementPolicyArray) ToVmPlacementPolicyArrayOutput() VmPlacementPolicyArrayOutput {
	return i.ToVmPlacementPolicyArrayOutputWithContext(context.Background())
}

func (i VmPlacementPolicyArray) ToVmPlacementPolicyArrayOutputWithContext(ctx context.Context) VmPlacementPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmPlacementPolicyArrayOutput)
}

// VmPlacementPolicyMapInput is an input type that accepts VmPlacementPolicyMap and VmPlacementPolicyMapOutput values.
// You can construct a concrete instance of `VmPlacementPolicyMapInput` via:
//
//	VmPlacementPolicyMap{ "key": VmPlacementPolicyArgs{...} }
type VmPlacementPolicyMapInput interface {
	pulumi.Input

	ToVmPlacementPolicyMapOutput() VmPlacementPolicyMapOutput
	ToVmPlacementPolicyMapOutputWithContext(context.Context) VmPlacementPolicyMapOutput
}

type VmPlacementPolicyMap map[string]VmPlacementPolicyInput

func (VmPlacementPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmPlacementPolicy)(nil)).Elem()
}

func (i VmPlacementPolicyMap) ToVmPlacementPolicyMapOutput() VmPlacementPolicyMapOutput {
	return i.ToVmPlacementPolicyMapOutputWithContext(context.Background())
}

func (i VmPlacementPolicyMap) ToVmPlacementPolicyMapOutputWithContext(ctx context.Context) VmPlacementPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmPlacementPolicyMapOutput)
}

type VmPlacementPolicyOutput struct{ *pulumi.OutputState }

func (VmPlacementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmPlacementPolicy)(nil)).Elem()
}

func (o VmPlacementPolicyOutput) ToVmPlacementPolicyOutput() VmPlacementPolicyOutput {
	return o
}

func (o VmPlacementPolicyOutput) ToVmPlacementPolicyOutputWithContext(ctx context.Context) VmPlacementPolicyOutput {
	return o
}

// Description of the VM Placement Policy
func (o VmPlacementPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmPlacementPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the
// entries set in this attribute
func (o VmPlacementPolicyOutput) LogicalVmGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmPlacementPolicy) pulumi.StringArrayOutput { return v.LogicalVmGroupIds }).(pulumi.StringArrayOutput)
}

// Name of the VM Placement Policy
func (o VmPlacementPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmPlacementPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the Provider VDC to which the VM Placement Policy belongs
func (o VmPlacementPolicyOutput) ProviderVdcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmPlacementPolicy) pulumi.StringOutput { return v.ProviderVdcId }).(pulumi.StringOutput)
}

// IDs of the collection of VMs with similar host requirements
func (o VmPlacementPolicyOutput) VmGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmPlacementPolicy) pulumi.StringArrayOutput { return v.VmGroupIds }).(pulumi.StringArrayOutput)
}

type VmPlacementPolicyArrayOutput struct{ *pulumi.OutputState }

func (VmPlacementPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmPlacementPolicy)(nil)).Elem()
}

func (o VmPlacementPolicyArrayOutput) ToVmPlacementPolicyArrayOutput() VmPlacementPolicyArrayOutput {
	return o
}

func (o VmPlacementPolicyArrayOutput) ToVmPlacementPolicyArrayOutputWithContext(ctx context.Context) VmPlacementPolicyArrayOutput {
	return o
}

func (o VmPlacementPolicyArrayOutput) Index(i pulumi.IntInput) VmPlacementPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmPlacementPolicy {
		return vs[0].([]*VmPlacementPolicy)[vs[1].(int)]
	}).(VmPlacementPolicyOutput)
}

type VmPlacementPolicyMapOutput struct{ *pulumi.OutputState }

func (VmPlacementPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmPlacementPolicy)(nil)).Elem()
}

func (o VmPlacementPolicyMapOutput) ToVmPlacementPolicyMapOutput() VmPlacementPolicyMapOutput {
	return o
}

func (o VmPlacementPolicyMapOutput) ToVmPlacementPolicyMapOutputWithContext(ctx context.Context) VmPlacementPolicyMapOutput {
	return o
}

func (o VmPlacementPolicyMapOutput) MapIndex(k pulumi.StringInput) VmPlacementPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmPlacementPolicy {
		return vs[0].(map[string]*VmPlacementPolicy)[vs[1].(string)]
	}).(VmPlacementPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmPlacementPolicyInput)(nil)).Elem(), &VmPlacementPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmPlacementPolicyArrayInput)(nil)).Elem(), VmPlacementPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmPlacementPolicyMapInput)(nil)).Elem(), VmPlacementPolicyMap{})
	pulumi.RegisterOutputType(VmPlacementPolicyOutput{})
	pulumi.RegisterOutputType(VmPlacementPolicyArrayOutput{})
	pulumi.RegisterOutputType(VmPlacementPolicyMapOutput{})
}
