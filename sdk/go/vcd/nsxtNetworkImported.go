// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtNetworkImported struct {
	pulumi.CustomResourceState

	// Network description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DNS server 1
	Dns1 pulumi.StringPtrOutput `pulumi:"dns1"`
	// DNS server 1
	Dns2 pulumi.StringPtrOutput `pulumi:"dns2"`
	// DNS suffix
	DnsSuffix pulumi.StringPtrOutput `pulumi:"dnsSuffix"`
	// Gateway IP address
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Network name
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of existing NSX-T Logical Switch
	NsxtLogicalSwitchId pulumi.StringOutput `pulumi:"nsxtLogicalSwitchId"`
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName pulumi.StringOutput `pulumi:"nsxtLogicalSwitchName"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// ID of VDC or VDC Group
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// Network prefix
	PrefixLength pulumi.IntOutput `pulumi:"prefixLength"`
	// IP ranges used for static pool allocation in the network
	StaticIpPools NsxtNetworkImportedStaticIpPoolArrayOutput `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtNetworkImported registers a new resource with the given unique name, arguments, and options.
func NewNsxtNetworkImported(ctx *pulumi.Context,
	name string, args *NsxtNetworkImportedArgs, opts ...pulumi.ResourceOption) (*NsxtNetworkImported, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	if args.NsxtLogicalSwitchName == nil {
		return nil, errors.New("invalid value for required argument 'NsxtLogicalSwitchName'")
	}
	if args.PrefixLength == nil {
		return nil, errors.New("invalid value for required argument 'PrefixLength'")
	}
	var resource NsxtNetworkImported
	err := ctx.RegisterResource("vcd:index/nsxtNetworkImported:NsxtNetworkImported", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtNetworkImported gets an existing NsxtNetworkImported resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtNetworkImported(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtNetworkImportedState, opts ...pulumi.ResourceOption) (*NsxtNetworkImported, error) {
	var resource NsxtNetworkImported
	err := ctx.ReadResource("vcd:index/nsxtNetworkImported:NsxtNetworkImported", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtNetworkImported resources.
type nsxtNetworkImportedState struct {
	// Network description
	Description *string `pulumi:"description"`
	// DNS server 1
	Dns1 *string `pulumi:"dns1"`
	// DNS server 1
	Dns2 *string `pulumi:"dns2"`
	// DNS suffix
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// Gateway IP address
	Gateway *string `pulumi:"gateway"`
	// Network name
	Name *string `pulumi:"name"`
	// ID of existing NSX-T Logical Switch
	NsxtLogicalSwitchId *string `pulumi:"nsxtLogicalSwitchId"`
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName *string `pulumi:"nsxtLogicalSwitchName"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// ID of VDC or VDC Group
	OwnerId *string `pulumi:"ownerId"`
	// Network prefix
	PrefixLength *int `pulumi:"prefixLength"`
	// IP ranges used for static pool allocation in the network
	StaticIpPools []NsxtNetworkImportedStaticIpPool `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc *string `pulumi:"vdc"`
}

type NsxtNetworkImportedState struct {
	// Network description
	Description pulumi.StringPtrInput
	// DNS server 1
	Dns1 pulumi.StringPtrInput
	// DNS server 1
	Dns2 pulumi.StringPtrInput
	// DNS suffix
	DnsSuffix pulumi.StringPtrInput
	// Gateway IP address
	Gateway pulumi.StringPtrInput
	// Network name
	Name pulumi.StringPtrInput
	// ID of existing NSX-T Logical Switch
	NsxtLogicalSwitchId pulumi.StringPtrInput
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// ID of VDC or VDC Group
	OwnerId pulumi.StringPtrInput
	// Network prefix
	PrefixLength pulumi.IntPtrInput
	// IP ranges used for static pool allocation in the network
	StaticIpPools NsxtNetworkImportedStaticIpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc pulumi.StringPtrInput
}

func (NsxtNetworkImportedState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNetworkImportedState)(nil)).Elem()
}

type nsxtNetworkImportedArgs struct {
	// Network description
	Description *string `pulumi:"description"`
	// DNS server 1
	Dns1 *string `pulumi:"dns1"`
	// DNS server 1
	Dns2 *string `pulumi:"dns2"`
	// DNS suffix
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// Gateway IP address
	Gateway string `pulumi:"gateway"`
	// Network name
	Name *string `pulumi:"name"`
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName string `pulumi:"nsxtLogicalSwitchName"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// ID of VDC or VDC Group
	OwnerId *string `pulumi:"ownerId"`
	// Network prefix
	PrefixLength int `pulumi:"prefixLength"`
	// IP ranges used for static pool allocation in the network
	StaticIpPools []NsxtNetworkImportedStaticIpPool `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtNetworkImported resource.
type NsxtNetworkImportedArgs struct {
	// Network description
	Description pulumi.StringPtrInput
	// DNS server 1
	Dns1 pulumi.StringPtrInput
	// DNS server 1
	Dns2 pulumi.StringPtrInput
	// DNS suffix
	DnsSuffix pulumi.StringPtrInput
	// Gateway IP address
	Gateway pulumi.StringInput
	// Network name
	Name pulumi.StringPtrInput
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName pulumi.StringInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// ID of VDC or VDC Group
	OwnerId pulumi.StringPtrInput
	// Network prefix
	PrefixLength pulumi.IntInput
	// IP ranges used for static pool allocation in the network
	StaticIpPools NsxtNetworkImportedStaticIpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc pulumi.StringPtrInput
}

func (NsxtNetworkImportedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNetworkImportedArgs)(nil)).Elem()
}

type NsxtNetworkImportedInput interface {
	pulumi.Input

	ToNsxtNetworkImportedOutput() NsxtNetworkImportedOutput
	ToNsxtNetworkImportedOutputWithContext(ctx context.Context) NsxtNetworkImportedOutput
}

func (*NsxtNetworkImported) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNetworkImported)(nil)).Elem()
}

func (i *NsxtNetworkImported) ToNsxtNetworkImportedOutput() NsxtNetworkImportedOutput {
	return i.ToNsxtNetworkImportedOutputWithContext(context.Background())
}

func (i *NsxtNetworkImported) ToNsxtNetworkImportedOutputWithContext(ctx context.Context) NsxtNetworkImportedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkImportedOutput)
}

// NsxtNetworkImportedArrayInput is an input type that accepts NsxtNetworkImportedArray and NsxtNetworkImportedArrayOutput values.
// You can construct a concrete instance of `NsxtNetworkImportedArrayInput` via:
//
//	NsxtNetworkImportedArray{ NsxtNetworkImportedArgs{...} }
type NsxtNetworkImportedArrayInput interface {
	pulumi.Input

	ToNsxtNetworkImportedArrayOutput() NsxtNetworkImportedArrayOutput
	ToNsxtNetworkImportedArrayOutputWithContext(context.Context) NsxtNetworkImportedArrayOutput
}

type NsxtNetworkImportedArray []NsxtNetworkImportedInput

func (NsxtNetworkImportedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNetworkImported)(nil)).Elem()
}

func (i NsxtNetworkImportedArray) ToNsxtNetworkImportedArrayOutput() NsxtNetworkImportedArrayOutput {
	return i.ToNsxtNetworkImportedArrayOutputWithContext(context.Background())
}

func (i NsxtNetworkImportedArray) ToNsxtNetworkImportedArrayOutputWithContext(ctx context.Context) NsxtNetworkImportedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkImportedArrayOutput)
}

// NsxtNetworkImportedMapInput is an input type that accepts NsxtNetworkImportedMap and NsxtNetworkImportedMapOutput values.
// You can construct a concrete instance of `NsxtNetworkImportedMapInput` via:
//
//	NsxtNetworkImportedMap{ "key": NsxtNetworkImportedArgs{...} }
type NsxtNetworkImportedMapInput interface {
	pulumi.Input

	ToNsxtNetworkImportedMapOutput() NsxtNetworkImportedMapOutput
	ToNsxtNetworkImportedMapOutputWithContext(context.Context) NsxtNetworkImportedMapOutput
}

type NsxtNetworkImportedMap map[string]NsxtNetworkImportedInput

func (NsxtNetworkImportedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNetworkImported)(nil)).Elem()
}

func (i NsxtNetworkImportedMap) ToNsxtNetworkImportedMapOutput() NsxtNetworkImportedMapOutput {
	return i.ToNsxtNetworkImportedMapOutputWithContext(context.Background())
}

func (i NsxtNetworkImportedMap) ToNsxtNetworkImportedMapOutputWithContext(ctx context.Context) NsxtNetworkImportedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkImportedMapOutput)
}

type NsxtNetworkImportedOutput struct{ *pulumi.OutputState }

func (NsxtNetworkImportedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNetworkImported)(nil)).Elem()
}

func (o NsxtNetworkImportedOutput) ToNsxtNetworkImportedOutput() NsxtNetworkImportedOutput {
	return o
}

func (o NsxtNetworkImportedOutput) ToNsxtNetworkImportedOutputWithContext(ctx context.Context) NsxtNetworkImportedOutput {
	return o
}

// Network description
func (o NsxtNetworkImportedOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DNS server 1
func (o NsxtNetworkImportedOutput) Dns1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringPtrOutput { return v.Dns1 }).(pulumi.StringPtrOutput)
}

// DNS server 1
func (o NsxtNetworkImportedOutput) Dns2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringPtrOutput { return v.Dns2 }).(pulumi.StringPtrOutput)
}

// DNS suffix
func (o NsxtNetworkImportedOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringPtrOutput { return v.DnsSuffix }).(pulumi.StringPtrOutput)
}

// Gateway IP address
func (o NsxtNetworkImportedOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Network name
func (o NsxtNetworkImportedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of existing NSX-T Logical Switch
func (o NsxtNetworkImportedOutput) NsxtLogicalSwitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringOutput { return v.NsxtLogicalSwitchId }).(pulumi.StringOutput)
}

// Name of existing NSX-T Logical Switch
func (o NsxtNetworkImportedOutput) NsxtLogicalSwitchName() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringOutput { return v.NsxtLogicalSwitchName }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxtNetworkImportedOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// ID of VDC or VDC Group
func (o NsxtNetworkImportedOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// Network prefix
func (o NsxtNetworkImportedOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.IntOutput { return v.PrefixLength }).(pulumi.IntOutput)
}

// IP ranges used for static pool allocation in the network
func (o NsxtNetworkImportedOutput) StaticIpPools() NsxtNetworkImportedStaticIpPoolArrayOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) NsxtNetworkImportedStaticIpPoolArrayOutput { return v.StaticIpPools }).(NsxtNetworkImportedStaticIpPoolArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
func (o NsxtNetworkImportedOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkImported) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtNetworkImportedArrayOutput struct{ *pulumi.OutputState }

func (NsxtNetworkImportedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNetworkImported)(nil)).Elem()
}

func (o NsxtNetworkImportedArrayOutput) ToNsxtNetworkImportedArrayOutput() NsxtNetworkImportedArrayOutput {
	return o
}

func (o NsxtNetworkImportedArrayOutput) ToNsxtNetworkImportedArrayOutputWithContext(ctx context.Context) NsxtNetworkImportedArrayOutput {
	return o
}

func (o NsxtNetworkImportedArrayOutput) Index(i pulumi.IntInput) NsxtNetworkImportedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtNetworkImported {
		return vs[0].([]*NsxtNetworkImported)[vs[1].(int)]
	}).(NsxtNetworkImportedOutput)
}

type NsxtNetworkImportedMapOutput struct{ *pulumi.OutputState }

func (NsxtNetworkImportedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNetworkImported)(nil)).Elem()
}

func (o NsxtNetworkImportedMapOutput) ToNsxtNetworkImportedMapOutput() NsxtNetworkImportedMapOutput {
	return o
}

func (o NsxtNetworkImportedMapOutput) ToNsxtNetworkImportedMapOutputWithContext(ctx context.Context) NsxtNetworkImportedMapOutput {
	return o
}

func (o NsxtNetworkImportedMapOutput) MapIndex(k pulumi.StringInput) NsxtNetworkImportedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtNetworkImported {
		return vs[0].(map[string]*NsxtNetworkImported)[vs[1].(string)]
	}).(NsxtNetworkImportedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkImportedInput)(nil)).Elem(), &NsxtNetworkImported{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkImportedArrayInput)(nil)).Elem(), NsxtNetworkImportedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkImportedMapInput)(nil)).Elem(), NsxtNetworkImportedMap{})
	pulumi.RegisterOutputType(NsxtNetworkImportedOutput{})
	pulumi.RegisterOutputType(NsxtNetworkImportedArrayOutput{})
	pulumi.RegisterOutputType(NsxtNetworkImportedMapOutput{})
}
