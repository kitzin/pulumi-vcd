// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtRouteAdvertisement struct {
	pulumi.CustomResourceState

	// NSX-T Edge Gateway ID in which route advertisement is located
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Defines if route advertisement is active
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
}

// NewNsxtRouteAdvertisement registers a new resource with the given unique name, arguments, and options.
func NewNsxtRouteAdvertisement(ctx *pulumi.Context,
	name string, args *NsxtRouteAdvertisementArgs, opts ...pulumi.ResourceOption) (*NsxtRouteAdvertisement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	var resource NsxtRouteAdvertisement
	err := ctx.RegisterResource("vcd:index/nsxtRouteAdvertisement:NsxtRouteAdvertisement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtRouteAdvertisement gets an existing NsxtRouteAdvertisement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtRouteAdvertisement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtRouteAdvertisementState, opts ...pulumi.ResourceOption) (*NsxtRouteAdvertisement, error) {
	var resource NsxtRouteAdvertisement
	err := ctx.ReadResource("vcd:index/nsxtRouteAdvertisement:NsxtRouteAdvertisement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtRouteAdvertisement resources.
type nsxtRouteAdvertisementState struct {
	// NSX-T Edge Gateway ID in which route advertisement is located
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Defines if route advertisement is active
	Enabled *bool `pulumi:"enabled"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	Subnets []string `pulumi:"subnets"`
}

type NsxtRouteAdvertisementState struct {
	// NSX-T Edge Gateway ID in which route advertisement is located
	EdgeGatewayId pulumi.StringPtrInput
	// Defines if route advertisement is active
	Enabled pulumi.BoolPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	Subnets pulumi.StringArrayInput
}

func (NsxtRouteAdvertisementState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtRouteAdvertisementState)(nil)).Elem()
}

type nsxtRouteAdvertisementArgs struct {
	// NSX-T Edge Gateway ID in which route advertisement is located
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Defines if route advertisement is active
	Enabled *bool `pulumi:"enabled"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	Subnets []string `pulumi:"subnets"`
}

// The set of arguments for constructing a NsxtRouteAdvertisement resource.
type NsxtRouteAdvertisementArgs struct {
	// NSX-T Edge Gateway ID in which route advertisement is located
	EdgeGatewayId pulumi.StringInput
	// Defines if route advertisement is active
	Enabled pulumi.BoolPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	Subnets pulumi.StringArrayInput
}

func (NsxtRouteAdvertisementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtRouteAdvertisementArgs)(nil)).Elem()
}

type NsxtRouteAdvertisementInput interface {
	pulumi.Input

	ToNsxtRouteAdvertisementOutput() NsxtRouteAdvertisementOutput
	ToNsxtRouteAdvertisementOutputWithContext(ctx context.Context) NsxtRouteAdvertisementOutput
}

func (*NsxtRouteAdvertisement) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtRouteAdvertisement)(nil)).Elem()
}

func (i *NsxtRouteAdvertisement) ToNsxtRouteAdvertisementOutput() NsxtRouteAdvertisementOutput {
	return i.ToNsxtRouteAdvertisementOutputWithContext(context.Background())
}

func (i *NsxtRouteAdvertisement) ToNsxtRouteAdvertisementOutputWithContext(ctx context.Context) NsxtRouteAdvertisementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtRouteAdvertisementOutput)
}

// NsxtRouteAdvertisementArrayInput is an input type that accepts NsxtRouteAdvertisementArray and NsxtRouteAdvertisementArrayOutput values.
// You can construct a concrete instance of `NsxtRouteAdvertisementArrayInput` via:
//
//	NsxtRouteAdvertisementArray{ NsxtRouteAdvertisementArgs{...} }
type NsxtRouteAdvertisementArrayInput interface {
	pulumi.Input

	ToNsxtRouteAdvertisementArrayOutput() NsxtRouteAdvertisementArrayOutput
	ToNsxtRouteAdvertisementArrayOutputWithContext(context.Context) NsxtRouteAdvertisementArrayOutput
}

type NsxtRouteAdvertisementArray []NsxtRouteAdvertisementInput

func (NsxtRouteAdvertisementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtRouteAdvertisement)(nil)).Elem()
}

func (i NsxtRouteAdvertisementArray) ToNsxtRouteAdvertisementArrayOutput() NsxtRouteAdvertisementArrayOutput {
	return i.ToNsxtRouteAdvertisementArrayOutputWithContext(context.Background())
}

func (i NsxtRouteAdvertisementArray) ToNsxtRouteAdvertisementArrayOutputWithContext(ctx context.Context) NsxtRouteAdvertisementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtRouteAdvertisementArrayOutput)
}

// NsxtRouteAdvertisementMapInput is an input type that accepts NsxtRouteAdvertisementMap and NsxtRouteAdvertisementMapOutput values.
// You can construct a concrete instance of `NsxtRouteAdvertisementMapInput` via:
//
//	NsxtRouteAdvertisementMap{ "key": NsxtRouteAdvertisementArgs{...} }
type NsxtRouteAdvertisementMapInput interface {
	pulumi.Input

	ToNsxtRouteAdvertisementMapOutput() NsxtRouteAdvertisementMapOutput
	ToNsxtRouteAdvertisementMapOutputWithContext(context.Context) NsxtRouteAdvertisementMapOutput
}

type NsxtRouteAdvertisementMap map[string]NsxtRouteAdvertisementInput

func (NsxtRouteAdvertisementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtRouteAdvertisement)(nil)).Elem()
}

func (i NsxtRouteAdvertisementMap) ToNsxtRouteAdvertisementMapOutput() NsxtRouteAdvertisementMapOutput {
	return i.ToNsxtRouteAdvertisementMapOutputWithContext(context.Background())
}

func (i NsxtRouteAdvertisementMap) ToNsxtRouteAdvertisementMapOutputWithContext(ctx context.Context) NsxtRouteAdvertisementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtRouteAdvertisementMapOutput)
}

type NsxtRouteAdvertisementOutput struct{ *pulumi.OutputState }

func (NsxtRouteAdvertisementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtRouteAdvertisement)(nil)).Elem()
}

func (o NsxtRouteAdvertisementOutput) ToNsxtRouteAdvertisementOutput() NsxtRouteAdvertisementOutput {
	return o
}

func (o NsxtRouteAdvertisementOutput) ToNsxtRouteAdvertisementOutputWithContext(ctx context.Context) NsxtRouteAdvertisementOutput {
	return o
}

// NSX-T Edge Gateway ID in which route advertisement is located
func (o NsxtRouteAdvertisementOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtRouteAdvertisement) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Defines if route advertisement is active
func (o NsxtRouteAdvertisementOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtRouteAdvertisement) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxtRouteAdvertisementOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtRouteAdvertisement) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
func (o NsxtRouteAdvertisementOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtRouteAdvertisement) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

type NsxtRouteAdvertisementArrayOutput struct{ *pulumi.OutputState }

func (NsxtRouteAdvertisementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtRouteAdvertisement)(nil)).Elem()
}

func (o NsxtRouteAdvertisementArrayOutput) ToNsxtRouteAdvertisementArrayOutput() NsxtRouteAdvertisementArrayOutput {
	return o
}

func (o NsxtRouteAdvertisementArrayOutput) ToNsxtRouteAdvertisementArrayOutputWithContext(ctx context.Context) NsxtRouteAdvertisementArrayOutput {
	return o
}

func (o NsxtRouteAdvertisementArrayOutput) Index(i pulumi.IntInput) NsxtRouteAdvertisementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtRouteAdvertisement {
		return vs[0].([]*NsxtRouteAdvertisement)[vs[1].(int)]
	}).(NsxtRouteAdvertisementOutput)
}

type NsxtRouteAdvertisementMapOutput struct{ *pulumi.OutputState }

func (NsxtRouteAdvertisementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtRouteAdvertisement)(nil)).Elem()
}

func (o NsxtRouteAdvertisementMapOutput) ToNsxtRouteAdvertisementMapOutput() NsxtRouteAdvertisementMapOutput {
	return o
}

func (o NsxtRouteAdvertisementMapOutput) ToNsxtRouteAdvertisementMapOutputWithContext(ctx context.Context) NsxtRouteAdvertisementMapOutput {
	return o
}

func (o NsxtRouteAdvertisementMapOutput) MapIndex(k pulumi.StringInput) NsxtRouteAdvertisementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtRouteAdvertisement {
		return vs[0].(map[string]*NsxtRouteAdvertisement)[vs[1].(string)]
	}).(NsxtRouteAdvertisementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtRouteAdvertisementInput)(nil)).Elem(), &NsxtRouteAdvertisement{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtRouteAdvertisementArrayInput)(nil)).Elem(), NsxtRouteAdvertisementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtRouteAdvertisementMapInput)(nil)).Elem(), NsxtRouteAdvertisementMap{})
	pulumi.RegisterOutputType(NsxtRouteAdvertisementOutput{})
	pulumi.RegisterOutputType(NsxtRouteAdvertisementArrayOutput{})
	pulumi.RegisterOutputType(NsxtRouteAdvertisementMapOutput{})
}
