// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VappStaticRouting struct {
	pulumi.CustomResourceState

	// Enable or disable static Routing. Default is `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// vApp network identifier
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   pulumi.StringPtrOutput           `pulumi:"org"`
	Rules VappStaticRoutingRuleArrayOutput `pulumi:"rules"`
	// vApp identifier
	VappId pulumi.StringOutput `pulumi:"vappId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewVappStaticRouting registers a new resource with the given unique name, arguments, and options.
func NewVappStaticRouting(ctx *pulumi.Context,
	name string, args *VappStaticRoutingArgs, opts ...pulumi.ResourceOption) (*VappStaticRouting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.VappId == nil {
		return nil, errors.New("invalid value for required argument 'VappId'")
	}
	var resource VappStaticRouting
	err := ctx.RegisterResource("vcd:index/vappStaticRouting:VappStaticRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVappStaticRouting gets an existing VappStaticRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVappStaticRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VappStaticRoutingState, opts ...pulumi.ResourceOption) (*VappStaticRouting, error) {
	var resource VappStaticRouting
	err := ctx.ReadResource("vcd:index/vappStaticRouting:VappStaticRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VappStaticRouting resources.
type vappStaticRoutingState struct {
	// Enable or disable static Routing. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// vApp network identifier
	NetworkId *string `pulumi:"networkId"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   *string                 `pulumi:"org"`
	Rules []VappStaticRoutingRule `pulumi:"rules"`
	// vApp identifier
	VappId *string `pulumi:"vappId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type VappStaticRoutingState struct {
	// Enable or disable static Routing. Default is `true`.
	Enabled pulumi.BoolPtrInput
	// vApp network identifier
	NetworkId pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   pulumi.StringPtrInput
	Rules VappStaticRoutingRuleArrayInput
	// vApp identifier
	VappId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (VappStaticRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vappStaticRoutingState)(nil)).Elem()
}

type vappStaticRoutingArgs struct {
	// Enable or disable static Routing. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// vApp network identifier
	NetworkId string `pulumi:"networkId"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   *string                 `pulumi:"org"`
	Rules []VappStaticRoutingRule `pulumi:"rules"`
	// vApp identifier
	VappId string `pulumi:"vappId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a VappStaticRouting resource.
type VappStaticRoutingArgs struct {
	// Enable or disable static Routing. Default is `true`.
	Enabled pulumi.BoolPtrInput
	// vApp network identifier
	NetworkId pulumi.StringInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org   pulumi.StringPtrInput
	Rules VappStaticRoutingRuleArrayInput
	// vApp identifier
	VappId pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (VappStaticRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vappStaticRoutingArgs)(nil)).Elem()
}

type VappStaticRoutingInput interface {
	pulumi.Input

	ToVappStaticRoutingOutput() VappStaticRoutingOutput
	ToVappStaticRoutingOutputWithContext(ctx context.Context) VappStaticRoutingOutput
}

func (*VappStaticRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**VappStaticRouting)(nil)).Elem()
}

func (i *VappStaticRouting) ToVappStaticRoutingOutput() VappStaticRoutingOutput {
	return i.ToVappStaticRoutingOutputWithContext(context.Background())
}

func (i *VappStaticRouting) ToVappStaticRoutingOutputWithContext(ctx context.Context) VappStaticRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappStaticRoutingOutput)
}

// VappStaticRoutingArrayInput is an input type that accepts VappStaticRoutingArray and VappStaticRoutingArrayOutput values.
// You can construct a concrete instance of `VappStaticRoutingArrayInput` via:
//
//	VappStaticRoutingArray{ VappStaticRoutingArgs{...} }
type VappStaticRoutingArrayInput interface {
	pulumi.Input

	ToVappStaticRoutingArrayOutput() VappStaticRoutingArrayOutput
	ToVappStaticRoutingArrayOutputWithContext(context.Context) VappStaticRoutingArrayOutput
}

type VappStaticRoutingArray []VappStaticRoutingInput

func (VappStaticRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappStaticRouting)(nil)).Elem()
}

func (i VappStaticRoutingArray) ToVappStaticRoutingArrayOutput() VappStaticRoutingArrayOutput {
	return i.ToVappStaticRoutingArrayOutputWithContext(context.Background())
}

func (i VappStaticRoutingArray) ToVappStaticRoutingArrayOutputWithContext(ctx context.Context) VappStaticRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappStaticRoutingArrayOutput)
}

// VappStaticRoutingMapInput is an input type that accepts VappStaticRoutingMap and VappStaticRoutingMapOutput values.
// You can construct a concrete instance of `VappStaticRoutingMapInput` via:
//
//	VappStaticRoutingMap{ "key": VappStaticRoutingArgs{...} }
type VappStaticRoutingMapInput interface {
	pulumi.Input

	ToVappStaticRoutingMapOutput() VappStaticRoutingMapOutput
	ToVappStaticRoutingMapOutputWithContext(context.Context) VappStaticRoutingMapOutput
}

type VappStaticRoutingMap map[string]VappStaticRoutingInput

func (VappStaticRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappStaticRouting)(nil)).Elem()
}

func (i VappStaticRoutingMap) ToVappStaticRoutingMapOutput() VappStaticRoutingMapOutput {
	return i.ToVappStaticRoutingMapOutputWithContext(context.Background())
}

func (i VappStaticRoutingMap) ToVappStaticRoutingMapOutputWithContext(ctx context.Context) VappStaticRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappStaticRoutingMapOutput)
}

type VappStaticRoutingOutput struct{ *pulumi.OutputState }

func (VappStaticRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VappStaticRouting)(nil)).Elem()
}

func (o VappStaticRoutingOutput) ToVappStaticRoutingOutput() VappStaticRoutingOutput {
	return o
}

func (o VappStaticRoutingOutput) ToVappStaticRoutingOutputWithContext(ctx context.Context) VappStaticRoutingOutput {
	return o
}

// Enable or disable static Routing. Default is `true`.
func (o VappStaticRoutingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappStaticRouting) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// vApp network identifier
func (o VappStaticRoutingOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappStaticRouting) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o VappStaticRoutingOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappStaticRouting) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

func (o VappStaticRoutingOutput) Rules() VappStaticRoutingRuleArrayOutput {
	return o.ApplyT(func(v *VappStaticRouting) VappStaticRoutingRuleArrayOutput { return v.Rules }).(VappStaticRoutingRuleArrayOutput)
}

// vApp identifier
func (o VappStaticRoutingOutput) VappId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappStaticRouting) pulumi.StringOutput { return v.VappId }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o VappStaticRoutingOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappStaticRouting) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type VappStaticRoutingArrayOutput struct{ *pulumi.OutputState }

func (VappStaticRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappStaticRouting)(nil)).Elem()
}

func (o VappStaticRoutingArrayOutput) ToVappStaticRoutingArrayOutput() VappStaticRoutingArrayOutput {
	return o
}

func (o VappStaticRoutingArrayOutput) ToVappStaticRoutingArrayOutputWithContext(ctx context.Context) VappStaticRoutingArrayOutput {
	return o
}

func (o VappStaticRoutingArrayOutput) Index(i pulumi.IntInput) VappStaticRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VappStaticRouting {
		return vs[0].([]*VappStaticRouting)[vs[1].(int)]
	}).(VappStaticRoutingOutput)
}

type VappStaticRoutingMapOutput struct{ *pulumi.OutputState }

func (VappStaticRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappStaticRouting)(nil)).Elem()
}

func (o VappStaticRoutingMapOutput) ToVappStaticRoutingMapOutput() VappStaticRoutingMapOutput {
	return o
}

func (o VappStaticRoutingMapOutput) ToVappStaticRoutingMapOutputWithContext(ctx context.Context) VappStaticRoutingMapOutput {
	return o
}

func (o VappStaticRoutingMapOutput) MapIndex(k pulumi.StringInput) VappStaticRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VappStaticRouting {
		return vs[0].(map[string]*VappStaticRouting)[vs[1].(string)]
	}).(VappStaticRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VappStaticRoutingInput)(nil)).Elem(), &VappStaticRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappStaticRoutingArrayInput)(nil)).Elem(), VappStaticRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappStaticRoutingMapInput)(nil)).Elem(), VappStaticRoutingMap{})
	pulumi.RegisterOutputType(VappStaticRoutingOutput{})
	pulumi.RegisterOutputType(VappStaticRoutingArrayOutput{})
	pulumi.RegisterOutputType(VappStaticRoutingMapOutput{})
}
