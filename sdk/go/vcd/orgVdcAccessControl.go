// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgVdcAccessControl struct {
	pulumi.CustomResourceState

	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is
	// set
	EveryoneAccessLevel pulumi.StringPtrOutput `pulumi:"everyoneAccessLevel"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Whether the VDC is shared with everyone
	SharedWithEveryone pulumi.BoolOutput                        `pulumi:"sharedWithEveryone"`
	SharedWiths        OrgVdcAccessControlSharedWithArrayOutput `pulumi:"sharedWiths"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewOrgVdcAccessControl registers a new resource with the given unique name, arguments, and options.
func NewOrgVdcAccessControl(ctx *pulumi.Context,
	name string, args *OrgVdcAccessControlArgs, opts ...pulumi.ResourceOption) (*OrgVdcAccessControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SharedWithEveryone == nil {
		return nil, errors.New("invalid value for required argument 'SharedWithEveryone'")
	}
	var resource OrgVdcAccessControl
	err := ctx.RegisterResource("vcd:index/orgVdcAccessControl:OrgVdcAccessControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgVdcAccessControl gets an existing OrgVdcAccessControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgVdcAccessControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgVdcAccessControlState, opts ...pulumi.ResourceOption) (*OrgVdcAccessControl, error) {
	var resource OrgVdcAccessControl
	err := ctx.ReadResource("vcd:index/orgVdcAccessControl:OrgVdcAccessControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgVdcAccessControl resources.
type orgVdcAccessControlState struct {
	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is
	// set
	EveryoneAccessLevel *string `pulumi:"everyoneAccessLevel"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Whether the VDC is shared with everyone
	SharedWithEveryone *bool                           `pulumi:"sharedWithEveryone"`
	SharedWiths        []OrgVdcAccessControlSharedWith `pulumi:"sharedWiths"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type OrgVdcAccessControlState struct {
	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is
	// set
	EveryoneAccessLevel pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Whether the VDC is shared with everyone
	SharedWithEveryone pulumi.BoolPtrInput
	SharedWiths        OrgVdcAccessControlSharedWithArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (OrgVdcAccessControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgVdcAccessControlState)(nil)).Elem()
}

type orgVdcAccessControlArgs struct {
	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is
	// set
	EveryoneAccessLevel *string `pulumi:"everyoneAccessLevel"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Whether the VDC is shared with everyone
	SharedWithEveryone bool                            `pulumi:"sharedWithEveryone"`
	SharedWiths        []OrgVdcAccessControlSharedWith `pulumi:"sharedWiths"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a OrgVdcAccessControl resource.
type OrgVdcAccessControlArgs struct {
	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is
	// set
	EveryoneAccessLevel pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Whether the VDC is shared with everyone
	SharedWithEveryone pulumi.BoolInput
	SharedWiths        OrgVdcAccessControlSharedWithArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (OrgVdcAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgVdcAccessControlArgs)(nil)).Elem()
}

type OrgVdcAccessControlInput interface {
	pulumi.Input

	ToOrgVdcAccessControlOutput() OrgVdcAccessControlOutput
	ToOrgVdcAccessControlOutputWithContext(ctx context.Context) OrgVdcAccessControlOutput
}

func (*OrgVdcAccessControl) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgVdcAccessControl)(nil)).Elem()
}

func (i *OrgVdcAccessControl) ToOrgVdcAccessControlOutput() OrgVdcAccessControlOutput {
	return i.ToOrgVdcAccessControlOutputWithContext(context.Background())
}

func (i *OrgVdcAccessControl) ToOrgVdcAccessControlOutputWithContext(ctx context.Context) OrgVdcAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcAccessControlOutput)
}

// OrgVdcAccessControlArrayInput is an input type that accepts OrgVdcAccessControlArray and OrgVdcAccessControlArrayOutput values.
// You can construct a concrete instance of `OrgVdcAccessControlArrayInput` via:
//
//	OrgVdcAccessControlArray{ OrgVdcAccessControlArgs{...} }
type OrgVdcAccessControlArrayInput interface {
	pulumi.Input

	ToOrgVdcAccessControlArrayOutput() OrgVdcAccessControlArrayOutput
	ToOrgVdcAccessControlArrayOutputWithContext(context.Context) OrgVdcAccessControlArrayOutput
}

type OrgVdcAccessControlArray []OrgVdcAccessControlInput

func (OrgVdcAccessControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgVdcAccessControl)(nil)).Elem()
}

func (i OrgVdcAccessControlArray) ToOrgVdcAccessControlArrayOutput() OrgVdcAccessControlArrayOutput {
	return i.ToOrgVdcAccessControlArrayOutputWithContext(context.Background())
}

func (i OrgVdcAccessControlArray) ToOrgVdcAccessControlArrayOutputWithContext(ctx context.Context) OrgVdcAccessControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcAccessControlArrayOutput)
}

// OrgVdcAccessControlMapInput is an input type that accepts OrgVdcAccessControlMap and OrgVdcAccessControlMapOutput values.
// You can construct a concrete instance of `OrgVdcAccessControlMapInput` via:
//
//	OrgVdcAccessControlMap{ "key": OrgVdcAccessControlArgs{...} }
type OrgVdcAccessControlMapInput interface {
	pulumi.Input

	ToOrgVdcAccessControlMapOutput() OrgVdcAccessControlMapOutput
	ToOrgVdcAccessControlMapOutputWithContext(context.Context) OrgVdcAccessControlMapOutput
}

type OrgVdcAccessControlMap map[string]OrgVdcAccessControlInput

func (OrgVdcAccessControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgVdcAccessControl)(nil)).Elem()
}

func (i OrgVdcAccessControlMap) ToOrgVdcAccessControlMapOutput() OrgVdcAccessControlMapOutput {
	return i.ToOrgVdcAccessControlMapOutputWithContext(context.Background())
}

func (i OrgVdcAccessControlMap) ToOrgVdcAccessControlMapOutputWithContext(ctx context.Context) OrgVdcAccessControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcAccessControlMapOutput)
}

type OrgVdcAccessControlOutput struct{ *pulumi.OutputState }

func (OrgVdcAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgVdcAccessControl)(nil)).Elem()
}

func (o OrgVdcAccessControlOutput) ToOrgVdcAccessControlOutput() OrgVdcAccessControlOutput {
	return o
}

func (o OrgVdcAccessControlOutput) ToOrgVdcAccessControlOutputWithContext(ctx context.Context) OrgVdcAccessControlOutput {
	return o
}

// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is
// set
func (o OrgVdcAccessControlOutput) EveryoneAccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdcAccessControl) pulumi.StringPtrOutput { return v.EveryoneAccessLevel }).(pulumi.StringPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o OrgVdcAccessControlOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdcAccessControl) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Whether the VDC is shared with everyone
func (o OrgVdcAccessControlOutput) SharedWithEveryone() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdcAccessControl) pulumi.BoolOutput { return v.SharedWithEveryone }).(pulumi.BoolOutput)
}

func (o OrgVdcAccessControlOutput) SharedWiths() OrgVdcAccessControlSharedWithArrayOutput {
	return o.ApplyT(func(v *OrgVdcAccessControl) OrgVdcAccessControlSharedWithArrayOutput { return v.SharedWiths }).(OrgVdcAccessControlSharedWithArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o OrgVdcAccessControlOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdcAccessControl) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type OrgVdcAccessControlArrayOutput struct{ *pulumi.OutputState }

func (OrgVdcAccessControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgVdcAccessControl)(nil)).Elem()
}

func (o OrgVdcAccessControlArrayOutput) ToOrgVdcAccessControlArrayOutput() OrgVdcAccessControlArrayOutput {
	return o
}

func (o OrgVdcAccessControlArrayOutput) ToOrgVdcAccessControlArrayOutputWithContext(ctx context.Context) OrgVdcAccessControlArrayOutput {
	return o
}

func (o OrgVdcAccessControlArrayOutput) Index(i pulumi.IntInput) OrgVdcAccessControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgVdcAccessControl {
		return vs[0].([]*OrgVdcAccessControl)[vs[1].(int)]
	}).(OrgVdcAccessControlOutput)
}

type OrgVdcAccessControlMapOutput struct{ *pulumi.OutputState }

func (OrgVdcAccessControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgVdcAccessControl)(nil)).Elem()
}

func (o OrgVdcAccessControlMapOutput) ToOrgVdcAccessControlMapOutput() OrgVdcAccessControlMapOutput {
	return o
}

func (o OrgVdcAccessControlMapOutput) ToOrgVdcAccessControlMapOutputWithContext(ctx context.Context) OrgVdcAccessControlMapOutput {
	return o
}

func (o OrgVdcAccessControlMapOutput) MapIndex(k pulumi.StringInput) OrgVdcAccessControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgVdcAccessControl {
		return vs[0].(map[string]*OrgVdcAccessControl)[vs[1].(string)]
	}).(OrgVdcAccessControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcAccessControlInput)(nil)).Elem(), &OrgVdcAccessControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcAccessControlArrayInput)(nil)).Elem(), OrgVdcAccessControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcAccessControlMapInput)(nil)).Elem(), OrgVdcAccessControlMap{})
	pulumi.RegisterOutputType(OrgVdcAccessControlOutput{})
	pulumi.RegisterOutputType(OrgVdcAccessControlArrayOutput{})
	pulumi.RegisterOutputType(OrgVdcAccessControlMapOutput{})
}
