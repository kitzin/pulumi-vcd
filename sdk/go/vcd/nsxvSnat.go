// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxvSnat struct {
	pulumi.CustomResourceState

	// NAT rule description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Edge gateway name in which NAT Rule is located
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// Whether the rule should be enabled. Default 'true'
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Whether logging should be enabled for this rule. Default 'false'
	LoggingEnabled pulumi.BoolPtrOutput `pulumi:"loggingEnabled"`
	// Org or external network name
	NetworkName pulumi.StringOutput `pulumi:"networkName"`
	// Network type. One of 'ext', 'org'
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Original address or address range. This is the the source address for SNAT rules
	OriginalAddress pulumi.StringOutput `pulumi:"originalAddress"`
	// Optional. Allows to set custom rule tag
	RuleTag pulumi.IntOutput `pulumi:"ruleTag"`
	// Read only. Possible values 'user', 'internal_high'
	RuleType pulumi.StringOutput `pulumi:"ruleType"`
	// Translated address or address range
	TranslatedAddress pulumi.StringPtrOutput `pulumi:"translatedAddress"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewNsxvSnat registers a new resource with the given unique name, arguments, and options.
func NewNsxvSnat(ctx *pulumi.Context,
	name string, args *NsxvSnatArgs, opts ...pulumi.ResourceOption) (*NsxvSnat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.NetworkName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkName'")
	}
	if args.NetworkType == nil {
		return nil, errors.New("invalid value for required argument 'NetworkType'")
	}
	if args.OriginalAddress == nil {
		return nil, errors.New("invalid value for required argument 'OriginalAddress'")
	}
	var resource NsxvSnat
	err := ctx.RegisterResource("vcd:index/nsxvSnat:NsxvSnat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxvSnat gets an existing NsxvSnat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxvSnat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxvSnatState, opts ...pulumi.ResourceOption) (*NsxvSnat, error) {
	var resource NsxvSnat
	err := ctx.ReadResource("vcd:index/nsxvSnat:NsxvSnat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxvSnat resources.
type nsxvSnatState struct {
	// NAT rule description
	Description *string `pulumi:"description"`
	// Edge gateway name in which NAT Rule is located
	EdgeGateway *string `pulumi:"edgeGateway"`
	// Whether the rule should be enabled. Default 'true'
	Enabled *bool `pulumi:"enabled"`
	// Whether logging should be enabled for this rule. Default 'false'
	LoggingEnabled *bool `pulumi:"loggingEnabled"`
	// Org or external network name
	NetworkName *string `pulumi:"networkName"`
	// Network type. One of 'ext', 'org'
	NetworkType *string `pulumi:"networkType"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Original address or address range. This is the the source address for SNAT rules
	OriginalAddress *string `pulumi:"originalAddress"`
	// Optional. Allows to set custom rule tag
	RuleTag *int `pulumi:"ruleTag"`
	// Read only. Possible values 'user', 'internal_high'
	RuleType *string `pulumi:"ruleType"`
	// Translated address or address range
	TranslatedAddress *string `pulumi:"translatedAddress"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type NsxvSnatState struct {
	// NAT rule description
	Description pulumi.StringPtrInput
	// Edge gateway name in which NAT Rule is located
	EdgeGateway pulumi.StringPtrInput
	// Whether the rule should be enabled. Default 'true'
	Enabled pulumi.BoolPtrInput
	// Whether logging should be enabled for this rule. Default 'false'
	LoggingEnabled pulumi.BoolPtrInput
	// Org or external network name
	NetworkName pulumi.StringPtrInput
	// Network type. One of 'ext', 'org'
	NetworkType pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Original address or address range. This is the the source address for SNAT rules
	OriginalAddress pulumi.StringPtrInput
	// Optional. Allows to set custom rule tag
	RuleTag pulumi.IntPtrInput
	// Read only. Possible values 'user', 'internal_high'
	RuleType pulumi.StringPtrInput
	// Translated address or address range
	TranslatedAddress pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NsxvSnatState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvSnatState)(nil)).Elem()
}

type nsxvSnatArgs struct {
	// NAT rule description
	Description *string `pulumi:"description"`
	// Edge gateway name in which NAT Rule is located
	EdgeGateway string `pulumi:"edgeGateway"`
	// Whether the rule should be enabled. Default 'true'
	Enabled *bool `pulumi:"enabled"`
	// Whether logging should be enabled for this rule. Default 'false'
	LoggingEnabled *bool `pulumi:"loggingEnabled"`
	// Org or external network name
	NetworkName string `pulumi:"networkName"`
	// Network type. One of 'ext', 'org'
	NetworkType string `pulumi:"networkType"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Original address or address range. This is the the source address for SNAT rules
	OriginalAddress string `pulumi:"originalAddress"`
	// Optional. Allows to set custom rule tag
	RuleTag *int `pulumi:"ruleTag"`
	// Read only. Possible values 'user', 'internal_high'
	RuleType *string `pulumi:"ruleType"`
	// Translated address or address range
	TranslatedAddress *string `pulumi:"translatedAddress"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxvSnat resource.
type NsxvSnatArgs struct {
	// NAT rule description
	Description pulumi.StringPtrInput
	// Edge gateway name in which NAT Rule is located
	EdgeGateway pulumi.StringInput
	// Whether the rule should be enabled. Default 'true'
	Enabled pulumi.BoolPtrInput
	// Whether logging should be enabled for this rule. Default 'false'
	LoggingEnabled pulumi.BoolPtrInput
	// Org or external network name
	NetworkName pulumi.StringInput
	// Network type. One of 'ext', 'org'
	NetworkType pulumi.StringInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Original address or address range. This is the the source address for SNAT rules
	OriginalAddress pulumi.StringInput
	// Optional. Allows to set custom rule tag
	RuleTag pulumi.IntPtrInput
	// Read only. Possible values 'user', 'internal_high'
	RuleType pulumi.StringPtrInput
	// Translated address or address range
	TranslatedAddress pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NsxvSnatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvSnatArgs)(nil)).Elem()
}

type NsxvSnatInput interface {
	pulumi.Input

	ToNsxvSnatOutput() NsxvSnatOutput
	ToNsxvSnatOutputWithContext(ctx context.Context) NsxvSnatOutput
}

func (*NsxvSnat) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvSnat)(nil)).Elem()
}

func (i *NsxvSnat) ToNsxvSnatOutput() NsxvSnatOutput {
	return i.ToNsxvSnatOutputWithContext(context.Background())
}

func (i *NsxvSnat) ToNsxvSnatOutputWithContext(ctx context.Context) NsxvSnatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvSnatOutput)
}

// NsxvSnatArrayInput is an input type that accepts NsxvSnatArray and NsxvSnatArrayOutput values.
// You can construct a concrete instance of `NsxvSnatArrayInput` via:
//
//	NsxvSnatArray{ NsxvSnatArgs{...} }
type NsxvSnatArrayInput interface {
	pulumi.Input

	ToNsxvSnatArrayOutput() NsxvSnatArrayOutput
	ToNsxvSnatArrayOutputWithContext(context.Context) NsxvSnatArrayOutput
}

type NsxvSnatArray []NsxvSnatInput

func (NsxvSnatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvSnat)(nil)).Elem()
}

func (i NsxvSnatArray) ToNsxvSnatArrayOutput() NsxvSnatArrayOutput {
	return i.ToNsxvSnatArrayOutputWithContext(context.Background())
}

func (i NsxvSnatArray) ToNsxvSnatArrayOutputWithContext(ctx context.Context) NsxvSnatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvSnatArrayOutput)
}

// NsxvSnatMapInput is an input type that accepts NsxvSnatMap and NsxvSnatMapOutput values.
// You can construct a concrete instance of `NsxvSnatMapInput` via:
//
//	NsxvSnatMap{ "key": NsxvSnatArgs{...} }
type NsxvSnatMapInput interface {
	pulumi.Input

	ToNsxvSnatMapOutput() NsxvSnatMapOutput
	ToNsxvSnatMapOutputWithContext(context.Context) NsxvSnatMapOutput
}

type NsxvSnatMap map[string]NsxvSnatInput

func (NsxvSnatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvSnat)(nil)).Elem()
}

func (i NsxvSnatMap) ToNsxvSnatMapOutput() NsxvSnatMapOutput {
	return i.ToNsxvSnatMapOutputWithContext(context.Background())
}

func (i NsxvSnatMap) ToNsxvSnatMapOutputWithContext(ctx context.Context) NsxvSnatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvSnatMapOutput)
}

type NsxvSnatOutput struct{ *pulumi.OutputState }

func (NsxvSnatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvSnat)(nil)).Elem()
}

func (o NsxvSnatOutput) ToNsxvSnatOutput() NsxvSnatOutput {
	return o
}

func (o NsxvSnatOutput) ToNsxvSnatOutputWithContext(ctx context.Context) NsxvSnatOutput {
	return o
}

// NAT rule description
func (o NsxvSnatOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Edge gateway name in which NAT Rule is located
func (o NsxvSnatOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// Whether the rule should be enabled. Default 'true'
func (o NsxvSnatOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether logging should be enabled for this rule. Default 'false'
func (o NsxvSnatOutput) LoggingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.BoolPtrOutput { return v.LoggingEnabled }).(pulumi.BoolPtrOutput)
}

// Org or external network name
func (o NsxvSnatOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringOutput { return v.NetworkName }).(pulumi.StringOutput)
}

// Network type. One of 'ext', 'org'
func (o NsxvSnatOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NsxvSnatOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Original address or address range. This is the the source address for SNAT rules
func (o NsxvSnatOutput) OriginalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringOutput { return v.OriginalAddress }).(pulumi.StringOutput)
}

// Optional. Allows to set custom rule tag
func (o NsxvSnatOutput) RuleTag() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.IntOutput { return v.RuleTag }).(pulumi.IntOutput)
}

// Read only. Possible values 'user', 'internal_high'
func (o NsxvSnatOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

// Translated address or address range
func (o NsxvSnatOutput) TranslatedAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringPtrOutput { return v.TranslatedAddress }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o NsxvSnatOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvSnat) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type NsxvSnatArrayOutput struct{ *pulumi.OutputState }

func (NsxvSnatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvSnat)(nil)).Elem()
}

func (o NsxvSnatArrayOutput) ToNsxvSnatArrayOutput() NsxvSnatArrayOutput {
	return o
}

func (o NsxvSnatArrayOutput) ToNsxvSnatArrayOutputWithContext(ctx context.Context) NsxvSnatArrayOutput {
	return o
}

func (o NsxvSnatArrayOutput) Index(i pulumi.IntInput) NsxvSnatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxvSnat {
		return vs[0].([]*NsxvSnat)[vs[1].(int)]
	}).(NsxvSnatOutput)
}

type NsxvSnatMapOutput struct{ *pulumi.OutputState }

func (NsxvSnatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvSnat)(nil)).Elem()
}

func (o NsxvSnatMapOutput) ToNsxvSnatMapOutput() NsxvSnatMapOutput {
	return o
}

func (o NsxvSnatMapOutput) ToNsxvSnatMapOutputWithContext(ctx context.Context) NsxvSnatMapOutput {
	return o
}

func (o NsxvSnatMapOutput) MapIndex(k pulumi.StringInput) NsxvSnatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxvSnat {
		return vs[0].(map[string]*NsxvSnat)[vs[1].(string)]
	}).(NsxvSnatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvSnatInput)(nil)).Elem(), &NsxvSnat{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvSnatArrayInput)(nil)).Elem(), NsxvSnatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvSnatMapInput)(nil)).Elem(), NsxvSnatMap{})
	pulumi.RegisterOutputType(NsxvSnatOutput{})
	pulumi.RegisterOutputType(NsxvSnatArrayOutput{})
	pulumi.RegisterOutputType(NsxvSnatMapOutput{})
}
