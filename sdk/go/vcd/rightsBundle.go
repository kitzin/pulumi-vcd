// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RightsBundle struct {
	pulumi.CustomResourceState

	// Key used for internationalization
	BundleKey pulumi.StringOutput `pulumi:"bundleKey"`
	// Rights bundle description
	Description pulumi.StringOutput `pulumi:"description"`
	// Name of rights bundle.
	Name pulumi.StringOutput `pulumi:"name"`
	// When true, publishes the rights bundle to all tenants
	PublishToAllTenants pulumi.BoolOutput `pulumi:"publishToAllTenants"`
	// Whether this rights bundle is read-only
	ReadOnly pulumi.BoolOutput `pulumi:"readOnly"`
	// Set of rights assigned to this rights bundle
	Rights pulumi.StringArrayOutput `pulumi:"rights"`
	// Set of tenants to which this rights bundle is published
	Tenants pulumi.StringArrayOutput `pulumi:"tenants"`
}

// NewRightsBundle registers a new resource with the given unique name, arguments, and options.
func NewRightsBundle(ctx *pulumi.Context,
	name string, args *RightsBundleArgs, opts ...pulumi.ResourceOption) (*RightsBundle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.PublishToAllTenants == nil {
		return nil, errors.New("invalid value for required argument 'PublishToAllTenants'")
	}
	var resource RightsBundle
	err := ctx.RegisterResource("vcd:index/rightsBundle:RightsBundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRightsBundle gets an existing RightsBundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRightsBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RightsBundleState, opts ...pulumi.ResourceOption) (*RightsBundle, error) {
	var resource RightsBundle
	err := ctx.ReadResource("vcd:index/rightsBundle:RightsBundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RightsBundle resources.
type rightsBundleState struct {
	// Key used for internationalization
	BundleKey *string `pulumi:"bundleKey"`
	// Rights bundle description
	Description *string `pulumi:"description"`
	// Name of rights bundle.
	Name *string `pulumi:"name"`
	// When true, publishes the rights bundle to all tenants
	PublishToAllTenants *bool `pulumi:"publishToAllTenants"`
	// Whether this rights bundle is read-only
	ReadOnly *bool `pulumi:"readOnly"`
	// Set of rights assigned to this rights bundle
	Rights []string `pulumi:"rights"`
	// Set of tenants to which this rights bundle is published
	Tenants []string `pulumi:"tenants"`
}

type RightsBundleState struct {
	// Key used for internationalization
	BundleKey pulumi.StringPtrInput
	// Rights bundle description
	Description pulumi.StringPtrInput
	// Name of rights bundle.
	Name pulumi.StringPtrInput
	// When true, publishes the rights bundle to all tenants
	PublishToAllTenants pulumi.BoolPtrInput
	// Whether this rights bundle is read-only
	ReadOnly pulumi.BoolPtrInput
	// Set of rights assigned to this rights bundle
	Rights pulumi.StringArrayInput
	// Set of tenants to which this rights bundle is published
	Tenants pulumi.StringArrayInput
}

func (RightsBundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*rightsBundleState)(nil)).Elem()
}

type rightsBundleArgs struct {
	// Rights bundle description
	Description string `pulumi:"description"`
	// Name of rights bundle.
	Name *string `pulumi:"name"`
	// When true, publishes the rights bundle to all tenants
	PublishToAllTenants bool `pulumi:"publishToAllTenants"`
	// Set of rights assigned to this rights bundle
	Rights []string `pulumi:"rights"`
	// Set of tenants to which this rights bundle is published
	Tenants []string `pulumi:"tenants"`
}

// The set of arguments for constructing a RightsBundle resource.
type RightsBundleArgs struct {
	// Rights bundle description
	Description pulumi.StringInput
	// Name of rights bundle.
	Name pulumi.StringPtrInput
	// When true, publishes the rights bundle to all tenants
	PublishToAllTenants pulumi.BoolInput
	// Set of rights assigned to this rights bundle
	Rights pulumi.StringArrayInput
	// Set of tenants to which this rights bundle is published
	Tenants pulumi.StringArrayInput
}

func (RightsBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rightsBundleArgs)(nil)).Elem()
}

type RightsBundleInput interface {
	pulumi.Input

	ToRightsBundleOutput() RightsBundleOutput
	ToRightsBundleOutputWithContext(ctx context.Context) RightsBundleOutput
}

func (*RightsBundle) ElementType() reflect.Type {
	return reflect.TypeOf((**RightsBundle)(nil)).Elem()
}

func (i *RightsBundle) ToRightsBundleOutput() RightsBundleOutput {
	return i.ToRightsBundleOutputWithContext(context.Background())
}

func (i *RightsBundle) ToRightsBundleOutputWithContext(ctx context.Context) RightsBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RightsBundleOutput)
}

// RightsBundleArrayInput is an input type that accepts RightsBundleArray and RightsBundleArrayOutput values.
// You can construct a concrete instance of `RightsBundleArrayInput` via:
//
//	RightsBundleArray{ RightsBundleArgs{...} }
type RightsBundleArrayInput interface {
	pulumi.Input

	ToRightsBundleArrayOutput() RightsBundleArrayOutput
	ToRightsBundleArrayOutputWithContext(context.Context) RightsBundleArrayOutput
}

type RightsBundleArray []RightsBundleInput

func (RightsBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RightsBundle)(nil)).Elem()
}

func (i RightsBundleArray) ToRightsBundleArrayOutput() RightsBundleArrayOutput {
	return i.ToRightsBundleArrayOutputWithContext(context.Background())
}

func (i RightsBundleArray) ToRightsBundleArrayOutputWithContext(ctx context.Context) RightsBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RightsBundleArrayOutput)
}

// RightsBundleMapInput is an input type that accepts RightsBundleMap and RightsBundleMapOutput values.
// You can construct a concrete instance of `RightsBundleMapInput` via:
//
//	RightsBundleMap{ "key": RightsBundleArgs{...} }
type RightsBundleMapInput interface {
	pulumi.Input

	ToRightsBundleMapOutput() RightsBundleMapOutput
	ToRightsBundleMapOutputWithContext(context.Context) RightsBundleMapOutput
}

type RightsBundleMap map[string]RightsBundleInput

func (RightsBundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RightsBundle)(nil)).Elem()
}

func (i RightsBundleMap) ToRightsBundleMapOutput() RightsBundleMapOutput {
	return i.ToRightsBundleMapOutputWithContext(context.Background())
}

func (i RightsBundleMap) ToRightsBundleMapOutputWithContext(ctx context.Context) RightsBundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RightsBundleMapOutput)
}

type RightsBundleOutput struct{ *pulumi.OutputState }

func (RightsBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RightsBundle)(nil)).Elem()
}

func (o RightsBundleOutput) ToRightsBundleOutput() RightsBundleOutput {
	return o
}

func (o RightsBundleOutput) ToRightsBundleOutputWithContext(ctx context.Context) RightsBundleOutput {
	return o
}

// Key used for internationalization
func (o RightsBundleOutput) BundleKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.StringOutput { return v.BundleKey }).(pulumi.StringOutput)
}

// Rights bundle description
func (o RightsBundleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name of rights bundle.
func (o RightsBundleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// When true, publishes the rights bundle to all tenants
func (o RightsBundleOutput) PublishToAllTenants() pulumi.BoolOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.BoolOutput { return v.PublishToAllTenants }).(pulumi.BoolOutput)
}

// Whether this rights bundle is read-only
func (o RightsBundleOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.BoolOutput { return v.ReadOnly }).(pulumi.BoolOutput)
}

// Set of rights assigned to this rights bundle
func (o RightsBundleOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.StringArrayOutput { return v.Rights }).(pulumi.StringArrayOutput)
}

// Set of tenants to which this rights bundle is published
func (o RightsBundleOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RightsBundle) pulumi.StringArrayOutput { return v.Tenants }).(pulumi.StringArrayOutput)
}

type RightsBundleArrayOutput struct{ *pulumi.OutputState }

func (RightsBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RightsBundle)(nil)).Elem()
}

func (o RightsBundleArrayOutput) ToRightsBundleArrayOutput() RightsBundleArrayOutput {
	return o
}

func (o RightsBundleArrayOutput) ToRightsBundleArrayOutputWithContext(ctx context.Context) RightsBundleArrayOutput {
	return o
}

func (o RightsBundleArrayOutput) Index(i pulumi.IntInput) RightsBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RightsBundle {
		return vs[0].([]*RightsBundle)[vs[1].(int)]
	}).(RightsBundleOutput)
}

type RightsBundleMapOutput struct{ *pulumi.OutputState }

func (RightsBundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RightsBundle)(nil)).Elem()
}

func (o RightsBundleMapOutput) ToRightsBundleMapOutput() RightsBundleMapOutput {
	return o
}

func (o RightsBundleMapOutput) ToRightsBundleMapOutputWithContext(ctx context.Context) RightsBundleMapOutput {
	return o
}

func (o RightsBundleMapOutput) MapIndex(k pulumi.StringInput) RightsBundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RightsBundle {
		return vs[0].(map[string]*RightsBundle)[vs[1].(string)]
	}).(RightsBundleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RightsBundleInput)(nil)).Elem(), &RightsBundle{})
	pulumi.RegisterInputType(reflect.TypeOf((*RightsBundleArrayInput)(nil)).Elem(), RightsBundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RightsBundleMapInput)(nil)).Elem(), RightsBundleMap{})
	pulumi.RegisterOutputType(RightsBundleOutput{})
	pulumi.RegisterOutputType(RightsBundleArrayOutput{})
	pulumi.RegisterOutputType(RightsBundleMapOutput{})
}
