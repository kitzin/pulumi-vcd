// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgUser struct {
	pulumi.CustomResourceState

	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVmQuota pulumi.IntOutput `pulumi:"deployedVmQuota"`
	// The user's description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The user's email address
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
	// True if the user is enabled and can log in.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The user's full name
	FullName pulumi.StringOutput `pulumi:"fullName"`
	// Read only. Set of group names that this user belongs to
	GroupNames pulumi.StringArrayOutput `pulumi:"groupNames"`
	// The user's telephone
	InstantMessaging pulumi.StringOutput `pulumi:"instantMessaging"`
	// True if this user is imported from an external resource, like an LDAP.
	IsExternal pulumi.BoolPtrOutput `pulumi:"isExternal"`
	// True if this user has a group role.
	IsGroupRole pulumi.BoolPtrOutput `pulumi:"isGroupRole"`
	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
	// system can lock the user). To unlock the user re-set this flag to false.
	IsLocked pulumi.BoolPtrOutput `pulumi:"isLocked"`
	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
	// creation unless is_external is true.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
	// is_external is true.
	PasswordFile pulumi.StringPtrOutput `pulumi:"passwordFile"`
	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
	// 'INTEGRATED' is used.
	ProviderType pulumi.StringPtrOutput `pulumi:"providerType"`
	// Role within the organization
	Role pulumi.StringOutput `pulumi:"role"`
	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVmQuota pulumi.IntOutput `pulumi:"storedVmQuota"`
	// Take ownership of user's objects on deletion.
	TakeOwnership pulumi.BoolPtrOutput `pulumi:"takeOwnership"`
	// The user's telephone
	Telephone pulumi.StringOutput `pulumi:"telephone"`
}

// NewOrgUser registers a new resource with the given unique name, arguments, and options.
func NewOrgUser(ctx *pulumi.Context,
	name string, args *OrgUserArgs, opts ...pulumi.ResourceOption) (*OrgUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource OrgUser
	err := ctx.RegisterResource("vcd:index/orgUser:OrgUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgUser gets an existing OrgUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgUserState, opts ...pulumi.ResourceOption) (*OrgUser, error) {
	var resource OrgUser
	err := ctx.ReadResource("vcd:index/orgUser:OrgUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgUser resources.
type orgUserState struct {
	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVmQuota *int `pulumi:"deployedVmQuota"`
	// The user's description
	Description *string `pulumi:"description"`
	// The user's email address
	EmailAddress *string `pulumi:"emailAddress"`
	// True if the user is enabled and can log in.
	Enabled *bool `pulumi:"enabled"`
	// The user's full name
	FullName *string `pulumi:"fullName"`
	// Read only. Set of group names that this user belongs to
	GroupNames []string `pulumi:"groupNames"`
	// The user's telephone
	InstantMessaging *string `pulumi:"instantMessaging"`
	// True if this user is imported from an external resource, like an LDAP.
	IsExternal *bool `pulumi:"isExternal"`
	// True if this user has a group role.
	IsGroupRole *bool `pulumi:"isGroupRole"`
	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
	// system can lock the user). To unlock the user re-set this flag to false.
	IsLocked *bool `pulumi:"isLocked"`
	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
	// creation unless is_external is true.
	Password *string `pulumi:"password"`
	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
	// is_external is true.
	PasswordFile *string `pulumi:"passwordFile"`
	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
	// 'INTEGRATED' is used.
	ProviderType *string `pulumi:"providerType"`
	// Role within the organization
	Role *string `pulumi:"role"`
	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVmQuota *int `pulumi:"storedVmQuota"`
	// Take ownership of user's objects on deletion.
	TakeOwnership *bool `pulumi:"takeOwnership"`
	// The user's telephone
	Telephone *string `pulumi:"telephone"`
}

type OrgUserState struct {
	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVmQuota pulumi.IntPtrInput
	// The user's description
	Description pulumi.StringPtrInput
	// The user's email address
	EmailAddress pulumi.StringPtrInput
	// True if the user is enabled and can log in.
	Enabled pulumi.BoolPtrInput
	// The user's full name
	FullName pulumi.StringPtrInput
	// Read only. Set of group names that this user belongs to
	GroupNames pulumi.StringArrayInput
	// The user's telephone
	InstantMessaging pulumi.StringPtrInput
	// True if this user is imported from an external resource, like an LDAP.
	IsExternal pulumi.BoolPtrInput
	// True if this user has a group role.
	IsGroupRole pulumi.BoolPtrInput
	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
	// system can lock the user). To unlock the user re-set this flag to false.
	IsLocked pulumi.BoolPtrInput
	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
	// creation unless is_external is true.
	Password pulumi.StringPtrInput
	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
	// is_external is true.
	PasswordFile pulumi.StringPtrInput
	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
	// 'INTEGRATED' is used.
	ProviderType pulumi.StringPtrInput
	// Role within the organization
	Role pulumi.StringPtrInput
	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVmQuota pulumi.IntPtrInput
	// Take ownership of user's objects on deletion.
	TakeOwnership pulumi.BoolPtrInput
	// The user's telephone
	Telephone pulumi.StringPtrInput
}

func (OrgUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgUserState)(nil)).Elem()
}

type orgUserArgs struct {
	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVmQuota *int `pulumi:"deployedVmQuota"`
	// The user's description
	Description *string `pulumi:"description"`
	// The user's email address
	EmailAddress *string `pulumi:"emailAddress"`
	// True if the user is enabled and can log in.
	Enabled *bool `pulumi:"enabled"`
	// The user's full name
	FullName *string `pulumi:"fullName"`
	// The user's telephone
	InstantMessaging *string `pulumi:"instantMessaging"`
	// True if this user is imported from an external resource, like an LDAP.
	IsExternal *bool `pulumi:"isExternal"`
	// True if this user has a group role.
	IsGroupRole *bool `pulumi:"isGroupRole"`
	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
	// system can lock the user). To unlock the user re-set this flag to false.
	IsLocked *bool `pulumi:"isLocked"`
	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
	// creation unless is_external is true.
	Password *string `pulumi:"password"`
	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
	// is_external is true.
	PasswordFile *string `pulumi:"passwordFile"`
	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
	// 'INTEGRATED' is used.
	ProviderType *string `pulumi:"providerType"`
	// Role within the organization
	Role string `pulumi:"role"`
	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVmQuota *int `pulumi:"storedVmQuota"`
	// Take ownership of user's objects on deletion.
	TakeOwnership *bool `pulumi:"takeOwnership"`
	// The user's telephone
	Telephone *string `pulumi:"telephone"`
}

// The set of arguments for constructing a OrgUser resource.
type OrgUserArgs struct {
	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVmQuota pulumi.IntPtrInput
	// The user's description
	Description pulumi.StringPtrInput
	// The user's email address
	EmailAddress pulumi.StringPtrInput
	// True if the user is enabled and can log in.
	Enabled pulumi.BoolPtrInput
	// The user's full name
	FullName pulumi.StringPtrInput
	// The user's telephone
	InstantMessaging pulumi.StringPtrInput
	// True if this user is imported from an external resource, like an LDAP.
	IsExternal pulumi.BoolPtrInput
	// True if this user has a group role.
	IsGroupRole pulumi.BoolPtrInput
	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
	// system can lock the user). To unlock the user re-set this flag to false.
	IsLocked pulumi.BoolPtrInput
	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
	// creation unless is_external is true.
	Password pulumi.StringPtrInput
	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
	// is_external is true.
	PasswordFile pulumi.StringPtrInput
	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
	// 'INTEGRATED' is used.
	ProviderType pulumi.StringPtrInput
	// Role within the organization
	Role pulumi.StringInput
	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVmQuota pulumi.IntPtrInput
	// Take ownership of user's objects on deletion.
	TakeOwnership pulumi.BoolPtrInput
	// The user's telephone
	Telephone pulumi.StringPtrInput
}

func (OrgUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgUserArgs)(nil)).Elem()
}

type OrgUserInput interface {
	pulumi.Input

	ToOrgUserOutput() OrgUserOutput
	ToOrgUserOutputWithContext(ctx context.Context) OrgUserOutput
}

func (*OrgUser) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgUser)(nil)).Elem()
}

func (i *OrgUser) ToOrgUserOutput() OrgUserOutput {
	return i.ToOrgUserOutputWithContext(context.Background())
}

func (i *OrgUser) ToOrgUserOutputWithContext(ctx context.Context) OrgUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgUserOutput)
}

// OrgUserArrayInput is an input type that accepts OrgUserArray and OrgUserArrayOutput values.
// You can construct a concrete instance of `OrgUserArrayInput` via:
//
//	OrgUserArray{ OrgUserArgs{...} }
type OrgUserArrayInput interface {
	pulumi.Input

	ToOrgUserArrayOutput() OrgUserArrayOutput
	ToOrgUserArrayOutputWithContext(context.Context) OrgUserArrayOutput
}

type OrgUserArray []OrgUserInput

func (OrgUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgUser)(nil)).Elem()
}

func (i OrgUserArray) ToOrgUserArrayOutput() OrgUserArrayOutput {
	return i.ToOrgUserArrayOutputWithContext(context.Background())
}

func (i OrgUserArray) ToOrgUserArrayOutputWithContext(ctx context.Context) OrgUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgUserArrayOutput)
}

// OrgUserMapInput is an input type that accepts OrgUserMap and OrgUserMapOutput values.
// You can construct a concrete instance of `OrgUserMapInput` via:
//
//	OrgUserMap{ "key": OrgUserArgs{...} }
type OrgUserMapInput interface {
	pulumi.Input

	ToOrgUserMapOutput() OrgUserMapOutput
	ToOrgUserMapOutputWithContext(context.Context) OrgUserMapOutput
}

type OrgUserMap map[string]OrgUserInput

func (OrgUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgUser)(nil)).Elem()
}

func (i OrgUserMap) ToOrgUserMapOutput() OrgUserMapOutput {
	return i.ToOrgUserMapOutputWithContext(context.Background())
}

func (i OrgUserMap) ToOrgUserMapOutputWithContext(ctx context.Context) OrgUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgUserMapOutput)
}

type OrgUserOutput struct{ *pulumi.OutputState }

func (OrgUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgUser)(nil)).Elem()
}

func (o OrgUserOutput) ToOrgUserOutput() OrgUserOutput {
	return o
}

func (o OrgUserOutput) ToOrgUserOutputWithContext(ctx context.Context) OrgUserOutput {
	return o
}

// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
func (o OrgUserOutput) DeployedVmQuota() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.IntOutput { return v.DeployedVmQuota }).(pulumi.IntOutput)
}

// The user's description
func (o OrgUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The user's email address
func (o OrgUserOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringOutput { return v.EmailAddress }).(pulumi.StringOutput)
}

// True if the user is enabled and can log in.
func (o OrgUserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The user's full name
func (o OrgUserOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringOutput { return v.FullName }).(pulumi.StringOutput)
}

// Read only. Set of group names that this user belongs to
func (o OrgUserOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringArrayOutput { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The user's telephone
func (o OrgUserOutput) InstantMessaging() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringOutput { return v.InstantMessaging }).(pulumi.StringOutput)
}

// True if this user is imported from an external resource, like an LDAP.
func (o OrgUserOutput) IsExternal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.BoolPtrOutput { return v.IsExternal }).(pulumi.BoolPtrOutput)
}

// True if this user has a group role.
func (o OrgUserOutput) IsGroupRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.BoolPtrOutput { return v.IsGroupRole }).(pulumi.BoolPtrOutput)
}

// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
// system can lock the user). To unlock the user re-set this flag to false.
func (o OrgUserOutput) IsLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.BoolPtrOutput { return v.IsLocked }).(pulumi.BoolPtrOutput)
}

// User's name. Only lowercase letters allowed. Cannot be changed after creation
func (o OrgUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o OrgUserOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
// creation unless is_external is true.
func (o OrgUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
// is_external is true.
func (o OrgUserOutput) PasswordFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringPtrOutput { return v.PasswordFile }).(pulumi.StringPtrOutput)
}

// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
// 'INTEGRATED' is used.
func (o OrgUserOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringPtrOutput { return v.ProviderType }).(pulumi.StringPtrOutput)
}

// Role within the organization
func (o OrgUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
func (o OrgUserOutput) StoredVmQuota() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.IntOutput { return v.StoredVmQuota }).(pulumi.IntOutput)
}

// Take ownership of user's objects on deletion.
func (o OrgUserOutput) TakeOwnership() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.BoolPtrOutput { return v.TakeOwnership }).(pulumi.BoolPtrOutput)
}

// The user's telephone
func (o OrgUserOutput) Telephone() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgUser) pulumi.StringOutput { return v.Telephone }).(pulumi.StringOutput)
}

type OrgUserArrayOutput struct{ *pulumi.OutputState }

func (OrgUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgUser)(nil)).Elem()
}

func (o OrgUserArrayOutput) ToOrgUserArrayOutput() OrgUserArrayOutput {
	return o
}

func (o OrgUserArrayOutput) ToOrgUserArrayOutputWithContext(ctx context.Context) OrgUserArrayOutput {
	return o
}

func (o OrgUserArrayOutput) Index(i pulumi.IntInput) OrgUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgUser {
		return vs[0].([]*OrgUser)[vs[1].(int)]
	}).(OrgUserOutput)
}

type OrgUserMapOutput struct{ *pulumi.OutputState }

func (OrgUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgUser)(nil)).Elem()
}

func (o OrgUserMapOutput) ToOrgUserMapOutput() OrgUserMapOutput {
	return o
}

func (o OrgUserMapOutput) ToOrgUserMapOutputWithContext(ctx context.Context) OrgUserMapOutput {
	return o
}

func (o OrgUserMapOutput) MapIndex(k pulumi.StringInput) OrgUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgUser {
		return vs[0].(map[string]*OrgUser)[vs[1].(string)]
	}).(OrgUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgUserInput)(nil)).Elem(), &OrgUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgUserArrayInput)(nil)).Elem(), OrgUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgUserMapInput)(nil)).Elem(), OrgUserMap{})
	pulumi.RegisterOutputType(OrgUserOutput{})
	pulumi.RegisterOutputType(OrgUserArrayOutput{})
	pulumi.RegisterOutputType(OrgUserMapOutput{})
}
