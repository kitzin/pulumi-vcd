// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkIsolated struct {
	pulumi.CustomResourceState

	// Optional description for the network
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A range of IPs to issue to virtual machines that don't have a static IP
	DhcpPools NetworkIsolatedDhcpPoolArrayOutput `pulumi:"dhcpPools"`
	// First DNS server to use
	Dns1 pulumi.StringPtrOutput `pulumi:"dns1"`
	// Second DNS server to use
	Dns2 pulumi.StringPtrOutput `pulumi:"dns2"`
	// A FQDN for the virtual machines on this network
	DnsSuffix pulumi.StringPtrOutput `pulumi:"dnsSuffix"`
	// The gateway for this network
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// Network Hyper Reference
	Href pulumi.StringOutput `pulumi:"href"`
	// Key value map of metadata to assign to this network. Key and value can be any string
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// Metadata entries for the given Network
	MetadataEntries NetworkIsolatedMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// A unique name for this network
	Name pulumi.StringOutput `pulumi:"name"`
	// The netmask for the new network
	Netmask pulumi.StringPtrOutput `pulumi:"netmask"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Defines if this network is shared between multiple VDCs in the Org
	Shared pulumi.BoolPtrOutput `pulumi:"shared"`
	// A range of IPs permitted to be used as static IPs for virtual machines
	StaticIpPools NetworkIsolatedStaticIpPoolArrayOutput `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewNetworkIsolated registers a new resource with the given unique name, arguments, and options.
func NewNetworkIsolated(ctx *pulumi.Context,
	name string, args *NetworkIsolatedArgs, opts ...pulumi.ResourceOption) (*NetworkIsolated, error) {
	if args == nil {
		args = &NetworkIsolatedArgs{}
	}

	var resource NetworkIsolated
	err := ctx.RegisterResource("vcd:index/networkIsolated:NetworkIsolated", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkIsolated gets an existing NetworkIsolated resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkIsolated(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkIsolatedState, opts ...pulumi.ResourceOption) (*NetworkIsolated, error) {
	var resource NetworkIsolated
	err := ctx.ReadResource("vcd:index/networkIsolated:NetworkIsolated", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkIsolated resources.
type networkIsolatedState struct {
	// Optional description for the network
	Description *string `pulumi:"description"`
	// A range of IPs to issue to virtual machines that don't have a static IP
	DhcpPools []NetworkIsolatedDhcpPool `pulumi:"dhcpPools"`
	// First DNS server to use
	Dns1 *string `pulumi:"dns1"`
	// Second DNS server to use
	Dns2 *string `pulumi:"dns2"`
	// A FQDN for the virtual machines on this network
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The gateway for this network
	Gateway *string `pulumi:"gateway"`
	// Network Hyper Reference
	Href *string `pulumi:"href"`
	// Key value map of metadata to assign to this network. Key and value can be any string
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given Network
	MetadataEntries []NetworkIsolatedMetadataEntry `pulumi:"metadataEntries"`
	// A unique name for this network
	Name *string `pulumi:"name"`
	// The netmask for the new network
	Netmask *string `pulumi:"netmask"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Defines if this network is shared between multiple VDCs in the Org
	Shared *bool `pulumi:"shared"`
	// A range of IPs permitted to be used as static IPs for virtual machines
	StaticIpPools []NetworkIsolatedStaticIpPool `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type NetworkIsolatedState struct {
	// Optional description for the network
	Description pulumi.StringPtrInput
	// A range of IPs to issue to virtual machines that don't have a static IP
	DhcpPools NetworkIsolatedDhcpPoolArrayInput
	// First DNS server to use
	Dns1 pulumi.StringPtrInput
	// Second DNS server to use
	Dns2 pulumi.StringPtrInput
	// A FQDN for the virtual machines on this network
	DnsSuffix pulumi.StringPtrInput
	// The gateway for this network
	Gateway pulumi.StringPtrInput
	// Network Hyper Reference
	Href pulumi.StringPtrInput
	// Key value map of metadata to assign to this network. Key and value can be any string
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given Network
	MetadataEntries NetworkIsolatedMetadataEntryArrayInput
	// A unique name for this network
	Name pulumi.StringPtrInput
	// The netmask for the new network
	Netmask pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Defines if this network is shared between multiple VDCs in the Org
	Shared pulumi.BoolPtrInput
	// A range of IPs permitted to be used as static IPs for virtual machines
	StaticIpPools NetworkIsolatedStaticIpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NetworkIsolatedState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkIsolatedState)(nil)).Elem()
}

type networkIsolatedArgs struct {
	// Optional description for the network
	Description *string `pulumi:"description"`
	// A range of IPs to issue to virtual machines that don't have a static IP
	DhcpPools []NetworkIsolatedDhcpPool `pulumi:"dhcpPools"`
	// First DNS server to use
	Dns1 *string `pulumi:"dns1"`
	// Second DNS server to use
	Dns2 *string `pulumi:"dns2"`
	// A FQDN for the virtual machines on this network
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The gateway for this network
	Gateway *string `pulumi:"gateway"`
	// Key value map of metadata to assign to this network. Key and value can be any string
	//
	// Deprecated: Use metadata_entry instead
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Metadata entries for the given Network
	MetadataEntries []NetworkIsolatedMetadataEntry `pulumi:"metadataEntries"`
	// A unique name for this network
	Name *string `pulumi:"name"`
	// The netmask for the new network
	Netmask *string `pulumi:"netmask"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Defines if this network is shared between multiple VDCs in the Org
	Shared *bool `pulumi:"shared"`
	// A range of IPs permitted to be used as static IPs for virtual machines
	StaticIpPools []NetworkIsolatedStaticIpPool `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NetworkIsolated resource.
type NetworkIsolatedArgs struct {
	// Optional description for the network
	Description pulumi.StringPtrInput
	// A range of IPs to issue to virtual machines that don't have a static IP
	DhcpPools NetworkIsolatedDhcpPoolArrayInput
	// First DNS server to use
	Dns1 pulumi.StringPtrInput
	// Second DNS server to use
	Dns2 pulumi.StringPtrInput
	// A FQDN for the virtual machines on this network
	DnsSuffix pulumi.StringPtrInput
	// The gateway for this network
	Gateway pulumi.StringPtrInput
	// Key value map of metadata to assign to this network. Key and value can be any string
	//
	// Deprecated: Use metadata_entry instead
	Metadata pulumi.MapInput
	// Metadata entries for the given Network
	MetadataEntries NetworkIsolatedMetadataEntryArrayInput
	// A unique name for this network
	Name pulumi.StringPtrInput
	// The netmask for the new network
	Netmask pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Defines if this network is shared between multiple VDCs in the Org
	Shared pulumi.BoolPtrInput
	// A range of IPs permitted to be used as static IPs for virtual machines
	StaticIpPools NetworkIsolatedStaticIpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NetworkIsolatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkIsolatedArgs)(nil)).Elem()
}

type NetworkIsolatedInput interface {
	pulumi.Input

	ToNetworkIsolatedOutput() NetworkIsolatedOutput
	ToNetworkIsolatedOutputWithContext(ctx context.Context) NetworkIsolatedOutput
}

func (*NetworkIsolated) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkIsolated)(nil)).Elem()
}

func (i *NetworkIsolated) ToNetworkIsolatedOutput() NetworkIsolatedOutput {
	return i.ToNetworkIsolatedOutputWithContext(context.Background())
}

func (i *NetworkIsolated) ToNetworkIsolatedOutputWithContext(ctx context.Context) NetworkIsolatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkIsolatedOutput)
}

// NetworkIsolatedArrayInput is an input type that accepts NetworkIsolatedArray and NetworkIsolatedArrayOutput values.
// You can construct a concrete instance of `NetworkIsolatedArrayInput` via:
//
//	NetworkIsolatedArray{ NetworkIsolatedArgs{...} }
type NetworkIsolatedArrayInput interface {
	pulumi.Input

	ToNetworkIsolatedArrayOutput() NetworkIsolatedArrayOutput
	ToNetworkIsolatedArrayOutputWithContext(context.Context) NetworkIsolatedArrayOutput
}

type NetworkIsolatedArray []NetworkIsolatedInput

func (NetworkIsolatedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkIsolated)(nil)).Elem()
}

func (i NetworkIsolatedArray) ToNetworkIsolatedArrayOutput() NetworkIsolatedArrayOutput {
	return i.ToNetworkIsolatedArrayOutputWithContext(context.Background())
}

func (i NetworkIsolatedArray) ToNetworkIsolatedArrayOutputWithContext(ctx context.Context) NetworkIsolatedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkIsolatedArrayOutput)
}

// NetworkIsolatedMapInput is an input type that accepts NetworkIsolatedMap and NetworkIsolatedMapOutput values.
// You can construct a concrete instance of `NetworkIsolatedMapInput` via:
//
//	NetworkIsolatedMap{ "key": NetworkIsolatedArgs{...} }
type NetworkIsolatedMapInput interface {
	pulumi.Input

	ToNetworkIsolatedMapOutput() NetworkIsolatedMapOutput
	ToNetworkIsolatedMapOutputWithContext(context.Context) NetworkIsolatedMapOutput
}

type NetworkIsolatedMap map[string]NetworkIsolatedInput

func (NetworkIsolatedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkIsolated)(nil)).Elem()
}

func (i NetworkIsolatedMap) ToNetworkIsolatedMapOutput() NetworkIsolatedMapOutput {
	return i.ToNetworkIsolatedMapOutputWithContext(context.Background())
}

func (i NetworkIsolatedMap) ToNetworkIsolatedMapOutputWithContext(ctx context.Context) NetworkIsolatedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkIsolatedMapOutput)
}

type NetworkIsolatedOutput struct{ *pulumi.OutputState }

func (NetworkIsolatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkIsolated)(nil)).Elem()
}

func (o NetworkIsolatedOutput) ToNetworkIsolatedOutput() NetworkIsolatedOutput {
	return o
}

func (o NetworkIsolatedOutput) ToNetworkIsolatedOutputWithContext(ctx context.Context) NetworkIsolatedOutput {
	return o
}

// Optional description for the network
func (o NetworkIsolatedOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A range of IPs to issue to virtual machines that don't have a static IP
func (o NetworkIsolatedOutput) DhcpPools() NetworkIsolatedDhcpPoolArrayOutput {
	return o.ApplyT(func(v *NetworkIsolated) NetworkIsolatedDhcpPoolArrayOutput { return v.DhcpPools }).(NetworkIsolatedDhcpPoolArrayOutput)
}

// First DNS server to use
func (o NetworkIsolatedOutput) Dns1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Dns1 }).(pulumi.StringPtrOutput)
}

// Second DNS server to use
func (o NetworkIsolatedOutput) Dns2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Dns2 }).(pulumi.StringPtrOutput)
}

// A FQDN for the virtual machines on this network
func (o NetworkIsolatedOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.DnsSuffix }).(pulumi.StringPtrOutput)
}

// The gateway for this network
func (o NetworkIsolatedOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// Network Hyper Reference
func (o NetworkIsolatedOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Key value map of metadata to assign to this network. Key and value can be any string
//
// Deprecated: Use metadata_entry instead
func (o NetworkIsolatedOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

// Metadata entries for the given Network
func (o NetworkIsolatedOutput) MetadataEntries() NetworkIsolatedMetadataEntryArrayOutput {
	return o.ApplyT(func(v *NetworkIsolated) NetworkIsolatedMetadataEntryArrayOutput { return v.MetadataEntries }).(NetworkIsolatedMetadataEntryArrayOutput)
}

// A unique name for this network
func (o NetworkIsolatedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The netmask for the new network
func (o NetworkIsolatedOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Netmask }).(pulumi.StringPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o NetworkIsolatedOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Defines if this network is shared between multiple VDCs in the Org
func (o NetworkIsolatedOutput) Shared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.BoolPtrOutput { return v.Shared }).(pulumi.BoolPtrOutput)
}

// A range of IPs permitted to be used as static IPs for virtual machines
func (o NetworkIsolatedOutput) StaticIpPools() NetworkIsolatedStaticIpPoolArrayOutput {
	return o.ApplyT(func(v *NetworkIsolated) NetworkIsolatedStaticIpPoolArrayOutput { return v.StaticIpPools }).(NetworkIsolatedStaticIpPoolArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o NetworkIsolatedOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkIsolated) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type NetworkIsolatedArrayOutput struct{ *pulumi.OutputState }

func (NetworkIsolatedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkIsolated)(nil)).Elem()
}

func (o NetworkIsolatedArrayOutput) ToNetworkIsolatedArrayOutput() NetworkIsolatedArrayOutput {
	return o
}

func (o NetworkIsolatedArrayOutput) ToNetworkIsolatedArrayOutputWithContext(ctx context.Context) NetworkIsolatedArrayOutput {
	return o
}

func (o NetworkIsolatedArrayOutput) Index(i pulumi.IntInput) NetworkIsolatedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkIsolated {
		return vs[0].([]*NetworkIsolated)[vs[1].(int)]
	}).(NetworkIsolatedOutput)
}

type NetworkIsolatedMapOutput struct{ *pulumi.OutputState }

func (NetworkIsolatedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkIsolated)(nil)).Elem()
}

func (o NetworkIsolatedMapOutput) ToNetworkIsolatedMapOutput() NetworkIsolatedMapOutput {
	return o
}

func (o NetworkIsolatedMapOutput) ToNetworkIsolatedMapOutputWithContext(ctx context.Context) NetworkIsolatedMapOutput {
	return o
}

func (o NetworkIsolatedMapOutput) MapIndex(k pulumi.StringInput) NetworkIsolatedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkIsolated {
		return vs[0].(map[string]*NetworkIsolated)[vs[1].(string)]
	}).(NetworkIsolatedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkIsolatedInput)(nil)).Elem(), &NetworkIsolated{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkIsolatedArrayInput)(nil)).Elem(), NetworkIsolatedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkIsolatedMapInput)(nil)).Elem(), NetworkIsolatedMap{})
	pulumi.RegisterOutputType(NetworkIsolatedOutput{})
	pulumi.RegisterOutputType(NetworkIsolatedArrayOutput{})
	pulumi.RegisterOutputType(NetworkIsolatedMapOutput{})
}
