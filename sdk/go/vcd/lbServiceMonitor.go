// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LbServiceMonitor struct {
	pulumi.CustomResourceState

	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected pulumi.StringPtrOutput `pulumi:"expected"`
	// Advanced monitor parameters as key=value pairs
	Extension pulumi.MapOutput `pulumi:"extension"`
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval pulumi.IntPtrOutput `pulumi:"interval"`
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
	// 3)
	MaxRetries pulumi.IntPtrOutput `pulumi:"maxRetries"`
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// Unique LB Service Monitor name
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// String to be matched in the response content
	Receive pulumi.StringPtrOutput `pulumi:"receive"`
	// Data to be sent
	Send pulumi.StringPtrOutput `pulumi:"send"`
	// Maximum time in seconds within which a response from the server must be received (defaults to 15)
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type pulumi.StringOutput `pulumi:"type"`
	// URL to be used in the server status request
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewLbServiceMonitor registers a new resource with the given unique name, arguments, and options.
func NewLbServiceMonitor(ctx *pulumi.Context,
	name string, args *LbServiceMonitorArgs, opts ...pulumi.ResourceOption) (*LbServiceMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource LbServiceMonitor
	err := ctx.RegisterResource("vcd:index/lbServiceMonitor:LbServiceMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbServiceMonitor gets an existing LbServiceMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbServiceMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbServiceMonitorState, opts ...pulumi.ResourceOption) (*LbServiceMonitor, error) {
	var resource LbServiceMonitor
	err := ctx.ReadResource("vcd:index/lbServiceMonitor:LbServiceMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbServiceMonitor resources.
type lbServiceMonitorState struct {
	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway *string `pulumi:"edgeGateway"`
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected *string `pulumi:"expected"`
	// Advanced monitor parameters as key=value pairs
	Extension map[string]interface{} `pulumi:"extension"`
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval *int `pulumi:"interval"`
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
	// 3)
	MaxRetries *int `pulumi:"maxRetries"`
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method *string `pulumi:"method"`
	// Unique LB Service Monitor name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// String to be matched in the response content
	Receive *string `pulumi:"receive"`
	// Data to be sent
	Send *string `pulumi:"send"`
	// Maximum time in seconds within which a response from the server must be received (defaults to 15)
	Timeout *int `pulumi:"timeout"`
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type *string `pulumi:"type"`
	// URL to be used in the server status request
	Url *string `pulumi:"url"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type LbServiceMonitorState struct {
	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway pulumi.StringPtrInput
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected pulumi.StringPtrInput
	// Advanced monitor parameters as key=value pairs
	Extension pulumi.MapInput
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval pulumi.IntPtrInput
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
	// 3)
	MaxRetries pulumi.IntPtrInput
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method pulumi.StringPtrInput
	// Unique LB Service Monitor name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// String to be matched in the response content
	Receive pulumi.StringPtrInput
	// Data to be sent
	Send pulumi.StringPtrInput
	// Maximum time in seconds within which a response from the server must be received (defaults to 15)
	Timeout pulumi.IntPtrInput
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type pulumi.StringPtrInput
	// URL to be used in the server status request
	Url pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbServiceMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbServiceMonitorState)(nil)).Elem()
}

type lbServiceMonitorArgs struct {
	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway string `pulumi:"edgeGateway"`
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected *string `pulumi:"expected"`
	// Advanced monitor parameters as key=value pairs
	Extension map[string]interface{} `pulumi:"extension"`
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval *int `pulumi:"interval"`
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
	// 3)
	MaxRetries *int `pulumi:"maxRetries"`
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method *string `pulumi:"method"`
	// Unique LB Service Monitor name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// String to be matched in the response content
	Receive *string `pulumi:"receive"`
	// Data to be sent
	Send *string `pulumi:"send"`
	// Maximum time in seconds within which a response from the server must be received (defaults to 15)
	Timeout *int `pulumi:"timeout"`
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type string `pulumi:"type"`
	// URL to be used in the server status request
	Url *string `pulumi:"url"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a LbServiceMonitor resource.
type LbServiceMonitorArgs struct {
	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway pulumi.StringInput
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected pulumi.StringPtrInput
	// Advanced monitor parameters as key=value pairs
	Extension pulumi.MapInput
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval pulumi.IntPtrInput
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
	// 3)
	MaxRetries pulumi.IntPtrInput
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method pulumi.StringPtrInput
	// Unique LB Service Monitor name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// String to be matched in the response content
	Receive pulumi.StringPtrInput
	// Data to be sent
	Send pulumi.StringPtrInput
	// Maximum time in seconds within which a response from the server must be received (defaults to 15)
	Timeout pulumi.IntPtrInput
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type pulumi.StringInput
	// URL to be used in the server status request
	Url pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbServiceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbServiceMonitorArgs)(nil)).Elem()
}

type LbServiceMonitorInput interface {
	pulumi.Input

	ToLbServiceMonitorOutput() LbServiceMonitorOutput
	ToLbServiceMonitorOutputWithContext(ctx context.Context) LbServiceMonitorOutput
}

func (*LbServiceMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**LbServiceMonitor)(nil)).Elem()
}

func (i *LbServiceMonitor) ToLbServiceMonitorOutput() LbServiceMonitorOutput {
	return i.ToLbServiceMonitorOutputWithContext(context.Background())
}

func (i *LbServiceMonitor) ToLbServiceMonitorOutputWithContext(ctx context.Context) LbServiceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbServiceMonitorOutput)
}

// LbServiceMonitorArrayInput is an input type that accepts LbServiceMonitorArray and LbServiceMonitorArrayOutput values.
// You can construct a concrete instance of `LbServiceMonitorArrayInput` via:
//
//	LbServiceMonitorArray{ LbServiceMonitorArgs{...} }
type LbServiceMonitorArrayInput interface {
	pulumi.Input

	ToLbServiceMonitorArrayOutput() LbServiceMonitorArrayOutput
	ToLbServiceMonitorArrayOutputWithContext(context.Context) LbServiceMonitorArrayOutput
}

type LbServiceMonitorArray []LbServiceMonitorInput

func (LbServiceMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbServiceMonitor)(nil)).Elem()
}

func (i LbServiceMonitorArray) ToLbServiceMonitorArrayOutput() LbServiceMonitorArrayOutput {
	return i.ToLbServiceMonitorArrayOutputWithContext(context.Background())
}

func (i LbServiceMonitorArray) ToLbServiceMonitorArrayOutputWithContext(ctx context.Context) LbServiceMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbServiceMonitorArrayOutput)
}

// LbServiceMonitorMapInput is an input type that accepts LbServiceMonitorMap and LbServiceMonitorMapOutput values.
// You can construct a concrete instance of `LbServiceMonitorMapInput` via:
//
//	LbServiceMonitorMap{ "key": LbServiceMonitorArgs{...} }
type LbServiceMonitorMapInput interface {
	pulumi.Input

	ToLbServiceMonitorMapOutput() LbServiceMonitorMapOutput
	ToLbServiceMonitorMapOutputWithContext(context.Context) LbServiceMonitorMapOutput
}

type LbServiceMonitorMap map[string]LbServiceMonitorInput

func (LbServiceMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbServiceMonitor)(nil)).Elem()
}

func (i LbServiceMonitorMap) ToLbServiceMonitorMapOutput() LbServiceMonitorMapOutput {
	return i.ToLbServiceMonitorMapOutputWithContext(context.Background())
}

func (i LbServiceMonitorMap) ToLbServiceMonitorMapOutputWithContext(ctx context.Context) LbServiceMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbServiceMonitorMapOutput)
}

type LbServiceMonitorOutput struct{ *pulumi.OutputState }

func (LbServiceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbServiceMonitor)(nil)).Elem()
}

func (o LbServiceMonitorOutput) ToLbServiceMonitorOutput() LbServiceMonitorOutput {
	return o
}

func (o LbServiceMonitorOutput) ToLbServiceMonitorOutputWithContext(ctx context.Context) LbServiceMonitorOutput {
	return o
}

// Edge gateway name in which the LB Service Monitor is located
func (o LbServiceMonitorOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
func (o LbServiceMonitorOutput) Expected() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Expected }).(pulumi.StringPtrOutput)
}

// Advanced monitor parameters as key=value pairs
func (o LbServiceMonitorOutput) Extension() pulumi.MapOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.MapOutput { return v.Extension }).(pulumi.MapOutput)
}

// Interval in seconds at which a server is to be monitored (defaults to 10)
func (o LbServiceMonitorOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.IntPtrOutput { return v.Interval }).(pulumi.IntPtrOutput)
}

// Number of times the specified monitoring Method must fail sequentially before the server is declared down (defaults to
// 3)
func (o LbServiceMonitorOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.IntPtrOutput { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
func (o LbServiceMonitorOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

// Unique LB Service Monitor name
func (o LbServiceMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o LbServiceMonitorOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// String to be matched in the response content
func (o LbServiceMonitorOutput) Receive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Receive }).(pulumi.StringPtrOutput)
}

// Data to be sent
func (o LbServiceMonitorOutput) Send() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Send }).(pulumi.StringPtrOutput)
}

// Maximum time in seconds within which a response from the server must be received (defaults to 15)
func (o LbServiceMonitorOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
func (o LbServiceMonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// URL to be used in the server status request
func (o LbServiceMonitorOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o LbServiceMonitorOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServiceMonitor) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type LbServiceMonitorArrayOutput struct{ *pulumi.OutputState }

func (LbServiceMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbServiceMonitor)(nil)).Elem()
}

func (o LbServiceMonitorArrayOutput) ToLbServiceMonitorArrayOutput() LbServiceMonitorArrayOutput {
	return o
}

func (o LbServiceMonitorArrayOutput) ToLbServiceMonitorArrayOutputWithContext(ctx context.Context) LbServiceMonitorArrayOutput {
	return o
}

func (o LbServiceMonitorArrayOutput) Index(i pulumi.IntInput) LbServiceMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbServiceMonitor {
		return vs[0].([]*LbServiceMonitor)[vs[1].(int)]
	}).(LbServiceMonitorOutput)
}

type LbServiceMonitorMapOutput struct{ *pulumi.OutputState }

func (LbServiceMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbServiceMonitor)(nil)).Elem()
}

func (o LbServiceMonitorMapOutput) ToLbServiceMonitorMapOutput() LbServiceMonitorMapOutput {
	return o
}

func (o LbServiceMonitorMapOutput) ToLbServiceMonitorMapOutputWithContext(ctx context.Context) LbServiceMonitorMapOutput {
	return o
}

func (o LbServiceMonitorMapOutput) MapIndex(k pulumi.StringInput) LbServiceMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbServiceMonitor {
		return vs[0].(map[string]*LbServiceMonitor)[vs[1].(string)]
	}).(LbServiceMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbServiceMonitorInput)(nil)).Elem(), &LbServiceMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbServiceMonitorArrayInput)(nil)).Elem(), LbServiceMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbServiceMonitorMapInput)(nil)).Elem(), LbServiceMonitorMap{})
	pulumi.RegisterOutputType(LbServiceMonitorOutput{})
	pulumi.RegisterOutputType(LbServiceMonitorArrayOutput{})
	pulumi.RegisterOutputType(LbServiceMonitorMapOutput{})
}
