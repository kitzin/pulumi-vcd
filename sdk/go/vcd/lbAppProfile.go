// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LbAppProfile struct {
	pulumi.CustomResourceState

	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode pulumi.StringPtrOutput `pulumi:"cookieMode"`
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie
	// when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	CookieName pulumi.StringPtrOutput `pulumi:"cookieName"`
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSsl pulumi.BoolPtrOutput `pulumi:"enablePoolSideSsl"`
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the
	// destination address.
	EnableSslPassthrough pulumi.BoolPtrOutput `pulumi:"enableSslPassthrough"`
	// Length of time in seconds that persistence stays in effect
	Expiration pulumi.IntPtrOutput `pulumi:"expiration"`
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and
	// 'https'
	HttpRedirectUrl pulumi.StringPtrOutput `pulumi:"httpRedirectUrl"`
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server
	// through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHttpHeader pulumi.BoolPtrOutput `pulumi:"insertXForwardedHttpHeader"`
	// Unique LB Application Profile name
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism pulumi.StringPtrOutput `pulumi:"persistenceMechanism"`
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type pulumi.StringOutput `pulumi:"type"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewLbAppProfile registers a new resource with the given unique name, arguments, and options.
func NewLbAppProfile(ctx *pulumi.Context,
	name string, args *LbAppProfileArgs, opts ...pulumi.ResourceOption) (*LbAppProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource LbAppProfile
	err := ctx.RegisterResource("vcd:index/lbAppProfile:LbAppProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbAppProfile gets an existing LbAppProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbAppProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbAppProfileState, opts ...pulumi.ResourceOption) (*LbAppProfile, error) {
	var resource LbAppProfile
	err := ctx.ReadResource("vcd:index/lbAppProfile:LbAppProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbAppProfile resources.
type lbAppProfileState struct {
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode *string `pulumi:"cookieMode"`
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie
	// when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	CookieName *string `pulumi:"cookieName"`
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway *string `pulumi:"edgeGateway"`
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSsl *bool `pulumi:"enablePoolSideSsl"`
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the
	// destination address.
	EnableSslPassthrough *bool `pulumi:"enableSslPassthrough"`
	// Length of time in seconds that persistence stays in effect
	Expiration *int `pulumi:"expiration"`
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and
	// 'https'
	HttpRedirectUrl *string `pulumi:"httpRedirectUrl"`
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server
	// through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHttpHeader *bool `pulumi:"insertXForwardedHttpHeader"`
	// Unique LB Application Profile name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism *string `pulumi:"persistenceMechanism"`
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type *string `pulumi:"type"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type LbAppProfileState struct {
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode pulumi.StringPtrInput
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie
	// when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	CookieName pulumi.StringPtrInput
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway pulumi.StringPtrInput
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSsl pulumi.BoolPtrInput
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the
	// destination address.
	EnableSslPassthrough pulumi.BoolPtrInput
	// Length of time in seconds that persistence stays in effect
	Expiration pulumi.IntPtrInput
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and
	// 'https'
	HttpRedirectUrl pulumi.StringPtrInput
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server
	// through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHttpHeader pulumi.BoolPtrInput
	// Unique LB Application Profile name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism pulumi.StringPtrInput
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbAppProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbAppProfileState)(nil)).Elem()
}

type lbAppProfileArgs struct {
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode *string `pulumi:"cookieMode"`
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie
	// when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	CookieName *string `pulumi:"cookieName"`
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway string `pulumi:"edgeGateway"`
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSsl *bool `pulumi:"enablePoolSideSsl"`
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the
	// destination address.
	EnableSslPassthrough *bool `pulumi:"enableSslPassthrough"`
	// Length of time in seconds that persistence stays in effect
	Expiration *int `pulumi:"expiration"`
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and
	// 'https'
	HttpRedirectUrl *string `pulumi:"httpRedirectUrl"`
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server
	// through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHttpHeader *bool `pulumi:"insertXForwardedHttpHeader"`
	// Unique LB Application Profile name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism *string `pulumi:"persistenceMechanism"`
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type string `pulumi:"type"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a LbAppProfile resource.
type LbAppProfileArgs struct {
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode pulumi.StringPtrInput
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie
	// when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	CookieName pulumi.StringPtrInput
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway pulumi.StringInput
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSsl pulumi.BoolPtrInput
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the
	// destination address.
	EnableSslPassthrough pulumi.BoolPtrInput
	// Length of time in seconds that persistence stays in effect
	Expiration pulumi.IntPtrInput
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and
	// 'https'
	HttpRedirectUrl pulumi.StringPtrInput
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server
	// through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHttpHeader pulumi.BoolPtrInput
	// Unique LB Application Profile name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism pulumi.StringPtrInput
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbAppProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbAppProfileArgs)(nil)).Elem()
}

type LbAppProfileInput interface {
	pulumi.Input

	ToLbAppProfileOutput() LbAppProfileOutput
	ToLbAppProfileOutputWithContext(ctx context.Context) LbAppProfileOutput
}

func (*LbAppProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**LbAppProfile)(nil)).Elem()
}

func (i *LbAppProfile) ToLbAppProfileOutput() LbAppProfileOutput {
	return i.ToLbAppProfileOutputWithContext(context.Background())
}

func (i *LbAppProfile) ToLbAppProfileOutputWithContext(ctx context.Context) LbAppProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAppProfileOutput)
}

// LbAppProfileArrayInput is an input type that accepts LbAppProfileArray and LbAppProfileArrayOutput values.
// You can construct a concrete instance of `LbAppProfileArrayInput` via:
//
//	LbAppProfileArray{ LbAppProfileArgs{...} }
type LbAppProfileArrayInput interface {
	pulumi.Input

	ToLbAppProfileArrayOutput() LbAppProfileArrayOutput
	ToLbAppProfileArrayOutputWithContext(context.Context) LbAppProfileArrayOutput
}

type LbAppProfileArray []LbAppProfileInput

func (LbAppProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbAppProfile)(nil)).Elem()
}

func (i LbAppProfileArray) ToLbAppProfileArrayOutput() LbAppProfileArrayOutput {
	return i.ToLbAppProfileArrayOutputWithContext(context.Background())
}

func (i LbAppProfileArray) ToLbAppProfileArrayOutputWithContext(ctx context.Context) LbAppProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAppProfileArrayOutput)
}

// LbAppProfileMapInput is an input type that accepts LbAppProfileMap and LbAppProfileMapOutput values.
// You can construct a concrete instance of `LbAppProfileMapInput` via:
//
//	LbAppProfileMap{ "key": LbAppProfileArgs{...} }
type LbAppProfileMapInput interface {
	pulumi.Input

	ToLbAppProfileMapOutput() LbAppProfileMapOutput
	ToLbAppProfileMapOutputWithContext(context.Context) LbAppProfileMapOutput
}

type LbAppProfileMap map[string]LbAppProfileInput

func (LbAppProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbAppProfile)(nil)).Elem()
}

func (i LbAppProfileMap) ToLbAppProfileMapOutput() LbAppProfileMapOutput {
	return i.ToLbAppProfileMapOutputWithContext(context.Background())
}

func (i LbAppProfileMap) ToLbAppProfileMapOutputWithContext(ctx context.Context) LbAppProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbAppProfileMapOutput)
}

type LbAppProfileOutput struct{ *pulumi.OutputState }

func (LbAppProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbAppProfile)(nil)).Elem()
}

func (o LbAppProfileOutput) ToLbAppProfileOutput() LbAppProfileOutput {
	return o
}

func (o LbAppProfileOutput) ToLbAppProfileOutputWithContext(ctx context.Context) LbAppProfileOutput {
	return o
}

// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
func (o LbAppProfileOutput) CookieMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringPtrOutput { return v.CookieMode }).(pulumi.StringPtrOutput)
}

// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie
// when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for
// persistence_mechanism 'cookie'
func (o LbAppProfileOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringPtrOutput { return v.CookieName }).(pulumi.StringPtrOutput)
}

// Edge gateway name in which the LB Application Profile is located
func (o LbAppProfileOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
func (o LbAppProfileOutput) EnablePoolSideSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.BoolPtrOutput { return v.EnablePoolSideSsl }).(pulumi.BoolPtrOutput)
}

// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the
// destination address.
func (o LbAppProfileOutput) EnableSslPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.BoolPtrOutput { return v.EnableSslPassthrough }).(pulumi.BoolPtrOutput)
}

// Length of time in seconds that persistence stays in effect
func (o LbAppProfileOutput) Expiration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.IntPtrOutput { return v.Expiration }).(pulumi.IntPtrOutput)
}

// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and
// 'https'
func (o LbAppProfileOutput) HttpRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringPtrOutput { return v.HttpRedirectUrl }).(pulumi.StringPtrOutput)
}

// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server
// through the load balancer. Only applies for types HTTP and HTTPS
func (o LbAppProfileOutput) InsertXForwardedHttpHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.BoolPtrOutput { return v.InsertXForwardedHttpHeader }).(pulumi.BoolPtrOutput)
}

// Unique LB Application Profile name
func (o LbAppProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o LbAppProfileOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
func (o LbAppProfileOutput) PersistenceMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringPtrOutput { return v.PersistenceMechanism }).(pulumi.StringPtrOutput)
}

// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
func (o LbAppProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o LbAppProfileOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbAppProfile) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type LbAppProfileArrayOutput struct{ *pulumi.OutputState }

func (LbAppProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbAppProfile)(nil)).Elem()
}

func (o LbAppProfileArrayOutput) ToLbAppProfileArrayOutput() LbAppProfileArrayOutput {
	return o
}

func (o LbAppProfileArrayOutput) ToLbAppProfileArrayOutputWithContext(ctx context.Context) LbAppProfileArrayOutput {
	return o
}

func (o LbAppProfileArrayOutput) Index(i pulumi.IntInput) LbAppProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbAppProfile {
		return vs[0].([]*LbAppProfile)[vs[1].(int)]
	}).(LbAppProfileOutput)
}

type LbAppProfileMapOutput struct{ *pulumi.OutputState }

func (LbAppProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbAppProfile)(nil)).Elem()
}

func (o LbAppProfileMapOutput) ToLbAppProfileMapOutput() LbAppProfileMapOutput {
	return o
}

func (o LbAppProfileMapOutput) ToLbAppProfileMapOutputWithContext(ctx context.Context) LbAppProfileMapOutput {
	return o
}

func (o LbAppProfileMapOutput) MapIndex(k pulumi.StringInput) LbAppProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbAppProfile {
		return vs[0].(map[string]*LbAppProfile)[vs[1].(string)]
	}).(LbAppProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbAppProfileInput)(nil)).Elem(), &LbAppProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAppProfileArrayInput)(nil)).Elem(), LbAppProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbAppProfileMapInput)(nil)).Elem(), LbAppProfileMap{})
	pulumi.RegisterOutputType(LbAppProfileOutput{})
	pulumi.RegisterOutputType(LbAppProfileArrayOutput{})
	pulumi.RegisterOutputType(LbAppProfileMapOutput{})
}
