// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LibraryCertificate struct {
	pulumi.CustomResourceState

	// Alias of certificate
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Certificate content
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Certificate description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Certificate private key
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Certificate private pass phrase
	PrivateKeyPassphrase pulumi.StringPtrOutput `pulumi:"privateKeyPassphrase"`
}

// NewLibraryCertificate registers a new resource with the given unique name, arguments, and options.
func NewLibraryCertificate(ctx *pulumi.Context,
	name string, args *LibraryCertificateArgs, opts ...pulumi.ResourceOption) (*LibraryCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	var resource LibraryCertificate
	err := ctx.RegisterResource("vcd:index/libraryCertificate:LibraryCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLibraryCertificate gets an existing LibraryCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLibraryCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LibraryCertificateState, opts ...pulumi.ResourceOption) (*LibraryCertificate, error) {
	var resource LibraryCertificate
	err := ctx.ReadResource("vcd:index/libraryCertificate:LibraryCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LibraryCertificate resources.
type libraryCertificateState struct {
	// Alias of certificate
	Alias *string `pulumi:"alias"`
	// Certificate content
	Certificate *string `pulumi:"certificate"`
	// Certificate description
	Description *string `pulumi:"description"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Certificate private key
	PrivateKey *string `pulumi:"privateKey"`
	// Certificate private pass phrase
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
}

type LibraryCertificateState struct {
	// Alias of certificate
	Alias pulumi.StringPtrInput
	// Certificate content
	Certificate pulumi.StringPtrInput
	// Certificate description
	Description pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Certificate private key
	PrivateKey pulumi.StringPtrInput
	// Certificate private pass phrase
	PrivateKeyPassphrase pulumi.StringPtrInput
}

func (LibraryCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*libraryCertificateState)(nil)).Elem()
}

type libraryCertificateArgs struct {
	// Alias of certificate
	Alias string `pulumi:"alias"`
	// Certificate content
	Certificate string `pulumi:"certificate"`
	// Certificate description
	Description *string `pulumi:"description"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// Certificate private key
	PrivateKey *string `pulumi:"privateKey"`
	// Certificate private pass phrase
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
}

// The set of arguments for constructing a LibraryCertificate resource.
type LibraryCertificateArgs struct {
	// Alias of certificate
	Alias pulumi.StringInput
	// Certificate content
	Certificate pulumi.StringInput
	// Certificate description
	Description pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// Certificate private key
	PrivateKey pulumi.StringPtrInput
	// Certificate private pass phrase
	PrivateKeyPassphrase pulumi.StringPtrInput
}

func (LibraryCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*libraryCertificateArgs)(nil)).Elem()
}

type LibraryCertificateInput interface {
	pulumi.Input

	ToLibraryCertificateOutput() LibraryCertificateOutput
	ToLibraryCertificateOutputWithContext(ctx context.Context) LibraryCertificateOutput
}

func (*LibraryCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**LibraryCertificate)(nil)).Elem()
}

func (i *LibraryCertificate) ToLibraryCertificateOutput() LibraryCertificateOutput {
	return i.ToLibraryCertificateOutputWithContext(context.Background())
}

func (i *LibraryCertificate) ToLibraryCertificateOutputWithContext(ctx context.Context) LibraryCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryCertificateOutput)
}

// LibraryCertificateArrayInput is an input type that accepts LibraryCertificateArray and LibraryCertificateArrayOutput values.
// You can construct a concrete instance of `LibraryCertificateArrayInput` via:
//
//	LibraryCertificateArray{ LibraryCertificateArgs{...} }
type LibraryCertificateArrayInput interface {
	pulumi.Input

	ToLibraryCertificateArrayOutput() LibraryCertificateArrayOutput
	ToLibraryCertificateArrayOutputWithContext(context.Context) LibraryCertificateArrayOutput
}

type LibraryCertificateArray []LibraryCertificateInput

func (LibraryCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LibraryCertificate)(nil)).Elem()
}

func (i LibraryCertificateArray) ToLibraryCertificateArrayOutput() LibraryCertificateArrayOutput {
	return i.ToLibraryCertificateArrayOutputWithContext(context.Background())
}

func (i LibraryCertificateArray) ToLibraryCertificateArrayOutputWithContext(ctx context.Context) LibraryCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryCertificateArrayOutput)
}

// LibraryCertificateMapInput is an input type that accepts LibraryCertificateMap and LibraryCertificateMapOutput values.
// You can construct a concrete instance of `LibraryCertificateMapInput` via:
//
//	LibraryCertificateMap{ "key": LibraryCertificateArgs{...} }
type LibraryCertificateMapInput interface {
	pulumi.Input

	ToLibraryCertificateMapOutput() LibraryCertificateMapOutput
	ToLibraryCertificateMapOutputWithContext(context.Context) LibraryCertificateMapOutput
}

type LibraryCertificateMap map[string]LibraryCertificateInput

func (LibraryCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LibraryCertificate)(nil)).Elem()
}

func (i LibraryCertificateMap) ToLibraryCertificateMapOutput() LibraryCertificateMapOutput {
	return i.ToLibraryCertificateMapOutputWithContext(context.Background())
}

func (i LibraryCertificateMap) ToLibraryCertificateMapOutputWithContext(ctx context.Context) LibraryCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryCertificateMapOutput)
}

type LibraryCertificateOutput struct{ *pulumi.OutputState }

func (LibraryCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LibraryCertificate)(nil)).Elem()
}

func (o LibraryCertificateOutput) ToLibraryCertificateOutput() LibraryCertificateOutput {
	return o
}

func (o LibraryCertificateOutput) ToLibraryCertificateOutputWithContext(ctx context.Context) LibraryCertificateOutput {
	return o
}

// Alias of certificate
func (o LibraryCertificateOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *LibraryCertificate) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Certificate content
func (o LibraryCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *LibraryCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Certificate description
func (o LibraryCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LibraryCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o LibraryCertificateOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LibraryCertificate) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Certificate private key
func (o LibraryCertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LibraryCertificate) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Certificate private pass phrase
func (o LibraryCertificateOutput) PrivateKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LibraryCertificate) pulumi.StringPtrOutput { return v.PrivateKeyPassphrase }).(pulumi.StringPtrOutput)
}

type LibraryCertificateArrayOutput struct{ *pulumi.OutputState }

func (LibraryCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LibraryCertificate)(nil)).Elem()
}

func (o LibraryCertificateArrayOutput) ToLibraryCertificateArrayOutput() LibraryCertificateArrayOutput {
	return o
}

func (o LibraryCertificateArrayOutput) ToLibraryCertificateArrayOutputWithContext(ctx context.Context) LibraryCertificateArrayOutput {
	return o
}

func (o LibraryCertificateArrayOutput) Index(i pulumi.IntInput) LibraryCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LibraryCertificate {
		return vs[0].([]*LibraryCertificate)[vs[1].(int)]
	}).(LibraryCertificateOutput)
}

type LibraryCertificateMapOutput struct{ *pulumi.OutputState }

func (LibraryCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LibraryCertificate)(nil)).Elem()
}

func (o LibraryCertificateMapOutput) ToLibraryCertificateMapOutput() LibraryCertificateMapOutput {
	return o
}

func (o LibraryCertificateMapOutput) ToLibraryCertificateMapOutputWithContext(ctx context.Context) LibraryCertificateMapOutput {
	return o
}

func (o LibraryCertificateMapOutput) MapIndex(k pulumi.StringInput) LibraryCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LibraryCertificate {
		return vs[0].(map[string]*LibraryCertificate)[vs[1].(string)]
	}).(LibraryCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryCertificateInput)(nil)).Elem(), &LibraryCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryCertificateArrayInput)(nil)).Elem(), LibraryCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryCertificateMapInput)(nil)).Elem(), LibraryCertificateMap{})
	pulumi.RegisterOutputType(LibraryCertificateOutput{})
	pulumi.RegisterOutputType(LibraryCertificateArrayOutput{})
	pulumi.RegisterOutputType(LibraryCertificateMapOutput{})
}
