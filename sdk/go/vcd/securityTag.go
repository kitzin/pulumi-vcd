// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecurityTag struct {
	pulumi.CustomResourceState

	// Security tag name to be created
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// List of VM IDs that the security tags is going to be tied to
	VmIds pulumi.StringArrayOutput `pulumi:"vmIds"`
}

// NewSecurityTag registers a new resource with the given unique name, arguments, and options.
func NewSecurityTag(ctx *pulumi.Context,
	name string, args *SecurityTagArgs, opts ...pulumi.ResourceOption) (*SecurityTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VmIds == nil {
		return nil, errors.New("invalid value for required argument 'VmIds'")
	}
	var resource SecurityTag
	err := ctx.RegisterResource("vcd:index/securityTag:SecurityTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityTag gets an existing SecurityTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityTagState, opts ...pulumi.ResourceOption) (*SecurityTag, error) {
	var resource SecurityTag
	err := ctx.ReadResource("vcd:index/securityTag:SecurityTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityTag resources.
type securityTagState struct {
	// Security tag name to be created
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// List of VM IDs that the security tags is going to be tied to
	VmIds []string `pulumi:"vmIds"`
}

type SecurityTagState struct {
	// Security tag name to be created
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// List of VM IDs that the security tags is going to be tied to
	VmIds pulumi.StringArrayInput
}

func (SecurityTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityTagState)(nil)).Elem()
}

type securityTagArgs struct {
	// Security tag name to be created
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org *string `pulumi:"org"`
	// List of VM IDs that the security tags is going to be tied to
	VmIds []string `pulumi:"vmIds"`
}

// The set of arguments for constructing a SecurityTag resource.
type SecurityTagArgs struct {
	// Security tag name to be created
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
	// different organizations
	Org pulumi.StringPtrInput
	// List of VM IDs that the security tags is going to be tied to
	VmIds pulumi.StringArrayInput
}

func (SecurityTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityTagArgs)(nil)).Elem()
}

type SecurityTagInput interface {
	pulumi.Input

	ToSecurityTagOutput() SecurityTagOutput
	ToSecurityTagOutputWithContext(ctx context.Context) SecurityTagOutput
}

func (*SecurityTag) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityTag)(nil)).Elem()
}

func (i *SecurityTag) ToSecurityTagOutput() SecurityTagOutput {
	return i.ToSecurityTagOutputWithContext(context.Background())
}

func (i *SecurityTag) ToSecurityTagOutputWithContext(ctx context.Context) SecurityTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityTagOutput)
}

// SecurityTagArrayInput is an input type that accepts SecurityTagArray and SecurityTagArrayOutput values.
// You can construct a concrete instance of `SecurityTagArrayInput` via:
//
//	SecurityTagArray{ SecurityTagArgs{...} }
type SecurityTagArrayInput interface {
	pulumi.Input

	ToSecurityTagArrayOutput() SecurityTagArrayOutput
	ToSecurityTagArrayOutputWithContext(context.Context) SecurityTagArrayOutput
}

type SecurityTagArray []SecurityTagInput

func (SecurityTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityTag)(nil)).Elem()
}

func (i SecurityTagArray) ToSecurityTagArrayOutput() SecurityTagArrayOutput {
	return i.ToSecurityTagArrayOutputWithContext(context.Background())
}

func (i SecurityTagArray) ToSecurityTagArrayOutputWithContext(ctx context.Context) SecurityTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityTagArrayOutput)
}

// SecurityTagMapInput is an input type that accepts SecurityTagMap and SecurityTagMapOutput values.
// You can construct a concrete instance of `SecurityTagMapInput` via:
//
//	SecurityTagMap{ "key": SecurityTagArgs{...} }
type SecurityTagMapInput interface {
	pulumi.Input

	ToSecurityTagMapOutput() SecurityTagMapOutput
	ToSecurityTagMapOutputWithContext(context.Context) SecurityTagMapOutput
}

type SecurityTagMap map[string]SecurityTagInput

func (SecurityTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityTag)(nil)).Elem()
}

func (i SecurityTagMap) ToSecurityTagMapOutput() SecurityTagMapOutput {
	return i.ToSecurityTagMapOutputWithContext(context.Background())
}

func (i SecurityTagMap) ToSecurityTagMapOutputWithContext(ctx context.Context) SecurityTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityTagMapOutput)
}

type SecurityTagOutput struct{ *pulumi.OutputState }

func (SecurityTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityTag)(nil)).Elem()
}

func (o SecurityTagOutput) ToSecurityTagOutput() SecurityTagOutput {
	return o
}

func (o SecurityTagOutput) ToSecurityTagOutputWithContext(ctx context.Context) SecurityTagOutput {
	return o
}

// Security tag name to be created
func (o SecurityTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
// different organizations
func (o SecurityTagOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityTag) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// List of VM IDs that the security tags is going to be tied to
func (o SecurityTagOutput) VmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityTag) pulumi.StringArrayOutput { return v.VmIds }).(pulumi.StringArrayOutput)
}

type SecurityTagArrayOutput struct{ *pulumi.OutputState }

func (SecurityTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityTag)(nil)).Elem()
}

func (o SecurityTagArrayOutput) ToSecurityTagArrayOutput() SecurityTagArrayOutput {
	return o
}

func (o SecurityTagArrayOutput) ToSecurityTagArrayOutputWithContext(ctx context.Context) SecurityTagArrayOutput {
	return o
}

func (o SecurityTagArrayOutput) Index(i pulumi.IntInput) SecurityTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityTag {
		return vs[0].([]*SecurityTag)[vs[1].(int)]
	}).(SecurityTagOutput)
}

type SecurityTagMapOutput struct{ *pulumi.OutputState }

func (SecurityTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityTag)(nil)).Elem()
}

func (o SecurityTagMapOutput) ToSecurityTagMapOutput() SecurityTagMapOutput {
	return o
}

func (o SecurityTagMapOutput) ToSecurityTagMapOutputWithContext(ctx context.Context) SecurityTagMapOutput {
	return o
}

func (o SecurityTagMapOutput) MapIndex(k pulumi.StringInput) SecurityTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityTag {
		return vs[0].(map[string]*SecurityTag)[vs[1].(string)]
	}).(SecurityTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityTagInput)(nil)).Elem(), &SecurityTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityTagArrayInput)(nil)).Elem(), SecurityTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityTagMapInput)(nil)).Elem(), SecurityTagMap{})
	pulumi.RegisterOutputType(SecurityTagOutput{})
	pulumi.RegisterOutputType(SecurityTagArrayOutput{})
	pulumi.RegisterOutputType(SecurityTagMapOutput{})
}
