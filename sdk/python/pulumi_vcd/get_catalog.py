# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCatalogResult',
    'AwaitableGetCatalogResult',
    'get_catalog',
    'get_catalog_output',
]

@pulumi.output_type
class GetCatalogResult:
    """
    A collection of values returned by getCatalog.
    """
    def __init__(__self__, cache_enabled=None, catalog_version=None, created=None, description=None, filter=None, href=None, id=None, is_local=None, is_published=None, is_shared=None, media_item_lists=None, metadata=None, metadata_entries=None, name=None, number_of_media=None, number_of_vapp_templates=None, org=None, owner_name=None, preserve_identity_information=None, publish_enabled=None, publish_subscription_type=None, publish_subscription_url=None, storage_profile_id=None, vapp_template_lists=None):
        if cache_enabled and not isinstance(cache_enabled, bool):
            raise TypeError("Expected argument 'cache_enabled' to be a bool")
        pulumi.set(__self__, "cache_enabled", cache_enabled)
        if catalog_version and not isinstance(catalog_version, int):
            raise TypeError("Expected argument 'catalog_version' to be a int")
        pulumi.set(__self__, "catalog_version", catalog_version)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_local and not isinstance(is_local, bool):
            raise TypeError("Expected argument 'is_local' to be a bool")
        pulumi.set(__self__, "is_local", is_local)
        if is_published and not isinstance(is_published, bool):
            raise TypeError("Expected argument 'is_published' to be a bool")
        pulumi.set(__self__, "is_published", is_published)
        if is_shared and not isinstance(is_shared, bool):
            raise TypeError("Expected argument 'is_shared' to be a bool")
        pulumi.set(__self__, "is_shared", is_shared)
        if media_item_lists and not isinstance(media_item_lists, list):
            raise TypeError("Expected argument 'media_item_lists' to be a list")
        pulumi.set(__self__, "media_item_lists", media_item_lists)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_media and not isinstance(number_of_media, int):
            raise TypeError("Expected argument 'number_of_media' to be a int")
        pulumi.set(__self__, "number_of_media", number_of_media)
        if number_of_vapp_templates and not isinstance(number_of_vapp_templates, int):
            raise TypeError("Expected argument 'number_of_vapp_templates' to be a int")
        pulumi.set(__self__, "number_of_vapp_templates", number_of_vapp_templates)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if preserve_identity_information and not isinstance(preserve_identity_information, bool):
            raise TypeError("Expected argument 'preserve_identity_information' to be a bool")
        pulumi.set(__self__, "preserve_identity_information", preserve_identity_information)
        if publish_enabled and not isinstance(publish_enabled, bool):
            raise TypeError("Expected argument 'publish_enabled' to be a bool")
        pulumi.set(__self__, "publish_enabled", publish_enabled)
        if publish_subscription_type and not isinstance(publish_subscription_type, str):
            raise TypeError("Expected argument 'publish_subscription_type' to be a str")
        pulumi.set(__self__, "publish_subscription_type", publish_subscription_type)
        if publish_subscription_url and not isinstance(publish_subscription_url, str):
            raise TypeError("Expected argument 'publish_subscription_url' to be a str")
        pulumi.set(__self__, "publish_subscription_url", publish_subscription_url)
        if storage_profile_id and not isinstance(storage_profile_id, str):
            raise TypeError("Expected argument 'storage_profile_id' to be a str")
        pulumi.set(__self__, "storage_profile_id", storage_profile_id)
        if vapp_template_lists and not isinstance(vapp_template_lists, list):
            raise TypeError("Expected argument 'vapp_template_lists' to be a list")
        pulumi.set(__self__, "vapp_template_lists", vapp_template_lists)

    @property
    @pulumi.getter(name="cacheEnabled")
    def cache_enabled(self) -> bool:
        return pulumi.get(self, "cache_enabled")

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> int:
        return pulumi.get(self, "catalog_version")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetCatalogFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> bool:
        return pulumi.get(self, "is_local")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> bool:
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> bool:
        return pulumi.get(self, "is_shared")

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> Sequence[str]:
        return pulumi.get(self, "media_item_lists")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetCatalogMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> int:
        return pulumi.get(self, "number_of_media")

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> int:
        return pulumi.get(self, "number_of_vapp_templates")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="preserveIdentityInformation")
    def preserve_identity_information(self) -> bool:
        return pulumi.get(self, "preserve_identity_information")

    @property
    @pulumi.getter(name="publishEnabled")
    def publish_enabled(self) -> bool:
        return pulumi.get(self, "publish_enabled")

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> str:
        return pulumi.get(self, "publish_subscription_type")

    @property
    @pulumi.getter(name="publishSubscriptionUrl")
    def publish_subscription_url(self) -> str:
        return pulumi.get(self, "publish_subscription_url")

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> str:
        return pulumi.get(self, "storage_profile_id")

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> Sequence[str]:
        return pulumi.get(self, "vapp_template_lists")


class AwaitableGetCatalogResult(GetCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogResult(
            cache_enabled=self.cache_enabled,
            catalog_version=self.catalog_version,
            created=self.created,
            description=self.description,
            filter=self.filter,
            href=self.href,
            id=self.id,
            is_local=self.is_local,
            is_published=self.is_published,
            is_shared=self.is_shared,
            media_item_lists=self.media_item_lists,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            number_of_media=self.number_of_media,
            number_of_vapp_templates=self.number_of_vapp_templates,
            org=self.org,
            owner_name=self.owner_name,
            preserve_identity_information=self.preserve_identity_information,
            publish_enabled=self.publish_enabled,
            publish_subscription_type=self.publish_subscription_type,
            publish_subscription_url=self.publish_subscription_url,
            storage_profile_id=self.storage_profile_id,
            vapp_template_lists=self.vapp_template_lists)


def get_catalog(description: Optional[str] = None,
                filter: Optional[pulumi.InputType['GetCatalogFilterArgs']] = None,
                name: Optional[str] = None,
                org: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCatalog:getCatalog', __args__, opts=opts, typ=GetCatalogResult).value

    return AwaitableGetCatalogResult(
        cache_enabled=__ret__.cache_enabled,
        catalog_version=__ret__.catalog_version,
        created=__ret__.created,
        description=__ret__.description,
        filter=__ret__.filter,
        href=__ret__.href,
        id=__ret__.id,
        is_local=__ret__.is_local,
        is_published=__ret__.is_published,
        is_shared=__ret__.is_shared,
        media_item_lists=__ret__.media_item_lists,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        number_of_media=__ret__.number_of_media,
        number_of_vapp_templates=__ret__.number_of_vapp_templates,
        org=__ret__.org,
        owner_name=__ret__.owner_name,
        preserve_identity_information=__ret__.preserve_identity_information,
        publish_enabled=__ret__.publish_enabled,
        publish_subscription_type=__ret__.publish_subscription_type,
        publish_subscription_url=__ret__.publish_subscription_url,
        storage_profile_id=__ret__.storage_profile_id,
        vapp_template_lists=__ret__.vapp_template_lists)


@_utilities.lift_output_func(get_catalog)
def get_catalog_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                       filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetCatalogFilterArgs']]]] = None,
                       name: Optional[pulumi.Input[Optional[str]]] = None,
                       org: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCatalogResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
