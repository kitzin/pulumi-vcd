# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetVappNetworkResult',
    'AwaitableGetVappNetworkResult',
    'get_vapp_network',
    'get_vapp_network_output',
]

@pulumi.output_type
class GetVappNetworkResult:
    """
    A collection of values returned by getVappNetwork.
    """
    def __init__(__self__, description=None, dhcp_pools=None, dns1=None, dns2=None, dns_suffix=None, gateway=None, guest_vlan_allowed=None, id=None, name=None, netmask=None, org=None, org_network_name=None, retain_ip_mac_enabled=None, static_ip_pools=None, vapp_name=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dhcp_pools and not isinstance(dhcp_pools, list):
            raise TypeError("Expected argument 'dhcp_pools' to be a list")
        pulumi.set(__self__, "dhcp_pools", dhcp_pools)
        if dns1 and not isinstance(dns1, str):
            raise TypeError("Expected argument 'dns1' to be a str")
        pulumi.set(__self__, "dns1", dns1)
        if dns2 and not isinstance(dns2, str):
            raise TypeError("Expected argument 'dns2' to be a str")
        pulumi.set(__self__, "dns2", dns2)
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if guest_vlan_allowed and not isinstance(guest_vlan_allowed, bool):
            raise TypeError("Expected argument 'guest_vlan_allowed' to be a bool")
        pulumi.set(__self__, "guest_vlan_allowed", guest_vlan_allowed)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if netmask and not isinstance(netmask, str):
            raise TypeError("Expected argument 'netmask' to be a str")
        pulumi.set(__self__, "netmask", netmask)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if org_network_name and not isinstance(org_network_name, str):
            raise TypeError("Expected argument 'org_network_name' to be a str")
        pulumi.set(__self__, "org_network_name", org_network_name)
        if retain_ip_mac_enabled and not isinstance(retain_ip_mac_enabled, bool):
            raise TypeError("Expected argument 'retain_ip_mac_enabled' to be a bool")
        pulumi.set(__self__, "retain_ip_mac_enabled", retain_ip_mac_enabled)
        if static_ip_pools and not isinstance(static_ip_pools, list):
            raise TypeError("Expected argument 'static_ip_pools' to be a list")
        pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vapp_name and not isinstance(vapp_name, str):
            raise TypeError("Expected argument 'vapp_name' to be a str")
        pulumi.set(__self__, "vapp_name", vapp_name)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpPools")
    def dhcp_pools(self) -> Sequence['outputs.GetVappNetworkDhcpPoolResult']:
        return pulumi.get(self, "dhcp_pools")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="guestVlanAllowed")
    def guest_vlan_allowed(self) -> bool:
        return pulumi.get(self, "guest_vlan_allowed")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgNetworkName")
    def org_network_name(self) -> str:
        return pulumi.get(self, "org_network_name")

    @property
    @pulumi.getter(name="retainIpMacEnabled")
    def retain_ip_mac_enabled(self) -> bool:
        return pulumi.get(self, "retain_ip_mac_enabled")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Sequence['outputs.GetVappNetworkStaticIpPoolResult']:
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> str:
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetVappNetworkResult(GetVappNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVappNetworkResult(
            description=self.description,
            dhcp_pools=self.dhcp_pools,
            dns1=self.dns1,
            dns2=self.dns2,
            dns_suffix=self.dns_suffix,
            gateway=self.gateway,
            guest_vlan_allowed=self.guest_vlan_allowed,
            id=self.id,
            name=self.name,
            netmask=self.netmask,
            org=self.org,
            org_network_name=self.org_network_name,
            retain_ip_mac_enabled=self.retain_ip_mac_enabled,
            static_ip_pools=self.static_ip_pools,
            vapp_name=self.vapp_name,
            vdc=self.vdc)


def get_vapp_network(name: Optional[str] = None,
                     org: Optional[str] = None,
                     vapp_name: Optional[str] = None,
                     vdc: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVappNetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vappName'] = vapp_name
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVappNetwork:getVappNetwork', __args__, opts=opts, typ=GetVappNetworkResult).value

    return AwaitableGetVappNetworkResult(
        description=__ret__.description,
        dhcp_pools=__ret__.dhcp_pools,
        dns1=__ret__.dns1,
        dns2=__ret__.dns2,
        dns_suffix=__ret__.dns_suffix,
        gateway=__ret__.gateway,
        guest_vlan_allowed=__ret__.guest_vlan_allowed,
        id=__ret__.id,
        name=__ret__.name,
        netmask=__ret__.netmask,
        org=__ret__.org,
        org_network_name=__ret__.org_network_name,
        retain_ip_mac_enabled=__ret__.retain_ip_mac_enabled,
        static_ip_pools=__ret__.static_ip_pools,
        vapp_name=__ret__.vapp_name,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_vapp_network)
def get_vapp_network_output(name: Optional[pulumi.Input[str]] = None,
                            org: Optional[pulumi.Input[Optional[str]]] = None,
                            vapp_name: Optional[pulumi.Input[str]] = None,
                            vdc: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVappNetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
