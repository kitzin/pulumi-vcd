# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EdgeGatewaySettingsArgs', 'EdgeGatewaySettings']

@pulumi.input_type
class EdgeGatewaySettingsArgs:
    def __init__(__self__, *,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 edge_gateway_name: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgeGatewaySettings resource.
        :param pulumi.Input[str] edge_gateway_id: ID of the edge gateway. Required when 'edge_gateway_name' is not set
        :param pulumi.Input[str] edge_gateway_name: Name of the edge gateway. Required when 'edge_gateway_id' is not set
        :param pulumi.Input[str] fw_default_rule_action: 'accept' or 'deny'. Default 'deny'
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable logging for default rule. Default 'false'
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default 'true'
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable load balancer acceleration. (Disabled by default)
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. (Disabled by default)
        :param pulumi.Input[bool] lb_logging_enabled: Enable load balancer logging. (Disabled by default)
        :param pulumi.Input[str] lb_loglevel: Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if edge_gateway_name is not None:
            pulumi.set(__self__, "edge_gateway_name", edge_gateway_name)
        if fw_default_rule_action is not None:
            pulumi.set(__self__, "fw_default_rule_action", fw_default_rule_action)
        if fw_default_rule_logging_enabled is not None:
            pulumi.set(__self__, "fw_default_rule_logging_enabled", fw_default_rule_logging_enabled)
        if fw_enabled is not None:
            pulumi.set(__self__, "fw_enabled", fw_enabled)
        if lb_acceleration_enabled is not None:
            pulumi.set(__self__, "lb_acceleration_enabled", lb_acceleration_enabled)
        if lb_enabled is not None:
            pulumi.set(__self__, "lb_enabled", lb_enabled)
        if lb_logging_enabled is not None:
            pulumi.set(__self__, "lb_logging_enabled", lb_logging_enabled)
        if lb_loglevel is not None:
            pulumi.set(__self__, "lb_loglevel", lb_loglevel)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the edge gateway. Required when 'edge_gateway_name' is not set
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="edgeGatewayName")
    def edge_gateway_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the edge gateway. Required when 'edge_gateway_id' is not set
        """
        return pulumi.get(self, "edge_gateway_name")

    @edge_gateway_name.setter
    def edge_gateway_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_name", value)

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> Optional[pulumi.Input[str]]:
        """
        'accept' or 'deny'. Default 'deny'
        """
        return pulumi.get(self, "fw_default_rule_action")

    @fw_default_rule_action.setter
    def fw_default_rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_default_rule_action", value)

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable logging for default rule. Default 'false'
        """
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @fw_default_rule_logging_enabled.setter
    def fw_default_rule_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_default_rule_logging_enabled", value)

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable firewall. Default 'true'
        """
        return pulumi.get(self, "fw_enabled")

    @fw_enabled.setter
    def fw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_enabled", value)

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancer acceleration. (Disabled by default)
        """
        return pulumi.get(self, "lb_acceleration_enabled")

    @lb_acceleration_enabled.setter
    def lb_acceleration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_acceleration_enabled", value)

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancing. (Disabled by default)
        """
        return pulumi.get(self, "lb_enabled")

    @lb_enabled.setter
    def lb_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_enabled", value)

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancer logging. (Disabled by default)
        """
        return pulumi.get(self, "lb_logging_enabled")

    @lb_logging_enabled.setter
    def lb_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_logging_enabled", value)

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> Optional[pulumi.Input[str]]:
        """
        Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        """
        return pulumi.get(self, "lb_loglevel")

    @lb_loglevel.setter
    def lb_loglevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_loglevel", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _EdgeGatewaySettingsState:
    def __init__(__self__, *,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 edge_gateway_name: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EdgeGatewaySettings resources.
        :param pulumi.Input[str] edge_gateway_id: ID of the edge gateway. Required when 'edge_gateway_name' is not set
        :param pulumi.Input[str] edge_gateway_name: Name of the edge gateway. Required when 'edge_gateway_id' is not set
        :param pulumi.Input[str] fw_default_rule_action: 'accept' or 'deny'. Default 'deny'
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable logging for default rule. Default 'false'
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default 'true'
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable load balancer acceleration. (Disabled by default)
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. (Disabled by default)
        :param pulumi.Input[bool] lb_logging_enabled: Enable load balancer logging. (Disabled by default)
        :param pulumi.Input[str] lb_loglevel: Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if edge_gateway_name is not None:
            pulumi.set(__self__, "edge_gateway_name", edge_gateway_name)
        if fw_default_rule_action is not None:
            pulumi.set(__self__, "fw_default_rule_action", fw_default_rule_action)
        if fw_default_rule_logging_enabled is not None:
            pulumi.set(__self__, "fw_default_rule_logging_enabled", fw_default_rule_logging_enabled)
        if fw_enabled is not None:
            pulumi.set(__self__, "fw_enabled", fw_enabled)
        if lb_acceleration_enabled is not None:
            pulumi.set(__self__, "lb_acceleration_enabled", lb_acceleration_enabled)
        if lb_enabled is not None:
            pulumi.set(__self__, "lb_enabled", lb_enabled)
        if lb_logging_enabled is not None:
            pulumi.set(__self__, "lb_logging_enabled", lb_logging_enabled)
        if lb_loglevel is not None:
            pulumi.set(__self__, "lb_loglevel", lb_loglevel)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the edge gateway. Required when 'edge_gateway_name' is not set
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="edgeGatewayName")
    def edge_gateway_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the edge gateway. Required when 'edge_gateway_id' is not set
        """
        return pulumi.get(self, "edge_gateway_name")

    @edge_gateway_name.setter
    def edge_gateway_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_name", value)

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> Optional[pulumi.Input[str]]:
        """
        'accept' or 'deny'. Default 'deny'
        """
        return pulumi.get(self, "fw_default_rule_action")

    @fw_default_rule_action.setter
    def fw_default_rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_default_rule_action", value)

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable logging for default rule. Default 'false'
        """
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @fw_default_rule_logging_enabled.setter
    def fw_default_rule_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_default_rule_logging_enabled", value)

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable firewall. Default 'true'
        """
        return pulumi.get(self, "fw_enabled")

    @fw_enabled.setter
    def fw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fw_enabled", value)

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancer acceleration. (Disabled by default)
        """
        return pulumi.get(self, "lb_acceleration_enabled")

    @lb_acceleration_enabled.setter
    def lb_acceleration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_acceleration_enabled", value)

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancing. (Disabled by default)
        """
        return pulumi.get(self, "lb_enabled")

    @lb_enabled.setter
    def lb_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_enabled", value)

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable load balancer logging. (Disabled by default)
        """
        return pulumi.get(self, "lb_logging_enabled")

    @lb_logging_enabled.setter
    def lb_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lb_logging_enabled", value)

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> Optional[pulumi.Input[str]]:
        """
        Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        """
        return pulumi.get(self, "lb_loglevel")

    @lb_loglevel.setter
    def lb_loglevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_loglevel", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class EdgeGatewaySettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 edge_gateway_name: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a EdgeGatewaySettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway_id: ID of the edge gateway. Required when 'edge_gateway_name' is not set
        :param pulumi.Input[str] edge_gateway_name: Name of the edge gateway. Required when 'edge_gateway_id' is not set
        :param pulumi.Input[str] fw_default_rule_action: 'accept' or 'deny'. Default 'deny'
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable logging for default rule. Default 'false'
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default 'true'
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable load balancer acceleration. (Disabled by default)
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. (Disabled by default)
        :param pulumi.Input[bool] lb_logging_enabled: Enable load balancer logging. (Disabled by default)
        :param pulumi.Input[str] lb_loglevel: Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EdgeGatewaySettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EdgeGatewaySettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EdgeGatewaySettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgeGatewaySettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 edge_gateway_name: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_action: Optional[pulumi.Input[str]] = None,
                 fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 fw_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 lb_loglevel: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgeGatewaySettingsArgs.__new__(EdgeGatewaySettingsArgs)

            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            __props__.__dict__["edge_gateway_name"] = edge_gateway_name
            __props__.__dict__["fw_default_rule_action"] = fw_default_rule_action
            __props__.__dict__["fw_default_rule_logging_enabled"] = fw_default_rule_logging_enabled
            __props__.__dict__["fw_enabled"] = fw_enabled
            __props__.__dict__["lb_acceleration_enabled"] = lb_acceleration_enabled
            __props__.__dict__["lb_enabled"] = lb_enabled
            __props__.__dict__["lb_logging_enabled"] = lb_logging_enabled
            __props__.__dict__["lb_loglevel"] = lb_loglevel
            __props__.__dict__["org"] = org
            __props__.__dict__["vdc"] = vdc
        super(EdgeGatewaySettings, __self__).__init__(
            'vcd:index/edgeGatewaySettings:EdgeGatewaySettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            edge_gateway_name: Optional[pulumi.Input[str]] = None,
            fw_default_rule_action: Optional[pulumi.Input[str]] = None,
            fw_default_rule_logging_enabled: Optional[pulumi.Input[bool]] = None,
            fw_enabled: Optional[pulumi.Input[bool]] = None,
            lb_acceleration_enabled: Optional[pulumi.Input[bool]] = None,
            lb_enabled: Optional[pulumi.Input[bool]] = None,
            lb_logging_enabled: Optional[pulumi.Input[bool]] = None,
            lb_loglevel: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'EdgeGatewaySettings':
        """
        Get an existing EdgeGatewaySettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway_id: ID of the edge gateway. Required when 'edge_gateway_name' is not set
        :param pulumi.Input[str] edge_gateway_name: Name of the edge gateway. Required when 'edge_gateway_id' is not set
        :param pulumi.Input[str] fw_default_rule_action: 'accept' or 'deny'. Default 'deny'
        :param pulumi.Input[bool] fw_default_rule_logging_enabled: Enable logging for default rule. Default 'false'
        :param pulumi.Input[bool] fw_enabled: Enable firewall. Default 'true'
        :param pulumi.Input[bool] lb_acceleration_enabled: Enable load balancer acceleration. (Disabled by default)
        :param pulumi.Input[bool] lb_enabled: Enable load balancing. (Disabled by default)
        :param pulumi.Input[bool] lb_logging_enabled: Enable load balancer logging. (Disabled by default)
        :param pulumi.Input[str] lb_loglevel: Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgeGatewaySettingsState.__new__(_EdgeGatewaySettingsState)

        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["edge_gateway_name"] = edge_gateway_name
        __props__.__dict__["fw_default_rule_action"] = fw_default_rule_action
        __props__.__dict__["fw_default_rule_logging_enabled"] = fw_default_rule_logging_enabled
        __props__.__dict__["fw_enabled"] = fw_enabled
        __props__.__dict__["lb_acceleration_enabled"] = lb_acceleration_enabled
        __props__.__dict__["lb_enabled"] = lb_enabled
        __props__.__dict__["lb_logging_enabled"] = lb_logging_enabled
        __props__.__dict__["lb_loglevel"] = lb_loglevel
        __props__.__dict__["org"] = org
        __props__.__dict__["vdc"] = vdc
        return EdgeGatewaySettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        ID of the edge gateway. Required when 'edge_gateway_name' is not set
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter(name="edgeGatewayName")
    def edge_gateway_name(self) -> pulumi.Output[str]:
        """
        Name of the edge gateway. Required when 'edge_gateway_id' is not set
        """
        return pulumi.get(self, "edge_gateway_name")

    @property
    @pulumi.getter(name="fwDefaultRuleAction")
    def fw_default_rule_action(self) -> pulumi.Output[Optional[str]]:
        """
        'accept' or 'deny'. Default 'deny'
        """
        return pulumi.get(self, "fw_default_rule_action")

    @property
    @pulumi.getter(name="fwDefaultRuleLoggingEnabled")
    def fw_default_rule_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable logging for default rule. Default 'false'
        """
        return pulumi.get(self, "fw_default_rule_logging_enabled")

    @property
    @pulumi.getter(name="fwEnabled")
    def fw_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable firewall. Default 'true'
        """
        return pulumi.get(self, "fw_enabled")

    @property
    @pulumi.getter(name="lbAccelerationEnabled")
    def lb_acceleration_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable load balancer acceleration. (Disabled by default)
        """
        return pulumi.get(self, "lb_acceleration_enabled")

    @property
    @pulumi.getter(name="lbEnabled")
    def lb_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable load balancing. (Disabled by default)
        """
        return pulumi.get(self, "lb_enabled")

    @property
    @pulumi.getter(name="lbLoggingEnabled")
    def lb_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable load balancer logging. (Disabled by default)
        """
        return pulumi.get(self, "lb_logging_enabled")

    @property
    @pulumi.getter(name="lbLoglevel")
    def lb_loglevel(self) -> pulumi.Output[Optional[str]]:
        """
        Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
        """
        return pulumi.get(self, "lb_loglevel")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[Optional[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

