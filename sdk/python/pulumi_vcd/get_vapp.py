# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetVappResult',
    'AwaitableGetVappResult',
    'get_vapp',
    'get_vapp_output',
]

@pulumi.output_type
class GetVappResult:
    """
    A collection of values returned by getVapp.
    """
    def __init__(__self__, description=None, guest_properties=None, href=None, id=None, leases=None, metadata=None, metadata_entries=None, name=None, org=None, status=None, status_text=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if guest_properties and not isinstance(guest_properties, dict):
            raise TypeError("Expected argument 'guest_properties' to be a dict")
        pulumi.set(__self__, "guest_properties", guest_properties)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if leases and not isinstance(leases, list):
            raise TypeError("Expected argument 'leases' to be a list")
        pulumi.set(__self__, "leases", leases)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if status_text and not isinstance(status_text, str):
            raise TypeError("Expected argument 'status_text' to be a str")
        pulumi.set(__self__, "status_text", status_text)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="guestProperties")
    def guest_properties(self) -> Mapping[str, Any]:
        return pulumi.get(self, "guest_properties")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def leases(self) -> Sequence['outputs.GetVappLeaseResult']:
        return pulumi.get(self, "leases")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetVappMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> str:
        return pulumi.get(self, "status_text")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetVappResult(GetVappResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVappResult(
            description=self.description,
            guest_properties=self.guest_properties,
            href=self.href,
            id=self.id,
            leases=self.leases,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            status=self.status,
            status_text=self.status_text,
            vdc=self.vdc)


def get_vapp(name: Optional[str] = None,
             org: Optional[str] = None,
             vdc: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVappResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVapp:getVapp', __args__, opts=opts, typ=GetVappResult).value

    return AwaitableGetVappResult(
        description=__ret__.description,
        guest_properties=__ret__.guest_properties,
        href=__ret__.href,
        id=__ret__.id,
        leases=__ret__.leases,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        org=__ret__.org,
        status=__ret__.status,
        status_text=__ret__.status_text,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_vapp)
def get_vapp_output(name: Optional[pulumi.Input[str]] = None,
                    org: Optional[pulumi.Input[Optional[str]]] = None,
                    vdc: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVappResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
