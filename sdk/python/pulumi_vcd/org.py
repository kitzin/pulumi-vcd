# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgArgs', 'Org']

@pulumi.input_type
class OrgArgs:
    def __init__(__self__, *,
                 delete_force: pulumi.Input[bool],
                 delete_recursive: pulumi.Input[bool],
                 full_name: pulumi.Input[str],
                 can_publish_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_publish_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_subscribe_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 delay_after_power_on_seconds: Optional[pulumi.Input[int]] = None,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 vapp_lease: Optional[pulumi.Input['OrgVappLeaseArgs']] = None,
                 vapp_template_lease: Optional[pulumi.Input['OrgVappTemplateLeaseArgs']] = None):
        """
        The set of arguments for constructing a Org resource.
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
               regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[bool] can_publish_catalogs: True if this organization is allowed to share catalogs.
        :param pulumi.Input[bool] can_publish_external_catalogs: True if this organization is allowed to publish external catalogs.
        :param pulumi.Input[bool] can_subscribe_external_catalogs: True if this organization is allowed to subscribe to external catalogs.
        :param pulumi.Input[int] delay_after_power_on_seconds: Specifies this organization's default for virtual machine boot delay after power on.
        :param pulumi.Input[int] deployed_vm_quota: Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        :param pulumi.Input[bool] is_enabled: True if this organization is enabled (allows login and all other operations).
        :param pulumi.Input[Mapping[str, Any]] metadata: Key value map of metadata to assign to this organization. Key and value can be any string.
        :param pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]] metadata_entries: Metadata entries for the given Organization
        :param pulumi.Input[int] stored_vm_quota: Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
               this organization. (0 = unlimited)
        :param pulumi.Input['OrgVappLeaseArgs'] vapp_lease: Defines lease parameters for vApps created in this organization
        :param pulumi.Input['OrgVappTemplateLeaseArgs'] vapp_template_lease: Defines lease parameters for vApp templates created in this organization
        """
        pulumi.set(__self__, "delete_force", delete_force)
        pulumi.set(__self__, "delete_recursive", delete_recursive)
        pulumi.set(__self__, "full_name", full_name)
        if can_publish_catalogs is not None:
            pulumi.set(__self__, "can_publish_catalogs", can_publish_catalogs)
        if can_publish_external_catalogs is not None:
            pulumi.set(__self__, "can_publish_external_catalogs", can_publish_external_catalogs)
        if can_subscribe_external_catalogs is not None:
            pulumi.set(__self__, "can_subscribe_external_catalogs", can_subscribe_external_catalogs)
        if delay_after_power_on_seconds is not None:
            pulumi.set(__self__, "delay_after_power_on_seconds", delay_after_power_on_seconds)
        if deployed_vm_quota is not None:
            pulumi.set(__self__, "deployed_vm_quota", deployed_vm_quota)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stored_vm_quota is not None:
            pulumi.set(__self__, "stored_vm_quota", stored_vm_quota)
        if vapp_lease is not None:
            pulumi.set(__self__, "vapp_lease", vapp_lease)
        if vapp_template_lease is not None:
            pulumi.set(__self__, "vapp_template_lease", vapp_template_lease)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> pulumi.Input[bool]:
        """
        When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
        regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> pulumi.Input[bool]:
        """
        When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
        normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter(name="canPublishCatalogs")
    def can_publish_catalogs(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is allowed to share catalogs.
        """
        return pulumi.get(self, "can_publish_catalogs")

    @can_publish_catalogs.setter
    def can_publish_catalogs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_publish_catalogs", value)

    @property
    @pulumi.getter(name="canPublishExternalCatalogs")
    def can_publish_external_catalogs(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is allowed to publish external catalogs.
        """
        return pulumi.get(self, "can_publish_external_catalogs")

    @can_publish_external_catalogs.setter
    def can_publish_external_catalogs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_publish_external_catalogs", value)

    @property
    @pulumi.getter(name="canSubscribeExternalCatalogs")
    def can_subscribe_external_catalogs(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is allowed to subscribe to external catalogs.
        """
        return pulumi.get(self, "can_subscribe_external_catalogs")

    @can_subscribe_external_catalogs.setter
    def can_subscribe_external_catalogs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_subscribe_external_catalogs", value)

    @property
    @pulumi.getter(name="delayAfterPowerOnSeconds")
    def delay_after_power_on_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies this organization's default for virtual machine boot delay after power on.
        """
        return pulumi.get(self, "delay_after_power_on_seconds")

    @delay_after_power_on_seconds.setter
    def delay_after_power_on_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay_after_power_on_seconds", value)

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        """
        return pulumi.get(self, "deployed_vm_quota")

    @deployed_vm_quota.setter
    def deployed_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deployed_vm_quota", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is enabled (allows login and all other operations).
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key value map of metadata to assign to this organization. Key and value can be any string.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]]]:
        """
        Metadata entries for the given Organization
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
        this organization. (0 = unlimited)
        """
        return pulumi.get(self, "stored_vm_quota")

    @stored_vm_quota.setter
    def stored_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stored_vm_quota", value)

    @property
    @pulumi.getter(name="vappLease")
    def vapp_lease(self) -> Optional[pulumi.Input['OrgVappLeaseArgs']]:
        """
        Defines lease parameters for vApps created in this organization
        """
        return pulumi.get(self, "vapp_lease")

    @vapp_lease.setter
    def vapp_lease(self, value: Optional[pulumi.Input['OrgVappLeaseArgs']]):
        pulumi.set(self, "vapp_lease", value)

    @property
    @pulumi.getter(name="vappTemplateLease")
    def vapp_template_lease(self) -> Optional[pulumi.Input['OrgVappTemplateLeaseArgs']]:
        """
        Defines lease parameters for vApp templates created in this organization
        """
        return pulumi.get(self, "vapp_template_lease")

    @vapp_template_lease.setter
    def vapp_template_lease(self, value: Optional[pulumi.Input['OrgVappTemplateLeaseArgs']]):
        pulumi.set(self, "vapp_template_lease", value)


@pulumi.input_type
class _OrgState:
    def __init__(__self__, *,
                 can_publish_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_publish_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_subscribe_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 delay_after_power_on_seconds: Optional[pulumi.Input[int]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 vapp_lease: Optional[pulumi.Input['OrgVappLeaseArgs']] = None,
                 vapp_template_lease: Optional[pulumi.Input['OrgVappTemplateLeaseArgs']] = None):
        """
        Input properties used for looking up and filtering Org resources.
        :param pulumi.Input[bool] can_publish_catalogs: True if this organization is allowed to share catalogs.
        :param pulumi.Input[bool] can_publish_external_catalogs: True if this organization is allowed to publish external catalogs.
        :param pulumi.Input[bool] can_subscribe_external_catalogs: True if this organization is allowed to subscribe to external catalogs.
        :param pulumi.Input[int] delay_after_power_on_seconds: Specifies this organization's default for virtual machine boot delay after power on.
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
               regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[int] deployed_vm_quota: Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        :param pulumi.Input[bool] is_enabled: True if this organization is enabled (allows login and all other operations).
        :param pulumi.Input[Mapping[str, Any]] metadata: Key value map of metadata to assign to this organization. Key and value can be any string.
        :param pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]] metadata_entries: Metadata entries for the given Organization
        :param pulumi.Input[int] stored_vm_quota: Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
               this organization. (0 = unlimited)
        :param pulumi.Input['OrgVappLeaseArgs'] vapp_lease: Defines lease parameters for vApps created in this organization
        :param pulumi.Input['OrgVappTemplateLeaseArgs'] vapp_template_lease: Defines lease parameters for vApp templates created in this organization
        """
        if can_publish_catalogs is not None:
            pulumi.set(__self__, "can_publish_catalogs", can_publish_catalogs)
        if can_publish_external_catalogs is not None:
            pulumi.set(__self__, "can_publish_external_catalogs", can_publish_external_catalogs)
        if can_subscribe_external_catalogs is not None:
            pulumi.set(__self__, "can_subscribe_external_catalogs", can_subscribe_external_catalogs)
        if delay_after_power_on_seconds is not None:
            pulumi.set(__self__, "delay_after_power_on_seconds", delay_after_power_on_seconds)
        if delete_force is not None:
            pulumi.set(__self__, "delete_force", delete_force)
        if delete_recursive is not None:
            pulumi.set(__self__, "delete_recursive", delete_recursive)
        if deployed_vm_quota is not None:
            pulumi.set(__self__, "deployed_vm_quota", deployed_vm_quota)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stored_vm_quota is not None:
            pulumi.set(__self__, "stored_vm_quota", stored_vm_quota)
        if vapp_lease is not None:
            pulumi.set(__self__, "vapp_lease", vapp_lease)
        if vapp_template_lease is not None:
            pulumi.set(__self__, "vapp_template_lease", vapp_template_lease)

    @property
    @pulumi.getter(name="canPublishCatalogs")
    def can_publish_catalogs(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is allowed to share catalogs.
        """
        return pulumi.get(self, "can_publish_catalogs")

    @can_publish_catalogs.setter
    def can_publish_catalogs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_publish_catalogs", value)

    @property
    @pulumi.getter(name="canPublishExternalCatalogs")
    def can_publish_external_catalogs(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is allowed to publish external catalogs.
        """
        return pulumi.get(self, "can_publish_external_catalogs")

    @can_publish_external_catalogs.setter
    def can_publish_external_catalogs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_publish_external_catalogs", value)

    @property
    @pulumi.getter(name="canSubscribeExternalCatalogs")
    def can_subscribe_external_catalogs(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is allowed to subscribe to external catalogs.
        """
        return pulumi.get(self, "can_subscribe_external_catalogs")

    @can_subscribe_external_catalogs.setter
    def can_subscribe_external_catalogs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_subscribe_external_catalogs", value)

    @property
    @pulumi.getter(name="delayAfterPowerOnSeconds")
    def delay_after_power_on_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies this organization's default for virtual machine boot delay after power on.
        """
        return pulumi.get(self, "delay_after_power_on_seconds")

    @delay_after_power_on_seconds.setter
    def delay_after_power_on_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay_after_power_on_seconds", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
        regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
        normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        """
        return pulumi.get(self, "deployed_vm_quota")

    @deployed_vm_quota.setter
    def deployed_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deployed_vm_quota", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this organization is enabled (allows login and all other operations).
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key value map of metadata to assign to this organization. Key and value can be any string.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]]]:
        """
        Metadata entries for the given Organization
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
        this organization. (0 = unlimited)
        """
        return pulumi.get(self, "stored_vm_quota")

    @stored_vm_quota.setter
    def stored_vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stored_vm_quota", value)

    @property
    @pulumi.getter(name="vappLease")
    def vapp_lease(self) -> Optional[pulumi.Input['OrgVappLeaseArgs']]:
        """
        Defines lease parameters for vApps created in this organization
        """
        return pulumi.get(self, "vapp_lease")

    @vapp_lease.setter
    def vapp_lease(self, value: Optional[pulumi.Input['OrgVappLeaseArgs']]):
        pulumi.set(self, "vapp_lease", value)

    @property
    @pulumi.getter(name="vappTemplateLease")
    def vapp_template_lease(self) -> Optional[pulumi.Input['OrgVappTemplateLeaseArgs']]:
        """
        Defines lease parameters for vApp templates created in this organization
        """
        return pulumi.get(self, "vapp_template_lease")

    @vapp_template_lease.setter
    def vapp_template_lease(self, value: Optional[pulumi.Input['OrgVappTemplateLeaseArgs']]):
        pulumi.set(self, "vapp_template_lease", value)


class Org(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_publish_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_publish_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_subscribe_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 delay_after_power_on_seconds: Optional[pulumi.Input[int]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMetadataEntryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 vapp_lease: Optional[pulumi.Input[pulumi.InputType['OrgVappLeaseArgs']]] = None,
                 vapp_template_lease: Optional[pulumi.Input[pulumi.InputType['OrgVappTemplateLeaseArgs']]] = None,
                 __props__=None):
        """
        Create a Org resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] can_publish_catalogs: True if this organization is allowed to share catalogs.
        :param pulumi.Input[bool] can_publish_external_catalogs: True if this organization is allowed to publish external catalogs.
        :param pulumi.Input[bool] can_subscribe_external_catalogs: True if this organization is allowed to subscribe to external catalogs.
        :param pulumi.Input[int] delay_after_power_on_seconds: Specifies this organization's default for virtual machine boot delay after power on.
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
               regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[int] deployed_vm_quota: Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        :param pulumi.Input[bool] is_enabled: True if this organization is enabled (allows login and all other operations).
        :param pulumi.Input[Mapping[str, Any]] metadata: Key value map of metadata to assign to this organization. Key and value can be any string.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMetadataEntryArgs']]]] metadata_entries: Metadata entries for the given Organization
        :param pulumi.Input[int] stored_vm_quota: Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
               this organization. (0 = unlimited)
        :param pulumi.Input[pulumi.InputType['OrgVappLeaseArgs']] vapp_lease: Defines lease parameters for vApps created in this organization
        :param pulumi.Input[pulumi.InputType['OrgVappTemplateLeaseArgs']] vapp_template_lease: Defines lease parameters for vApp templates created in this organization
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Org resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_publish_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_publish_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 can_subscribe_external_catalogs: Optional[pulumi.Input[bool]] = None,
                 delay_after_power_on_seconds: Optional[pulumi.Input[int]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 deployed_vm_quota: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMetadataEntryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stored_vm_quota: Optional[pulumi.Input[int]] = None,
                 vapp_lease: Optional[pulumi.Input[pulumi.InputType['OrgVappLeaseArgs']]] = None,
                 vapp_template_lease: Optional[pulumi.Input[pulumi.InputType['OrgVappTemplateLeaseArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgArgs.__new__(OrgArgs)

            __props__.__dict__["can_publish_catalogs"] = can_publish_catalogs
            __props__.__dict__["can_publish_external_catalogs"] = can_publish_external_catalogs
            __props__.__dict__["can_subscribe_external_catalogs"] = can_subscribe_external_catalogs
            __props__.__dict__["delay_after_power_on_seconds"] = delay_after_power_on_seconds
            if delete_force is None and not opts.urn:
                raise TypeError("Missing required property 'delete_force'")
            __props__.__dict__["delete_force"] = delete_force
            if delete_recursive is None and not opts.urn:
                raise TypeError("Missing required property 'delete_recursive'")
            __props__.__dict__["delete_recursive"] = delete_recursive
            __props__.__dict__["deployed_vm_quota"] = deployed_vm_quota
            __props__.__dict__["description"] = description
            if full_name is None and not opts.urn:
                raise TypeError("Missing required property 'full_name'")
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["is_enabled"] = is_enabled
            if metadata is not None and not opts.urn:
                warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
                pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["stored_vm_quota"] = stored_vm_quota
            __props__.__dict__["vapp_lease"] = vapp_lease
            __props__.__dict__["vapp_template_lease"] = vapp_template_lease
        super(Org, __self__).__init__(
            'vcd:index/org:Org',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_publish_catalogs: Optional[pulumi.Input[bool]] = None,
            can_publish_external_catalogs: Optional[pulumi.Input[bool]] = None,
            can_subscribe_external_catalogs: Optional[pulumi.Input[bool]] = None,
            delay_after_power_on_seconds: Optional[pulumi.Input[int]] = None,
            delete_force: Optional[pulumi.Input[bool]] = None,
            delete_recursive: Optional[pulumi.Input[bool]] = None,
            deployed_vm_quota: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            full_name: Optional[pulumi.Input[str]] = None,
            is_enabled: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMetadataEntryArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            stored_vm_quota: Optional[pulumi.Input[int]] = None,
            vapp_lease: Optional[pulumi.Input[pulumi.InputType['OrgVappLeaseArgs']]] = None,
            vapp_template_lease: Optional[pulumi.Input[pulumi.InputType['OrgVappTemplateLeaseArgs']]] = None) -> 'Org':
        """
        Get an existing Org resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] can_publish_catalogs: True if this organization is allowed to share catalogs.
        :param pulumi.Input[bool] can_publish_external_catalogs: True if this organization is allowed to publish external catalogs.
        :param pulumi.Input[bool] can_subscribe_external_catalogs: True if this organization is allowed to subscribe to external catalogs.
        :param pulumi.Input[int] delay_after_power_on_seconds: Specifies this organization's default for virtual machine boot delay after power on.
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
               regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[int] deployed_vm_quota: Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        :param pulumi.Input[bool] is_enabled: True if this organization is enabled (allows login and all other operations).
        :param pulumi.Input[Mapping[str, Any]] metadata: Key value map of metadata to assign to this organization. Key and value can be any string.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMetadataEntryArgs']]]] metadata_entries: Metadata entries for the given Organization
        :param pulumi.Input[int] stored_vm_quota: Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
               this organization. (0 = unlimited)
        :param pulumi.Input[pulumi.InputType['OrgVappLeaseArgs']] vapp_lease: Defines lease parameters for vApps created in this organization
        :param pulumi.Input[pulumi.InputType['OrgVappTemplateLeaseArgs']] vapp_template_lease: Defines lease parameters for vApp templates created in this organization
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgState.__new__(_OrgState)

        __props__.__dict__["can_publish_catalogs"] = can_publish_catalogs
        __props__.__dict__["can_publish_external_catalogs"] = can_publish_external_catalogs
        __props__.__dict__["can_subscribe_external_catalogs"] = can_subscribe_external_catalogs
        __props__.__dict__["delay_after_power_on_seconds"] = delay_after_power_on_seconds
        __props__.__dict__["delete_force"] = delete_force
        __props__.__dict__["delete_recursive"] = delete_recursive
        __props__.__dict__["deployed_vm_quota"] = deployed_vm_quota
        __props__.__dict__["description"] = description
        __props__.__dict__["full_name"] = full_name
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["stored_vm_quota"] = stored_vm_quota
        __props__.__dict__["vapp_lease"] = vapp_lease
        __props__.__dict__["vapp_template_lease"] = vapp_template_lease
        return Org(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canPublishCatalogs")
    def can_publish_catalogs(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this organization is allowed to share catalogs.
        """
        return pulumi.get(self, "can_publish_catalogs")

    @property
    @pulumi.getter(name="canPublishExternalCatalogs")
    def can_publish_external_catalogs(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this organization is allowed to publish external catalogs.
        """
        return pulumi.get(self, "can_publish_external_catalogs")

    @property
    @pulumi.getter(name="canSubscribeExternalCatalogs")
    def can_subscribe_external_catalogs(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this organization is allowed to subscribe to external catalogs.
        """
        return pulumi.get(self, "can_subscribe_external_catalogs")

    @property
    @pulumi.getter(name="delayAfterPowerOnSeconds")
    def delay_after_power_on_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies this organization's default for virtual machine boot delay after power on.
        """
        return pulumi.get(self, "delay_after_power_on_seconds")

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> pulumi.Output[bool]:
        """
        When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains,
        regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> pulumi.Output[bool]:
        """
        When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that
        normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
        """
        return pulumi.get(self, "deployed_vm_quota")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this organization is enabled (allows login and all other operations).
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Key value map of metadata to assign to this organization. Key and value can be any string.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.OrgMetadataEntry']]:
        """
        Metadata entries for the given Organization
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of
        this organization. (0 = unlimited)
        """
        return pulumi.get(self, "stored_vm_quota")

    @property
    @pulumi.getter(name="vappLease")
    def vapp_lease(self) -> pulumi.Output['outputs.OrgVappLease']:
        """
        Defines lease parameters for vApps created in this organization
        """
        return pulumi.get(self, "vapp_lease")

    @property
    @pulumi.getter(name="vappTemplateLease")
    def vapp_template_lease(self) -> pulumi.Output['outputs.OrgVappTemplateLease']:
        """
        Defines lease parameters for vApp templates created in this organization
        """
        return pulumi.get(self, "vapp_template_lease")

