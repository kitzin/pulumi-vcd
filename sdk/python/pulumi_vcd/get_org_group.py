# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOrgGroupResult',
    'AwaitableGetOrgGroupResult',
    'get_org_group',
    'get_org_group_output',
]

@pulumi.output_type
class GetOrgGroupResult:
    """
    A collection of values returned by getOrgGroup.
    """
    def __init__(__self__, description=None, id=None, name=None, org=None, provider_type=None, role=None, user_names=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if provider_type and not isinstance(provider_type, str):
            raise TypeError("Expected argument 'provider_type' to be a str")
        pulumi.set(__self__, "provider_type", provider_type)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if user_names and not isinstance(user_names, list):
            raise TypeError("Expected argument 'user_names' to be a list")
        pulumi.set(__self__, "user_names", user_names)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> str:
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Sequence[str]:
        return pulumi.get(self, "user_names")


class AwaitableGetOrgGroupResult(GetOrgGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgGroupResult(
            description=self.description,
            id=self.id,
            name=self.name,
            org=self.org,
            provider_type=self.provider_type,
            role=self.role,
            user_names=self.user_names)


def get_org_group(name: Optional[str] = None,
                  org: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrgGroup:getOrgGroup', __args__, opts=opts, typ=GetOrgGroupResult).value

    return AwaitableGetOrgGroupResult(
        description=__ret__.description,
        id=__ret__.id,
        name=__ret__.name,
        org=__ret__.org,
        provider_type=__ret__.provider_type,
        role=__ret__.role,
        user_names=__ret__.user_names)


@_utilities.lift_output_func(get_org_group)
def get_org_group_output(name: Optional[pulumi.Input[str]] = None,
                         org: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrgGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
