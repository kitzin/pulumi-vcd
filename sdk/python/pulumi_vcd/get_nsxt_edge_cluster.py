# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNsxtEdgeClusterResult',
    'AwaitableGetNsxtEdgeClusterResult',
    'get_nsxt_edge_cluster',
    'get_nsxt_edge_cluster_output',
]

@pulumi.output_type
class GetNsxtEdgeClusterResult:
    """
    A collection of values returned by getNsxtEdgeCluster.
    """
    def __init__(__self__, deployment_type=None, description=None, id=None, name=None, node_count=None, node_type=None, org=None, provider_vdc_id=None, vdc=None, vdc_group_id=None, vdc_id=None):
        if deployment_type and not isinstance(deployment_type, str):
            raise TypeError("Expected argument 'deployment_type' to be a str")
        pulumi.set(__self__, "deployment_type", deployment_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if node_type and not isinstance(node_type, str):
            raise TypeError("Expected argument 'node_type' to be a str")
        pulumi.set(__self__, "node_type", node_type)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if provider_vdc_id and not isinstance(provider_vdc_id, str):
            raise TypeError("Expected argument 'provider_vdc_id' to be a str")
        pulumi.set(__self__, "provider_vdc_id", provider_vdc_id)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'vdc_id', 'vdc_group_id', and 'provider_vdc_id' which accept IDs of VDC, VDC Group and Provider VDC respectively""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'vdc_id', 'vdc_group_id', and 'provider_vdc_id' which accept IDs of VDC, VDC Group and Provider VDC respectively""")

        pulumi.set(__self__, "vdc", vdc)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)
        if vdc_id and not isinstance(vdc_id, str):
            raise TypeError("Expected argument 'vdc_id' to be a str")
        pulumi.set(__self__, "vdc_id", vdc_id)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="providerVdcId")
    def provider_vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "provider_vdc_id")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_group_id")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")


class AwaitableGetNsxtEdgeClusterResult(GetNsxtEdgeClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgeClusterResult(
            deployment_type=self.deployment_type,
            description=self.description,
            id=self.id,
            name=self.name,
            node_count=self.node_count,
            node_type=self.node_type,
            org=self.org,
            provider_vdc_id=self.provider_vdc_id,
            vdc=self.vdc,
            vdc_group_id=self.vdc_group_id,
            vdc_id=self.vdc_id)


def get_nsxt_edge_cluster(name: Optional[str] = None,
                          org: Optional[str] = None,
                          provider_vdc_id: Optional[str] = None,
                          vdc: Optional[str] = None,
                          vdc_group_id: Optional[str] = None,
                          vdc_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgeClusterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['providerVdcId'] = provider_vdc_id
    __args__['vdc'] = vdc
    __args__['vdcGroupId'] = vdc_group_id
    __args__['vdcId'] = vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgeCluster:getNsxtEdgeCluster', __args__, opts=opts, typ=GetNsxtEdgeClusterResult).value

    return AwaitableGetNsxtEdgeClusterResult(
        deployment_type=__ret__.deployment_type,
        description=__ret__.description,
        id=__ret__.id,
        name=__ret__.name,
        node_count=__ret__.node_count,
        node_type=__ret__.node_type,
        org=__ret__.org,
        provider_vdc_id=__ret__.provider_vdc_id,
        vdc=__ret__.vdc,
        vdc_group_id=__ret__.vdc_group_id,
        vdc_id=__ret__.vdc_id)


@_utilities.lift_output_func(get_nsxt_edge_cluster)
def get_nsxt_edge_cluster_output(name: Optional[pulumi.Input[str]] = None,
                                 org: Optional[pulumi.Input[Optional[str]]] = None,
                                 provider_vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtEdgeClusterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
