# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetVmAffinityRuleResult',
    'AwaitableGetVmAffinityRuleResult',
    'get_vm_affinity_rule',
    'get_vm_affinity_rule_output',
]

@pulumi.output_type
class GetVmAffinityRuleResult:
    """
    A collection of values returned by getVmAffinityRule.
    """
    def __init__(__self__, enabled=None, id=None, name=None, org=None, polarity=None, required=None, rule_id=None, vdc=None, vm_ids=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if polarity and not isinstance(polarity, str):
            raise TypeError("Expected argument 'polarity' to be a str")
        pulumi.set(__self__, "polarity", polarity)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)
        if vm_ids and not isinstance(vm_ids, list):
            raise TypeError("Expected argument 'vm_ids' to be a list")
        pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def polarity(self) -> str:
        return pulumi.get(self, "polarity")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Sequence[str]:
        return pulumi.get(self, "vm_ids")


class AwaitableGetVmAffinityRuleResult(GetVmAffinityRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmAffinityRuleResult(
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            org=self.org,
            polarity=self.polarity,
            required=self.required,
            rule_id=self.rule_id,
            vdc=self.vdc,
            vm_ids=self.vm_ids)


def get_vm_affinity_rule(name: Optional[str] = None,
                         org: Optional[str] = None,
                         rule_id: Optional[str] = None,
                         vdc: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmAffinityRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['org'] = org
    __args__['ruleId'] = rule_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getVmAffinityRule:getVmAffinityRule', __args__, opts=opts, typ=GetVmAffinityRuleResult).value

    return AwaitableGetVmAffinityRuleResult(
        enabled=__ret__.enabled,
        id=__ret__.id,
        name=__ret__.name,
        org=__ret__.org,
        polarity=__ret__.polarity,
        required=__ret__.required,
        rule_id=__ret__.rule_id,
        vdc=__ret__.vdc,
        vm_ids=__ret__.vm_ids)


@_utilities.lift_output_func(get_vm_affinity_rule)
def get_vm_affinity_rule_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                                vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVmAffinityRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
