# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubscribedCatalogResult',
    'AwaitableGetSubscribedCatalogResult',
    'get_subscribed_catalog',
    'get_subscribed_catalog_output',
]

@pulumi.output_type
class GetSubscribedCatalogResult:
    """
    A collection of values returned by getSubscribedCatalog.
    """
    def __init__(__self__, catalog_version=None, created=None, description=None, failed_tasks=None, filter=None, href=None, id=None, is_local=None, is_published=None, is_shared=None, make_local_copy=None, media_item_lists=None, name=None, number_of_media=None, number_of_vapp_templates=None, org=None, owner_name=None, publish_subscription_type=None, running_tasks=None, storage_profile_id=None, subscription_url=None, vapp_template_lists=None):
        if catalog_version and not isinstance(catalog_version, int):
            raise TypeError("Expected argument 'catalog_version' to be a int")
        pulumi.set(__self__, "catalog_version", catalog_version)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if failed_tasks and not isinstance(failed_tasks, list):
            raise TypeError("Expected argument 'failed_tasks' to be a list")
        pulumi.set(__self__, "failed_tasks", failed_tasks)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_local and not isinstance(is_local, bool):
            raise TypeError("Expected argument 'is_local' to be a bool")
        pulumi.set(__self__, "is_local", is_local)
        if is_published and not isinstance(is_published, bool):
            raise TypeError("Expected argument 'is_published' to be a bool")
        pulumi.set(__self__, "is_published", is_published)
        if is_shared and not isinstance(is_shared, bool):
            raise TypeError("Expected argument 'is_shared' to be a bool")
        pulumi.set(__self__, "is_shared", is_shared)
        if make_local_copy and not isinstance(make_local_copy, bool):
            raise TypeError("Expected argument 'make_local_copy' to be a bool")
        pulumi.set(__self__, "make_local_copy", make_local_copy)
        if media_item_lists and not isinstance(media_item_lists, list):
            raise TypeError("Expected argument 'media_item_lists' to be a list")
        pulumi.set(__self__, "media_item_lists", media_item_lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_media and not isinstance(number_of_media, int):
            raise TypeError("Expected argument 'number_of_media' to be a int")
        pulumi.set(__self__, "number_of_media", number_of_media)
        if number_of_vapp_templates and not isinstance(number_of_vapp_templates, int):
            raise TypeError("Expected argument 'number_of_vapp_templates' to be a int")
        pulumi.set(__self__, "number_of_vapp_templates", number_of_vapp_templates)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if publish_subscription_type and not isinstance(publish_subscription_type, str):
            raise TypeError("Expected argument 'publish_subscription_type' to be a str")
        pulumi.set(__self__, "publish_subscription_type", publish_subscription_type)
        if running_tasks and not isinstance(running_tasks, list):
            raise TypeError("Expected argument 'running_tasks' to be a list")
        pulumi.set(__self__, "running_tasks", running_tasks)
        if storage_profile_id and not isinstance(storage_profile_id, str):
            raise TypeError("Expected argument 'storage_profile_id' to be a str")
        pulumi.set(__self__, "storage_profile_id", storage_profile_id)
        if subscription_url and not isinstance(subscription_url, str):
            raise TypeError("Expected argument 'subscription_url' to be a str")
        pulumi.set(__self__, "subscription_url", subscription_url)
        if vapp_template_lists and not isinstance(vapp_template_lists, list):
            raise TypeError("Expected argument 'vapp_template_lists' to be a list")
        pulumi.set(__self__, "vapp_template_lists", vapp_template_lists)

    @property
    @pulumi.getter(name="catalogVersion")
    def catalog_version(self) -> int:
        return pulumi.get(self, "catalog_version")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failedTasks")
    def failed_tasks(self) -> Sequence[str]:
        return pulumi.get(self, "failed_tasks")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetSubscribedCatalogFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> bool:
        return pulumi.get(self, "is_local")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> bool:
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter(name="isShared")
    def is_shared(self) -> bool:
        return pulumi.get(self, "is_shared")

    @property
    @pulumi.getter(name="makeLocalCopy")
    def make_local_copy(self) -> bool:
        return pulumi.get(self, "make_local_copy")

    @property
    @pulumi.getter(name="mediaItemLists")
    def media_item_lists(self) -> Sequence[str]:
        return pulumi.get(self, "media_item_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfMedia")
    def number_of_media(self) -> int:
        return pulumi.get(self, "number_of_media")

    @property
    @pulumi.getter(name="numberOfVappTemplates")
    def number_of_vapp_templates(self) -> int:
        return pulumi.get(self, "number_of_vapp_templates")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter(name="publishSubscriptionType")
    def publish_subscription_type(self) -> str:
        return pulumi.get(self, "publish_subscription_type")

    @property
    @pulumi.getter(name="runningTasks")
    def running_tasks(self) -> Sequence[str]:
        return pulumi.get(self, "running_tasks")

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> str:
        return pulumi.get(self, "storage_profile_id")

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> str:
        return pulumi.get(self, "subscription_url")

    @property
    @pulumi.getter(name="vappTemplateLists")
    def vapp_template_lists(self) -> Sequence[str]:
        return pulumi.get(self, "vapp_template_lists")


class AwaitableGetSubscribedCatalogResult(GetSubscribedCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscribedCatalogResult(
            catalog_version=self.catalog_version,
            created=self.created,
            description=self.description,
            failed_tasks=self.failed_tasks,
            filter=self.filter,
            href=self.href,
            id=self.id,
            is_local=self.is_local,
            is_published=self.is_published,
            is_shared=self.is_shared,
            make_local_copy=self.make_local_copy,
            media_item_lists=self.media_item_lists,
            name=self.name,
            number_of_media=self.number_of_media,
            number_of_vapp_templates=self.number_of_vapp_templates,
            org=self.org,
            owner_name=self.owner_name,
            publish_subscription_type=self.publish_subscription_type,
            running_tasks=self.running_tasks,
            storage_profile_id=self.storage_profile_id,
            subscription_url=self.subscription_url,
            vapp_template_lists=self.vapp_template_lists)


def get_subscribed_catalog(filter: Optional[pulumi.InputType['GetSubscribedCatalogFilterArgs']] = None,
                           name: Optional[str] = None,
                           org: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscribedCatalogResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getSubscribedCatalog:getSubscribedCatalog', __args__, opts=opts, typ=GetSubscribedCatalogResult).value

    return AwaitableGetSubscribedCatalogResult(
        catalog_version=__ret__.catalog_version,
        created=__ret__.created,
        description=__ret__.description,
        failed_tasks=__ret__.failed_tasks,
        filter=__ret__.filter,
        href=__ret__.href,
        id=__ret__.id,
        is_local=__ret__.is_local,
        is_published=__ret__.is_published,
        is_shared=__ret__.is_shared,
        make_local_copy=__ret__.make_local_copy,
        media_item_lists=__ret__.media_item_lists,
        name=__ret__.name,
        number_of_media=__ret__.number_of_media,
        number_of_vapp_templates=__ret__.number_of_vapp_templates,
        org=__ret__.org,
        owner_name=__ret__.owner_name,
        publish_subscription_type=__ret__.publish_subscription_type,
        running_tasks=__ret__.running_tasks,
        storage_profile_id=__ret__.storage_profile_id,
        subscription_url=__ret__.subscription_url,
        vapp_template_lists=__ret__.vapp_template_lists)


@_utilities.lift_output_func(get_subscribed_catalog)
def get_subscribed_catalog_output(filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetSubscribedCatalogFilterArgs']]]] = None,
                                  name: Optional[pulumi.Input[str]] = None,
                                  org: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubscribedCatalogResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
