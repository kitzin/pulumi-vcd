# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetExternalNetworkV2Result',
    'AwaitableGetExternalNetworkV2Result',
    'get_external_network_v2',
    'get_external_network_v2_output',
]

@pulumi.output_type
class GetExternalNetworkV2Result:
    """
    A collection of values returned by getExternalNetworkV2.
    """
    def __init__(__self__, description=None, id=None, ip_scopes=None, name=None, nsxt_networks=None, vsphere_networks=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_scopes and not isinstance(ip_scopes, list):
            raise TypeError("Expected argument 'ip_scopes' to be a list")
        pulumi.set(__self__, "ip_scopes", ip_scopes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_networks and not isinstance(nsxt_networks, list):
            raise TypeError("Expected argument 'nsxt_networks' to be a list")
        pulumi.set(__self__, "nsxt_networks", nsxt_networks)
        if vsphere_networks and not isinstance(vsphere_networks, list):
            raise TypeError("Expected argument 'vsphere_networks' to be a list")
        pulumi.set(__self__, "vsphere_networks", vsphere_networks)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipScopes")
    def ip_scopes(self) -> Sequence['outputs.GetExternalNetworkV2IpScopeResult']:
        return pulumi.get(self, "ip_scopes")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtNetworks")
    def nsxt_networks(self) -> Sequence['outputs.GetExternalNetworkV2NsxtNetworkResult']:
        return pulumi.get(self, "nsxt_networks")

    @property
    @pulumi.getter(name="vsphereNetworks")
    def vsphere_networks(self) -> Sequence['outputs.GetExternalNetworkV2VsphereNetworkResult']:
        return pulumi.get(self, "vsphere_networks")


class AwaitableGetExternalNetworkV2Result(GetExternalNetworkV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExternalNetworkV2Result(
            description=self.description,
            id=self.id,
            ip_scopes=self.ip_scopes,
            name=self.name,
            nsxt_networks=self.nsxt_networks,
            vsphere_networks=self.vsphere_networks)


def get_external_network_v2(name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExternalNetworkV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getExternalNetworkV2:getExternalNetworkV2', __args__, opts=opts, typ=GetExternalNetworkV2Result).value

    return AwaitableGetExternalNetworkV2Result(
        description=__ret__.description,
        id=__ret__.id,
        ip_scopes=__ret__.ip_scopes,
        name=__ret__.name,
        nsxt_networks=__ret__.nsxt_networks,
        vsphere_networks=__ret__.vsphere_networks)


@_utilities.lift_output_func(get_external_network_v2)
def get_external_network_v2_output(name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExternalNetworkV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
