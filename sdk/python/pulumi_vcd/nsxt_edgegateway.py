# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxtEdgegatewayArgs', 'NsxtEdgegateway']

@pulumi.input_type
class NsxtEdgegatewayArgs:
    def __init__(__self__, *,
                 external_network_id: pulumi.Input[str],
                 subnets: pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]],
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtEdgegateway resource.
        :param pulumi.Input[str] external_network_id: External network ID
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]] subnets: One or more blocks with external network information to be attached to this gateway's interface
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        :param pulumi.Input[str] description: Edge Gateway description
        :param pulumi.Input[str] edge_cluster_id: Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        :param pulumi.Input[str] name: Edge Gateway name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] owner_id: ID of VDC or VDC Group
        :param pulumi.Input[str] starting_vdc_id: Optional ID of starting VDC if the 'owner_id' is a VDC Group
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "external_network_id", external_network_id)
        pulumi.set(__self__, "subnets", subnets)
        if dedicate_external_network is not None:
            pulumi.set(__self__, "dedicate_external_network", dedicate_external_network)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_cluster_id is not None:
            pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if starting_vdc_id is not None:
            pulumi.set(__self__, "starting_vdc_id", starting_vdc_id)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> pulumi.Input[str]:
        """
        External network ID
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_network_id", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]:
        """
        One or more blocks with external network information to be attached to this gateway's interface
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        """
        return pulumi.get(self, "dedicate_external_network")

    @dedicate_external_network.setter
    def dedicate_external_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dedicate_external_network", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Edge Gateway description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        """
        return pulumi.get(self, "edge_cluster_id")

    @edge_cluster_id.setter
    def edge_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_cluster_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Edge Gateway name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VDC or VDC Group
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional ID of starting VDC if the 'owner_id' is a VDC Group
        """
        return pulumi.get(self, "starting_vdc_id")

    @starting_vdc_id.setter
    def starting_vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_vdc_id", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtEdgegatewayState:
    def __init__(__self__, *,
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_ip: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtEdgegateway resources.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        :param pulumi.Input[str] description: Edge Gateway description
        :param pulumi.Input[str] edge_cluster_id: Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        :param pulumi.Input[str] external_network_id: External network ID
        :param pulumi.Input[str] name: Edge Gateway name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] owner_id: ID of VDC or VDC Group
        :param pulumi.Input[str] primary_ip: Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
        :param pulumi.Input[str] starting_vdc_id: Optional ID of starting VDC if the 'owner_id' is a VDC Group
        :param pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]] subnets: One or more blocks with external network information to be attached to this gateway's interface
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if dedicate_external_network is not None:
            pulumi.set(__self__, "dedicate_external_network", dedicate_external_network)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_cluster_id is not None:
            pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if external_network_id is not None:
            pulumi.set(__self__, "external_network_id", external_network_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if starting_vdc_id is not None:
            pulumi.set(__self__, "starting_vdc_id", starting_vdc_id)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        """
        return pulumi.get(self, "dedicate_external_network")

    @dedicate_external_network.setter
    def dedicate_external_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dedicate_external_network", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Edge Gateway description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        """
        return pulumi.get(self, "edge_cluster_id")

    @edge_cluster_id.setter
    def edge_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_cluster_id", value)

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        External network ID
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Edge Gateway name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VDC or VDC Group
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ip", value)

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional ID of starting VDC if the 'owner_id' is a VDC Group
        """
        return pulumi.get(self, "starting_vdc_id")

    @starting_vdc_id.setter
    def starting_vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_vdc_id", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]]:
        """
        One or more blocks with external network information to be attached to this gateway's interface
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtEdgegateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxtEdgegatewaySubnetArgs']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtEdgegateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        :param pulumi.Input[str] description: Edge Gateway description
        :param pulumi.Input[str] edge_cluster_id: Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        :param pulumi.Input[str] external_network_id: External network ID
        :param pulumi.Input[str] name: Edge Gateway name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] owner_id: ID of VDC or VDC Group
        :param pulumi.Input[str] starting_vdc_id: Optional ID of starting VDC if the 'owner_id' is a VDC Group
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxtEdgegatewaySubnetArgs']]]] subnets: One or more blocks with external network information to be attached to this gateway's interface
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtEdgegatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtEdgegateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtEdgegatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtEdgegatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicate_external_network: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 starting_vdc_id: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxtEdgegatewaySubnetArgs']]]]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtEdgegatewayArgs.__new__(NsxtEdgegatewayArgs)

            __props__.__dict__["dedicate_external_network"] = dedicate_external_network
            __props__.__dict__["description"] = description
            __props__.__dict__["edge_cluster_id"] = edge_cluster_id
            if external_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'external_network_id'")
            __props__.__dict__["external_network_id"] = external_network_id
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["starting_vdc_id"] = starting_vdc_id
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            if vdc is not None and not opts.urn:
                warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
                pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")
            __props__.__dict__["vdc"] = vdc
            __props__.__dict__["primary_ip"] = None
        super(NsxtEdgegateway, __self__).__init__(
            'vcd:index/nsxtEdgegateway:NsxtEdgegateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dedicate_external_network: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_cluster_id: Optional[pulumi.Input[str]] = None,
            external_network_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            primary_ip: Optional[pulumi.Input[str]] = None,
            starting_vdc_id: Optional[pulumi.Input[str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxtEdgegatewaySubnetArgs']]]]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtEdgegateway':
        """
        Get an existing NsxtEdgegateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dedicate_external_network: Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        :param pulumi.Input[str] description: Edge Gateway description
        :param pulumi.Input[str] edge_cluster_id: Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        :param pulumi.Input[str] external_network_id: External network ID
        :param pulumi.Input[str] name: Edge Gateway name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] owner_id: ID of VDC or VDC Group
        :param pulumi.Input[str] primary_ip: Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
        :param pulumi.Input[str] starting_vdc_id: Optional ID of starting VDC if the 'owner_id' is a VDC Group
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxtEdgegatewaySubnetArgs']]]] subnets: One or more blocks with external network information to be attached to this gateway's interface
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtEdgegatewayState.__new__(_NsxtEdgegatewayState)

        __props__.__dict__["dedicate_external_network"] = dedicate_external_network
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_cluster_id"] = edge_cluster_id
        __props__.__dict__["external_network_id"] = external_network_id
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["starting_vdc_id"] = starting_vdc_id
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["vdc"] = vdc
        return NsxtEdgegateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> pulumi.Output[Optional[bool]]:
        """
        Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
        """
        return pulumi.get(self, "dedicate_external_network")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Edge Gateway description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> pulumi.Output[str]:
        """
        Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
        """
        return pulumi.get(self, "edge_cluster_id")

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> pulumi.Output[str]:
        """
        External network ID
        """
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Edge Gateway name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        ID of VDC or VDC Group
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[str]:
        """
        Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
        """
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="startingVdcId")
    def starting_vdc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional ID of starting VDC if the 'owner_id' is a VDC Group
        """
        return pulumi.get(self, "starting_vdc_id")

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.NsxtEdgegatewaySubnet']]:
        """
        One or more blocks with external network information to be attached to this gateway's interface
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

