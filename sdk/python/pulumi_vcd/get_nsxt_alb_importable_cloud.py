# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNsxtAlbImportableCloudResult',
    'AwaitableGetNsxtAlbImportableCloudResult',
    'get_nsxt_alb_importable_cloud',
    'get_nsxt_alb_importable_cloud_output',
]

@pulumi.output_type
class GetNsxtAlbImportableCloudResult:
    """
    A collection of values returned by getNsxtAlbImportableCloud.
    """
    def __init__(__self__, already_imported=None, controller_id=None, id=None, name=None, network_pool_id=None, network_pool_name=None, transport_zone_name=None):
        if already_imported and not isinstance(already_imported, bool):
            raise TypeError("Expected argument 'already_imported' to be a bool")
        pulumi.set(__self__, "already_imported", already_imported)
        if controller_id and not isinstance(controller_id, str):
            raise TypeError("Expected argument 'controller_id' to be a str")
        pulumi.set(__self__, "controller_id", controller_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_pool_id and not isinstance(network_pool_id, str):
            raise TypeError("Expected argument 'network_pool_id' to be a str")
        pulumi.set(__self__, "network_pool_id", network_pool_id)
        if network_pool_name and not isinstance(network_pool_name, str):
            raise TypeError("Expected argument 'network_pool_name' to be a str")
        pulumi.set(__self__, "network_pool_name", network_pool_name)
        if transport_zone_name and not isinstance(transport_zone_name, str):
            raise TypeError("Expected argument 'transport_zone_name' to be a str")
        pulumi.set(__self__, "transport_zone_name", transport_zone_name)

    @property
    @pulumi.getter(name="alreadyImported")
    def already_imported(self) -> bool:
        return pulumi.get(self, "already_imported")

    @property
    @pulumi.getter(name="controllerId")
    def controller_id(self) -> str:
        return pulumi.get(self, "controller_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolId")
    def network_pool_id(self) -> str:
        return pulumi.get(self, "network_pool_id")

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> str:
        return pulumi.get(self, "network_pool_name")

    @property
    @pulumi.getter(name="transportZoneName")
    def transport_zone_name(self) -> str:
        return pulumi.get(self, "transport_zone_name")


class AwaitableGetNsxtAlbImportableCloudResult(GetNsxtAlbImportableCloudResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAlbImportableCloudResult(
            already_imported=self.already_imported,
            controller_id=self.controller_id,
            id=self.id,
            name=self.name,
            network_pool_id=self.network_pool_id,
            network_pool_name=self.network_pool_name,
            transport_zone_name=self.transport_zone_name)


def get_nsxt_alb_importable_cloud(controller_id: Optional[str] = None,
                                  name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAlbImportableCloudResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controllerId'] = controller_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAlbImportableCloud:getNsxtAlbImportableCloud', __args__, opts=opts, typ=GetNsxtAlbImportableCloudResult).value

    return AwaitableGetNsxtAlbImportableCloudResult(
        already_imported=__ret__.already_imported,
        controller_id=__ret__.controller_id,
        id=__ret__.id,
        name=__ret__.name,
        network_pool_id=__ret__.network_pool_id,
        network_pool_name=__ret__.network_pool_name,
        transport_zone_name=__ret__.transport_zone_name)


@_utilities.lift_output_func(get_nsxt_alb_importable_cloud)
def get_nsxt_alb_importable_cloud_output(controller_id: Optional[pulumi.Input[str]] = None,
                                         name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtAlbImportableCloudResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
