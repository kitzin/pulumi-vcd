# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkRoutedV2Result',
    'AwaitableGetNetworkRoutedV2Result',
    'get_network_routed_v2',
    'get_network_routed_v2_output',
]

@pulumi.output_type
class GetNetworkRoutedV2Result:
    """
    A collection of values returned by getNetworkRoutedV2.
    """
    def __init__(__self__, description=None, dns1=None, dns2=None, dns_suffix=None, edge_gateway_id=None, filter=None, gateway=None, id=None, interface_type=None, metadata=None, metadata_entries=None, name=None, org=None, owner_id=None, prefix_length=None, static_ip_pools=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns1 and not isinstance(dns1, str):
            raise TypeError("Expected argument 'dns1' to be a str")
        pulumi.set(__self__, "dns1", dns1)
        if dns2 and not isinstance(dns2, str):
            raise TypeError("Expected argument 'dns2' to be a str")
        pulumi.set(__self__, "dns2", dns2)
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if prefix_length and not isinstance(prefix_length, int):
            raise TypeError("Expected argument 'prefix_length' to be a int")
        pulumi.set(__self__, "prefix_length", prefix_length)
        if static_ip_pools and not isinstance(static_ip_pools, list):
            raise TypeError("Expected argument 'static_ip_pools' to be a list")
        pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        if vdc is not None:
            warnings.warn("""Deprecated in favor of `edge_gateway_id`. Routed networks will inherit VDC from parent Edge Gateway.""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Deprecated in favor of `edge_gateway_id`. Routed networks will inherit VDC from parent Edge Gateway.""")

        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetNetworkRoutedV2FilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> str:
        return pulumi.get(self, "interface_type")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetNetworkRoutedV2MetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Sequence['outputs.GetNetworkRoutedV2StaticIpPoolResult']:
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNetworkRoutedV2Result(GetNetworkRoutedV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkRoutedV2Result(
            description=self.description,
            dns1=self.dns1,
            dns2=self.dns2,
            dns_suffix=self.dns_suffix,
            edge_gateway_id=self.edge_gateway_id,
            filter=self.filter,
            gateway=self.gateway,
            id=self.id,
            interface_type=self.interface_type,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            owner_id=self.owner_id,
            prefix_length=self.prefix_length,
            static_ip_pools=self.static_ip_pools,
            vdc=self.vdc)


def get_network_routed_v2(edge_gateway_id: Optional[str] = None,
                          filter: Optional[pulumi.InputType['GetNetworkRoutedV2FilterArgs']] = None,
                          name: Optional[str] = None,
                          org: Optional[str] = None,
                          vdc: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkRoutedV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNetworkRoutedV2:getNetworkRoutedV2', __args__, opts=opts, typ=GetNetworkRoutedV2Result).value

    return AwaitableGetNetworkRoutedV2Result(
        description=__ret__.description,
        dns1=__ret__.dns1,
        dns2=__ret__.dns2,
        dns_suffix=__ret__.dns_suffix,
        edge_gateway_id=__ret__.edge_gateway_id,
        filter=__ret__.filter,
        gateway=__ret__.gateway,
        id=__ret__.id,
        interface_type=__ret__.interface_type,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        org=__ret__.org,
        owner_id=__ret__.owner_id,
        prefix_length=__ret__.prefix_length,
        static_ip_pools=__ret__.static_ip_pools,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_network_routed_v2)
def get_network_routed_v2_output(edge_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetNetworkRoutedV2FilterArgs']]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 org: Optional[pulumi.Input[Optional[str]]] = None,
                                 vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkRoutedV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
