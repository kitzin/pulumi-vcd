# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetOrgVdcResult',
    'AwaitableGetOrgVdcResult',
    'get_org_vdc',
    'get_org_vdc_output',
]

@pulumi.output_type
class GetOrgVdcResult:
    """
    A collection of values returned by getOrgVdc.
    """
    def __init__(__self__, allocation_model=None, allow_over_commit=None, compute_capacities=None, cpu_guaranteed=None, cpu_speed=None, default_compute_policy_id=None, default_vm_sizing_policy_id=None, description=None, edge_cluster_id=None, elasticity=None, enable_fast_provisioning=None, enable_thin_provisioning=None, enable_vm_discovery=None, enabled=None, id=None, include_vm_memory_overhead=None, memory_guaranteed=None, metadata=None, metadata_entries=None, name=None, network_pool_name=None, network_quota=None, nic_quota=None, org=None, provider_vdc_name=None, storage_profiles=None, vm_placement_policy_ids=None, vm_quota=None, vm_sizing_policy_ids=None):
        if allocation_model and not isinstance(allocation_model, str):
            raise TypeError("Expected argument 'allocation_model' to be a str")
        pulumi.set(__self__, "allocation_model", allocation_model)
        if allow_over_commit and not isinstance(allow_over_commit, bool):
            raise TypeError("Expected argument 'allow_over_commit' to be a bool")
        pulumi.set(__self__, "allow_over_commit", allow_over_commit)
        if compute_capacities and not isinstance(compute_capacities, list):
            raise TypeError("Expected argument 'compute_capacities' to be a list")
        pulumi.set(__self__, "compute_capacities", compute_capacities)
        if cpu_guaranteed and not isinstance(cpu_guaranteed, float):
            raise TypeError("Expected argument 'cpu_guaranteed' to be a float")
        pulumi.set(__self__, "cpu_guaranteed", cpu_guaranteed)
        if cpu_speed and not isinstance(cpu_speed, int):
            raise TypeError("Expected argument 'cpu_speed' to be a int")
        pulumi.set(__self__, "cpu_speed", cpu_speed)
        if default_compute_policy_id and not isinstance(default_compute_policy_id, str):
            raise TypeError("Expected argument 'default_compute_policy_id' to be a str")
        pulumi.set(__self__, "default_compute_policy_id", default_compute_policy_id)
        if default_vm_sizing_policy_id and not isinstance(default_vm_sizing_policy_id, str):
            raise TypeError("Expected argument 'default_vm_sizing_policy_id' to be a str")
        if default_vm_sizing_policy_id is not None:
            warnings.warn("""Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""", DeprecationWarning)
            pulumi.log.warn("""default_vm_sizing_policy_id is deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""")

        pulumi.set(__self__, "default_vm_sizing_policy_id", default_vm_sizing_policy_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_cluster_id and not isinstance(edge_cluster_id, str):
            raise TypeError("Expected argument 'edge_cluster_id' to be a str")
        pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if elasticity and not isinstance(elasticity, bool):
            raise TypeError("Expected argument 'elasticity' to be a bool")
        pulumi.set(__self__, "elasticity", elasticity)
        if enable_fast_provisioning and not isinstance(enable_fast_provisioning, bool):
            raise TypeError("Expected argument 'enable_fast_provisioning' to be a bool")
        pulumi.set(__self__, "enable_fast_provisioning", enable_fast_provisioning)
        if enable_thin_provisioning and not isinstance(enable_thin_provisioning, bool):
            raise TypeError("Expected argument 'enable_thin_provisioning' to be a bool")
        pulumi.set(__self__, "enable_thin_provisioning", enable_thin_provisioning)
        if enable_vm_discovery and not isinstance(enable_vm_discovery, bool):
            raise TypeError("Expected argument 'enable_vm_discovery' to be a bool")
        pulumi.set(__self__, "enable_vm_discovery", enable_vm_discovery)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_vm_memory_overhead and not isinstance(include_vm_memory_overhead, bool):
            raise TypeError("Expected argument 'include_vm_memory_overhead' to be a bool")
        pulumi.set(__self__, "include_vm_memory_overhead", include_vm_memory_overhead)
        if memory_guaranteed and not isinstance(memory_guaranteed, float):
            raise TypeError("Expected argument 'memory_guaranteed' to be a float")
        pulumi.set(__self__, "memory_guaranteed", memory_guaranteed)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_pool_name and not isinstance(network_pool_name, str):
            raise TypeError("Expected argument 'network_pool_name' to be a str")
        pulumi.set(__self__, "network_pool_name", network_pool_name)
        if network_quota and not isinstance(network_quota, int):
            raise TypeError("Expected argument 'network_quota' to be a int")
        pulumi.set(__self__, "network_quota", network_quota)
        if nic_quota and not isinstance(nic_quota, int):
            raise TypeError("Expected argument 'nic_quota' to be a int")
        pulumi.set(__self__, "nic_quota", nic_quota)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if provider_vdc_name and not isinstance(provider_vdc_name, str):
            raise TypeError("Expected argument 'provider_vdc_name' to be a str")
        pulumi.set(__self__, "provider_vdc_name", provider_vdc_name)
        if storage_profiles and not isinstance(storage_profiles, list):
            raise TypeError("Expected argument 'storage_profiles' to be a list")
        pulumi.set(__self__, "storage_profiles", storage_profiles)
        if vm_placement_policy_ids and not isinstance(vm_placement_policy_ids, list):
            raise TypeError("Expected argument 'vm_placement_policy_ids' to be a list")
        pulumi.set(__self__, "vm_placement_policy_ids", vm_placement_policy_ids)
        if vm_quota and not isinstance(vm_quota, int):
            raise TypeError("Expected argument 'vm_quota' to be a int")
        pulumi.set(__self__, "vm_quota", vm_quota)
        if vm_sizing_policy_ids and not isinstance(vm_sizing_policy_ids, list):
            raise TypeError("Expected argument 'vm_sizing_policy_ids' to be a list")
        pulumi.set(__self__, "vm_sizing_policy_ids", vm_sizing_policy_ids)

    @property
    @pulumi.getter(name="allocationModel")
    def allocation_model(self) -> str:
        return pulumi.get(self, "allocation_model")

    @property
    @pulumi.getter(name="allowOverCommit")
    def allow_over_commit(self) -> bool:
        return pulumi.get(self, "allow_over_commit")

    @property
    @pulumi.getter(name="computeCapacities")
    def compute_capacities(self) -> Sequence['outputs.GetOrgVdcComputeCapacityResult']:
        return pulumi.get(self, "compute_capacities")

    @property
    @pulumi.getter(name="cpuGuaranteed")
    def cpu_guaranteed(self) -> float:
        return pulumi.get(self, "cpu_guaranteed")

    @property
    @pulumi.getter(name="cpuSpeed")
    def cpu_speed(self) -> int:
        return pulumi.get(self, "cpu_speed")

    @property
    @pulumi.getter(name="defaultComputePolicyId")
    def default_compute_policy_id(self) -> str:
        return pulumi.get(self, "default_compute_policy_id")

    @property
    @pulumi.getter(name="defaultVmSizingPolicyId")
    def default_vm_sizing_policy_id(self) -> str:
        return pulumi.get(self, "default_vm_sizing_policy_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> str:
        return pulumi.get(self, "edge_cluster_id")

    @property
    @pulumi.getter
    def elasticity(self) -> bool:
        return pulumi.get(self, "elasticity")

    @property
    @pulumi.getter(name="enableFastProvisioning")
    def enable_fast_provisioning(self) -> bool:
        return pulumi.get(self, "enable_fast_provisioning")

    @property
    @pulumi.getter(name="enableThinProvisioning")
    def enable_thin_provisioning(self) -> bool:
        return pulumi.get(self, "enable_thin_provisioning")

    @property
    @pulumi.getter(name="enableVmDiscovery")
    def enable_vm_discovery(self) -> bool:
        return pulumi.get(self, "enable_vm_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeVmMemoryOverhead")
    def include_vm_memory_overhead(self) -> bool:
        return pulumi.get(self, "include_vm_memory_overhead")

    @property
    @pulumi.getter(name="memoryGuaranteed")
    def memory_guaranteed(self) -> float:
        return pulumi.get(self, "memory_guaranteed")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetOrgVdcMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> str:
        return pulumi.get(self, "network_pool_name")

    @property
    @pulumi.getter(name="networkQuota")
    def network_quota(self) -> int:
        return pulumi.get(self, "network_quota")

    @property
    @pulumi.getter(name="nicQuota")
    def nic_quota(self) -> int:
        return pulumi.get(self, "nic_quota")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="providerVdcName")
    def provider_vdc_name(self) -> str:
        return pulumi.get(self, "provider_vdc_name")

    @property
    @pulumi.getter(name="storageProfiles")
    def storage_profiles(self) -> Sequence['outputs.GetOrgVdcStorageProfileResult']:
        return pulumi.get(self, "storage_profiles")

    @property
    @pulumi.getter(name="vmPlacementPolicyIds")
    def vm_placement_policy_ids(self) -> Sequence[str]:
        return pulumi.get(self, "vm_placement_policy_ids")

    @property
    @pulumi.getter(name="vmQuota")
    def vm_quota(self) -> int:
        return pulumi.get(self, "vm_quota")

    @property
    @pulumi.getter(name="vmSizingPolicyIds")
    def vm_sizing_policy_ids(self) -> Sequence[str]:
        return pulumi.get(self, "vm_sizing_policy_ids")


class AwaitableGetOrgVdcResult(GetOrgVdcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgVdcResult(
            allocation_model=self.allocation_model,
            allow_over_commit=self.allow_over_commit,
            compute_capacities=self.compute_capacities,
            cpu_guaranteed=self.cpu_guaranteed,
            cpu_speed=self.cpu_speed,
            default_compute_policy_id=self.default_compute_policy_id,
            default_vm_sizing_policy_id=self.default_vm_sizing_policy_id,
            description=self.description,
            edge_cluster_id=self.edge_cluster_id,
            elasticity=self.elasticity,
            enable_fast_provisioning=self.enable_fast_provisioning,
            enable_thin_provisioning=self.enable_thin_provisioning,
            enable_vm_discovery=self.enable_vm_discovery,
            enabled=self.enabled,
            id=self.id,
            include_vm_memory_overhead=self.include_vm_memory_overhead,
            memory_guaranteed=self.memory_guaranteed,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            network_pool_name=self.network_pool_name,
            network_quota=self.network_quota,
            nic_quota=self.nic_quota,
            org=self.org,
            provider_vdc_name=self.provider_vdc_name,
            storage_profiles=self.storage_profiles,
            vm_placement_policy_ids=self.vm_placement_policy_ids,
            vm_quota=self.vm_quota,
            vm_sizing_policy_ids=self.vm_sizing_policy_ids)


def get_org_vdc(metadata_entries: Optional[Sequence[pulumi.InputType['GetOrgVdcMetadataEntryArgs']]] = None,
                name: Optional[str] = None,
                org: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgVdcResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['metadataEntries'] = metadata_entries
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrgVdc:getOrgVdc', __args__, opts=opts, typ=GetOrgVdcResult).value

    return AwaitableGetOrgVdcResult(
        allocation_model=__ret__.allocation_model,
        allow_over_commit=__ret__.allow_over_commit,
        compute_capacities=__ret__.compute_capacities,
        cpu_guaranteed=__ret__.cpu_guaranteed,
        cpu_speed=__ret__.cpu_speed,
        default_compute_policy_id=__ret__.default_compute_policy_id,
        default_vm_sizing_policy_id=__ret__.default_vm_sizing_policy_id,
        description=__ret__.description,
        edge_cluster_id=__ret__.edge_cluster_id,
        elasticity=__ret__.elasticity,
        enable_fast_provisioning=__ret__.enable_fast_provisioning,
        enable_thin_provisioning=__ret__.enable_thin_provisioning,
        enable_vm_discovery=__ret__.enable_vm_discovery,
        enabled=__ret__.enabled,
        id=__ret__.id,
        include_vm_memory_overhead=__ret__.include_vm_memory_overhead,
        memory_guaranteed=__ret__.memory_guaranteed,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        network_pool_name=__ret__.network_pool_name,
        network_quota=__ret__.network_quota,
        nic_quota=__ret__.nic_quota,
        org=__ret__.org,
        provider_vdc_name=__ret__.provider_vdc_name,
        storage_profiles=__ret__.storage_profiles,
        vm_placement_policy_ids=__ret__.vm_placement_policy_ids,
        vm_quota=__ret__.vm_quota,
        vm_sizing_policy_ids=__ret__.vm_sizing_policy_ids)


@_utilities.lift_output_func(get_org_vdc)
def get_org_vdc_output(metadata_entries: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetOrgVdcMetadataEntryArgs']]]]] = None,
                       name: Optional[pulumi.Input[str]] = None,
                       org: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrgVdcResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
