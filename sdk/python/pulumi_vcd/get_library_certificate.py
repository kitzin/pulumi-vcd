# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetLibraryCertificateResult',
    'AwaitableGetLibraryCertificateResult',
    'get_library_certificate',
    'get_library_certificate_output',
]

@pulumi.output_type
class GetLibraryCertificateResult:
    """
    A collection of values returned by getLibraryCertificate.
    """
    def __init__(__self__, alias=None, certificate=None, description=None, id=None, org=None):
        if alias and not isinstance(alias, str):
            raise TypeError("Expected argument 'alias' to be a str")
        pulumi.set(__self__, "alias", alias)
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")


class AwaitableGetLibraryCertificateResult(GetLibraryCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLibraryCertificateResult(
            alias=self.alias,
            certificate=self.certificate,
            description=self.description,
            id=self.id,
            org=self.org)


def get_library_certificate(alias: Optional[str] = None,
                            certificate: Optional[str] = None,
                            description: Optional[str] = None,
                            id: Optional[str] = None,
                            org: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLibraryCertificateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['alias'] = alias
    __args__['certificate'] = certificate
    __args__['description'] = description
    __args__['id'] = id
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getLibraryCertificate:getLibraryCertificate', __args__, opts=opts, typ=GetLibraryCertificateResult).value

    return AwaitableGetLibraryCertificateResult(
        alias=__ret__.alias,
        certificate=__ret__.certificate,
        description=__ret__.description,
        id=__ret__.id,
        org=__ret__.org)


@_utilities.lift_output_func(get_library_certificate)
def get_library_certificate_output(alias: Optional[pulumi.Input[Optional[str]]] = None,
                                   certificate: Optional[pulumi.Input[Optional[str]]] = None,
                                   description: Optional[pulumi.Input[Optional[str]]] = None,
                                   id: Optional[pulumi.Input[Optional[str]]] = None,
                                   org: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLibraryCertificateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
