# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNsxtNetworkImportedResult',
    'AwaitableGetNsxtNetworkImportedResult',
    'get_nsxt_network_imported',
    'get_nsxt_network_imported_output',
]

@pulumi.output_type
class GetNsxtNetworkImportedResult:
    """
    A collection of values returned by getNsxtNetworkImported.
    """
    def __init__(__self__, description=None, dns1=None, dns2=None, dns_suffix=None, filter=None, gateway=None, id=None, name=None, nsxt_logical_switch_id=None, org=None, owner_id=None, prefix_length=None, static_ip_pools=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns1 and not isinstance(dns1, str):
            raise TypeError("Expected argument 'dns1' to be a str")
        pulumi.set(__self__, "dns1", dns1)
        if dns2 and not isinstance(dns2, str):
            raise TypeError("Expected argument 'dns2' to be a str")
        pulumi.set(__self__, "dns2", dns2)
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nsxt_logical_switch_id and not isinstance(nsxt_logical_switch_id, str):
            raise TypeError("Expected argument 'nsxt_logical_switch_id' to be a str")
        pulumi.set(__self__, "nsxt_logical_switch_id", nsxt_logical_switch_id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if prefix_length and not isinstance(prefix_length, int):
            raise TypeError("Expected argument 'prefix_length' to be a int")
        pulumi.set(__self__, "prefix_length", prefix_length)
        if static_ip_pools and not isinstance(static_ip_pools, list):
            raise TypeError("Expected argument 'static_ip_pools' to be a list")
        pulumi.set(__self__, "static_ip_pools", static_ip_pools)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")

        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetNsxtNetworkImportedFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxtLogicalSwitchId")
    def nsxt_logical_switch_id(self) -> str:
        return pulumi.get(self, "nsxt_logical_switch_id")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Sequence['outputs.GetNsxtNetworkImportedStaticIpPoolResult']:
        return pulumi.get(self, "static_ip_pools")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxtNetworkImportedResult(GetNsxtNetworkImportedResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtNetworkImportedResult(
            description=self.description,
            dns1=self.dns1,
            dns2=self.dns2,
            dns_suffix=self.dns_suffix,
            filter=self.filter,
            gateway=self.gateway,
            id=self.id,
            name=self.name,
            nsxt_logical_switch_id=self.nsxt_logical_switch_id,
            org=self.org,
            owner_id=self.owner_id,
            prefix_length=self.prefix_length,
            static_ip_pools=self.static_ip_pools,
            vdc=self.vdc)


def get_nsxt_network_imported(filter: Optional[pulumi.InputType['GetNsxtNetworkImportedFilterArgs']] = None,
                              name: Optional[str] = None,
                              org: Optional[str] = None,
                              owner_id: Optional[str] = None,
                              vdc: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtNetworkImportedResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    __args__['ownerId'] = owner_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtNetworkImported:getNsxtNetworkImported', __args__, opts=opts, typ=GetNsxtNetworkImportedResult).value

    return AwaitableGetNsxtNetworkImportedResult(
        description=__ret__.description,
        dns1=__ret__.dns1,
        dns2=__ret__.dns2,
        dns_suffix=__ret__.dns_suffix,
        filter=__ret__.filter,
        gateway=__ret__.gateway,
        id=__ret__.id,
        name=__ret__.name,
        nsxt_logical_switch_id=__ret__.nsxt_logical_switch_id,
        org=__ret__.org,
        owner_id=__ret__.owner_id,
        prefix_length=__ret__.prefix_length,
        static_ip_pools=__ret__.static_ip_pools,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_nsxt_network_imported)
def get_nsxt_network_imported_output(filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetNsxtNetworkImportedFilterArgs']]]] = None,
                                     name: Optional[pulumi.Input[Optional[str]]] = None,
                                     org: Optional[pulumi.Input[Optional[str]]] = None,
                                     owner_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtNetworkImportedResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
