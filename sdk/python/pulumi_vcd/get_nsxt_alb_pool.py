# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtAlbPoolResult',
    'AwaitableGetNsxtAlbPoolResult',
    'get_nsxt_alb_pool',
    'get_nsxt_alb_pool_output',
]

@pulumi.output_type
class GetNsxtAlbPoolResult:
    """
    A collection of values returned by getNsxtAlbPool.
    """
    def __init__(__self__, algorithm=None, associated_virtual_service_ids=None, associated_virtual_services=None, ca_certificate_ids=None, cn_check_enabled=None, default_port=None, description=None, domain_names=None, edge_gateway_id=None, enabled=None, enabled_member_count=None, graceful_timeout_period=None, health_message=None, health_monitors=None, id=None, member_count=None, members=None, name=None, org=None, passive_monitoring_enabled=None, persistence_profiles=None, up_member_count=None, vdc=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if associated_virtual_service_ids and not isinstance(associated_virtual_service_ids, list):
            raise TypeError("Expected argument 'associated_virtual_service_ids' to be a list")
        pulumi.set(__self__, "associated_virtual_service_ids", associated_virtual_service_ids)
        if associated_virtual_services and not isinstance(associated_virtual_services, list):
            raise TypeError("Expected argument 'associated_virtual_services' to be a list")
        pulumi.set(__self__, "associated_virtual_services", associated_virtual_services)
        if ca_certificate_ids and not isinstance(ca_certificate_ids, list):
            raise TypeError("Expected argument 'ca_certificate_ids' to be a list")
        pulumi.set(__self__, "ca_certificate_ids", ca_certificate_ids)
        if cn_check_enabled and not isinstance(cn_check_enabled, bool):
            raise TypeError("Expected argument 'cn_check_enabled' to be a bool")
        pulumi.set(__self__, "cn_check_enabled", cn_check_enabled)
        if default_port and not isinstance(default_port, int):
            raise TypeError("Expected argument 'default_port' to be a int")
        pulumi.set(__self__, "default_port", default_port)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_names and not isinstance(domain_names, list):
            raise TypeError("Expected argument 'domain_names' to be a list")
        pulumi.set(__self__, "domain_names", domain_names)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if enabled_member_count and not isinstance(enabled_member_count, int):
            raise TypeError("Expected argument 'enabled_member_count' to be a int")
        pulumi.set(__self__, "enabled_member_count", enabled_member_count)
        if graceful_timeout_period and not isinstance(graceful_timeout_period, int):
            raise TypeError("Expected argument 'graceful_timeout_period' to be a int")
        pulumi.set(__self__, "graceful_timeout_period", graceful_timeout_period)
        if health_message and not isinstance(health_message, str):
            raise TypeError("Expected argument 'health_message' to be a str")
        pulumi.set(__self__, "health_message", health_message)
        if health_monitors and not isinstance(health_monitors, list):
            raise TypeError("Expected argument 'health_monitors' to be a list")
        pulumi.set(__self__, "health_monitors", health_monitors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if member_count and not isinstance(member_count, int):
            raise TypeError("Expected argument 'member_count' to be a int")
        pulumi.set(__self__, "member_count", member_count)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if passive_monitoring_enabled and not isinstance(passive_monitoring_enabled, bool):
            raise TypeError("Expected argument 'passive_monitoring_enabled' to be a bool")
        pulumi.set(__self__, "passive_monitoring_enabled", passive_monitoring_enabled)
        if persistence_profiles and not isinstance(persistence_profiles, list):
            raise TypeError("Expected argument 'persistence_profiles' to be a list")
        pulumi.set(__self__, "persistence_profiles", persistence_profiles)
        if up_member_count and not isinstance(up_member_count, int):
            raise TypeError("Expected argument 'up_member_count' to be a int")
        pulumi.set(__self__, "up_member_count", up_member_count)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")

        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="associatedVirtualServiceIds")
    def associated_virtual_service_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "associated_virtual_service_ids")

    @property
    @pulumi.getter(name="associatedVirtualServices")
    def associated_virtual_services(self) -> Sequence[str]:
        return pulumi.get(self, "associated_virtual_services")

    @property
    @pulumi.getter(name="caCertificateIds")
    def ca_certificate_ids(self) -> Sequence[str]:
        return pulumi.get(self, "ca_certificate_ids")

    @property
    @pulumi.getter(name="cnCheckEnabled")
    def cn_check_enabled(self) -> bool:
        return pulumi.get(self, "cn_check_enabled")

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> int:
        return pulumi.get(self, "default_port")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Sequence[str]:
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enabledMemberCount")
    def enabled_member_count(self) -> int:
        return pulumi.get(self, "enabled_member_count")

    @property
    @pulumi.getter(name="gracefulTimeoutPeriod")
    def graceful_timeout_period(self) -> int:
        return pulumi.get(self, "graceful_timeout_period")

    @property
    @pulumi.getter(name="healthMessage")
    def health_message(self) -> str:
        return pulumi.get(self, "health_message")

    @property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Sequence['outputs.GetNsxtAlbPoolHealthMonitorResult']:
        return pulumi.get(self, "health_monitors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberCount")
    def member_count(self) -> int:
        return pulumi.get(self, "member_count")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetNsxtAlbPoolMemberResult']:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="passiveMonitoringEnabled")
    def passive_monitoring_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "passive_monitoring_enabled")

    @property
    @pulumi.getter(name="persistenceProfiles")
    def persistence_profiles(self) -> Sequence['outputs.GetNsxtAlbPoolPersistenceProfileResult']:
        return pulumi.get(self, "persistence_profiles")

    @property
    @pulumi.getter(name="upMemberCount")
    def up_member_count(self) -> int:
        return pulumi.get(self, "up_member_count")

    @property
    @pulumi.getter
    def vdc(self) -> str:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxtAlbPoolResult(GetNsxtAlbPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtAlbPoolResult(
            algorithm=self.algorithm,
            associated_virtual_service_ids=self.associated_virtual_service_ids,
            associated_virtual_services=self.associated_virtual_services,
            ca_certificate_ids=self.ca_certificate_ids,
            cn_check_enabled=self.cn_check_enabled,
            default_port=self.default_port,
            description=self.description,
            domain_names=self.domain_names,
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            enabled_member_count=self.enabled_member_count,
            graceful_timeout_period=self.graceful_timeout_period,
            health_message=self.health_message,
            health_monitors=self.health_monitors,
            id=self.id,
            member_count=self.member_count,
            members=self.members,
            name=self.name,
            org=self.org,
            passive_monitoring_enabled=self.passive_monitoring_enabled,
            persistence_profiles=self.persistence_profiles,
            up_member_count=self.up_member_count,
            vdc=self.vdc)


def get_nsxt_alb_pool(associated_virtual_service_ids: Optional[Sequence[str]] = None,
                      edge_gateway_id: Optional[str] = None,
                      name: Optional[str] = None,
                      org: Optional[str] = None,
                      passive_monitoring_enabled: Optional[bool] = None,
                      vdc: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtAlbPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['associatedVirtualServiceIds'] = associated_virtual_service_ids
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['name'] = name
    __args__['org'] = org
    __args__['passiveMonitoringEnabled'] = passive_monitoring_enabled
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtAlbPool:getNsxtAlbPool', __args__, opts=opts, typ=GetNsxtAlbPoolResult).value

    return AwaitableGetNsxtAlbPoolResult(
        algorithm=__ret__.algorithm,
        associated_virtual_service_ids=__ret__.associated_virtual_service_ids,
        associated_virtual_services=__ret__.associated_virtual_services,
        ca_certificate_ids=__ret__.ca_certificate_ids,
        cn_check_enabled=__ret__.cn_check_enabled,
        default_port=__ret__.default_port,
        description=__ret__.description,
        domain_names=__ret__.domain_names,
        edge_gateway_id=__ret__.edge_gateway_id,
        enabled=__ret__.enabled,
        enabled_member_count=__ret__.enabled_member_count,
        graceful_timeout_period=__ret__.graceful_timeout_period,
        health_message=__ret__.health_message,
        health_monitors=__ret__.health_monitors,
        id=__ret__.id,
        member_count=__ret__.member_count,
        members=__ret__.members,
        name=__ret__.name,
        org=__ret__.org,
        passive_monitoring_enabled=__ret__.passive_monitoring_enabled,
        persistence_profiles=__ret__.persistence_profiles,
        up_member_count=__ret__.up_member_count,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_nsxt_alb_pool)
def get_nsxt_alb_pool_output(associated_virtual_service_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             edge_gateway_id: Optional[pulumi.Input[str]] = None,
                             name: Optional[pulumi.Input[str]] = None,
                             org: Optional[pulumi.Input[Optional[str]]] = None,
                             passive_monitoring_enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                             vdc: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtAlbPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
