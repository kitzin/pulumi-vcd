# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgVdcArgs', 'OrgVdc']

@pulumi.input_type
class OrgVdcArgs:
    def __init__(__self__, *,
                 allocation_model: pulumi.Input[str],
                 compute_capacity: pulumi.Input['OrgVdcComputeCapacityArgs'],
                 delete_force: pulumi.Input[bool],
                 delete_recursive: pulumi.Input[bool],
                 provider_vdc_name: pulumi.Input[str],
                 storage_profiles: pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]],
                 allow_over_commit: Optional[pulumi.Input[bool]] = None,
                 cpu_guaranteed: Optional[pulumi.Input[float]] = None,
                 cpu_speed: Optional[pulumi.Input[int]] = None,
                 default_compute_policy_id: Optional[pulumi.Input[str]] = None,
                 default_vm_sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 elasticity: Optional[pulumi.Input[bool]] = None,
                 enable_fast_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_thin_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_vm_discovery: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 include_vm_memory_overhead: Optional[pulumi.Input[bool]] = None,
                 memory_guaranteed: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_name: Optional[pulumi.Input[str]] = None,
                 network_quota: Optional[pulumi.Input[int]] = None,
                 nic_quota: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 vm_placement_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_quota: Optional[pulumi.Input[int]] = None,
                 vm_sizing_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a OrgVdc resource.
        :param pulumi.Input[str] allocation_model: The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        :param pulumi.Input['OrgVdcComputeCapacityArgs'] compute_capacity: The compute capacity allocated to this VDC.
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[str] provider_vdc_name: A reference to the Provider VDC from which this organization VDC is provisioned.
        :param pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]] storage_profiles: Storage profiles supported by this VDC.
        :param pulumi.Input[bool] allow_over_commit: Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
               ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        :param pulumi.Input[float] cpu_guaranteed: Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
               75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
               element is empty, vCD sets a value
        :param pulumi.Input[int] cpu_speed: Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
               consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
               AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        :param pulumi.Input[str] default_compute_policy_id: ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[str] default_vm_sizing_policy_id: ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[str] edge_cluster_id: ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        :param pulumi.Input[bool] elasticity: Set to true to indicate if the Flex VDC is to be elastic.
        :param pulumi.Input[bool] enable_fast_provisioning: Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
               can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
               provisioning, all provisioning operations will result in full clones.
        :param pulumi.Input[bool] enable_thin_provisioning: Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
               provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        :param pulumi.Input[bool] enable_vm_discovery: True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
               behaviour depends on enablement at the organization level and at the system level.
        :param pulumi.Input[bool] enabled: True if this VDC is enabled for use by the organization VDCs. Default is true.
        :param pulumi.Input[bool] include_vm_memory_overhead: Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        :param pulumi.Input[float] memory_guaranteed: Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
               then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
               Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for Org VDC metadata
        :param pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]] metadata_entries: Metadata entries for the given VDC
        :param pulumi.Input[str] network_pool_name: The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        :param pulumi.Input[int] network_quota: Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
               deployed.
        :param pulumi.Input[int] nic_quota: Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_placement_policy_ids: Set of VM Placement Policy IDs
        :param pulumi.Input[int] vm_quota: The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
               templates. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_sizing_policy_ids: Set of VM Sizing Policy IDs
        """
        pulumi.set(__self__, "allocation_model", allocation_model)
        pulumi.set(__self__, "compute_capacity", compute_capacity)
        pulumi.set(__self__, "delete_force", delete_force)
        pulumi.set(__self__, "delete_recursive", delete_recursive)
        pulumi.set(__self__, "provider_vdc_name", provider_vdc_name)
        pulumi.set(__self__, "storage_profiles", storage_profiles)
        if allow_over_commit is not None:
            pulumi.set(__self__, "allow_over_commit", allow_over_commit)
        if cpu_guaranteed is not None:
            pulumi.set(__self__, "cpu_guaranteed", cpu_guaranteed)
        if cpu_speed is not None:
            pulumi.set(__self__, "cpu_speed", cpu_speed)
        if default_compute_policy_id is not None:
            pulumi.set(__self__, "default_compute_policy_id", default_compute_policy_id)
        if default_vm_sizing_policy_id is not None:
            warnings.warn("""Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""", DeprecationWarning)
            pulumi.log.warn("""default_vm_sizing_policy_id is deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""")
        if default_vm_sizing_policy_id is not None:
            pulumi.set(__self__, "default_vm_sizing_policy_id", default_vm_sizing_policy_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_cluster_id is not None:
            pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if elasticity is not None:
            pulumi.set(__self__, "elasticity", elasticity)
        if enable_fast_provisioning is not None:
            pulumi.set(__self__, "enable_fast_provisioning", enable_fast_provisioning)
        if enable_thin_provisioning is not None:
            pulumi.set(__self__, "enable_thin_provisioning", enable_thin_provisioning)
        if enable_vm_discovery is not None:
            pulumi.set(__self__, "enable_vm_discovery", enable_vm_discovery)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if include_vm_memory_overhead is not None:
            pulumi.set(__self__, "include_vm_memory_overhead", include_vm_memory_overhead)
        if memory_guaranteed is not None:
            pulumi.set(__self__, "memory_guaranteed", memory_guaranteed)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_pool_name is not None:
            pulumi.set(__self__, "network_pool_name", network_pool_name)
        if network_quota is not None:
            pulumi.set(__self__, "network_quota", network_quota)
        if nic_quota is not None:
            pulumi.set(__self__, "nic_quota", nic_quota)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if vm_placement_policy_ids is not None:
            pulumi.set(__self__, "vm_placement_policy_ids", vm_placement_policy_ids)
        if vm_quota is not None:
            pulumi.set(__self__, "vm_quota", vm_quota)
        if vm_sizing_policy_ids is not None:
            pulumi.set(__self__, "vm_sizing_policy_ids", vm_sizing_policy_ids)

    @property
    @pulumi.getter(name="allocationModel")
    def allocation_model(self) -> pulumi.Input[str]:
        """
        The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        """
        return pulumi.get(self, "allocation_model")

    @allocation_model.setter
    def allocation_model(self, value: pulumi.Input[str]):
        pulumi.set(self, "allocation_model", value)

    @property
    @pulumi.getter(name="computeCapacity")
    def compute_capacity(self) -> pulumi.Input['OrgVdcComputeCapacityArgs']:
        """
        The compute capacity allocated to this VDC.
        """
        return pulumi.get(self, "compute_capacity")

    @compute_capacity.setter
    def compute_capacity(self, value: pulumi.Input['OrgVdcComputeCapacityArgs']):
        pulumi.set(self, "compute_capacity", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> pulumi.Input[bool]:
        """
        When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> pulumi.Input[bool]:
        """
        When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
        normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter(name="providerVdcName")
    def provider_vdc_name(self) -> pulumi.Input[str]:
        """
        A reference to the Provider VDC from which this organization VDC is provisioned.
        """
        return pulumi.get(self, "provider_vdc_name")

    @provider_vdc_name.setter
    def provider_vdc_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_vdc_name", value)

    @property
    @pulumi.getter(name="storageProfiles")
    def storage_profiles(self) -> pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]]:
        """
        Storage profiles supported by this VDC.
        """
        return pulumi.get(self, "storage_profiles")

    @storage_profiles.setter
    def storage_profiles(self, value: pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]]):
        pulumi.set(self, "storage_profiles", value)

    @property
    @pulumi.getter(name="allowOverCommit")
    def allow_over_commit(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
        ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        """
        return pulumi.get(self, "allow_over_commit")

    @allow_over_commit.setter
    def allow_over_commit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_over_commit", value)

    @property
    @pulumi.getter(name="cpuGuaranteed")
    def cpu_guaranteed(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
        75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
        element is empty, vCD sets a value
        """
        return pulumi.get(self, "cpu_guaranteed")

    @cpu_guaranteed.setter
    def cpu_guaranteed(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu_guaranteed", value)

    @property
    @pulumi.getter(name="cpuSpeed")
    def cpu_speed(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
        consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
        AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        """
        return pulumi.get(self, "cpu_speed")

    @cpu_speed.setter
    def cpu_speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_speed", value)

    @property
    @pulumi.getter(name="defaultComputePolicyId")
    def default_compute_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        """
        return pulumi.get(self, "default_compute_policy_id")

    @default_compute_policy_id.setter
    def default_compute_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_compute_policy_id", value)

    @property
    @pulumi.getter(name="defaultVmSizingPolicyId")
    def default_vm_sizing_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        """
        return pulumi.get(self, "default_vm_sizing_policy_id")

    @default_vm_sizing_policy_id.setter
    def default_vm_sizing_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_vm_sizing_policy_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        """
        return pulumi.get(self, "edge_cluster_id")

    @edge_cluster_id.setter
    def edge_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_cluster_id", value)

    @property
    @pulumi.getter
    def elasticity(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to indicate if the Flex VDC is to be elastic.
        """
        return pulumi.get(self, "elasticity")

    @elasticity.setter
    def elasticity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticity", value)

    @property
    @pulumi.getter(name="enableFastProvisioning")
    def enable_fast_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
        can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
        provisioning, all provisioning operations will result in full clones.
        """
        return pulumi.get(self, "enable_fast_provisioning")

    @enable_fast_provisioning.setter
    def enable_fast_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_fast_provisioning", value)

    @property
    @pulumi.getter(name="enableThinProvisioning")
    def enable_thin_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
        provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        """
        return pulumi.get(self, "enable_thin_provisioning")

    @enable_thin_provisioning.setter
    def enable_thin_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_thin_provisioning", value)

    @property
    @pulumi.getter(name="enableVmDiscovery")
    def enable_vm_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
        behaviour depends on enablement at the organization level and at the system level.
        """
        return pulumi.get(self, "enable_vm_discovery")

    @enable_vm_discovery.setter
    def enable_vm_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vm_discovery", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this VDC is enabled for use by the organization VDCs. Default is true.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="includeVmMemoryOverhead")
    def include_vm_memory_overhead(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        """
        return pulumi.get(self, "include_vm_memory_overhead")

    @include_vm_memory_overhead.setter
    def include_vm_memory_overhead(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_vm_memory_overhead", value)

    @property
    @pulumi.getter(name="memoryGuaranteed")
    def memory_guaranteed(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
        then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
        Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        """
        return pulumi.get(self, "memory_guaranteed")

    @memory_guaranteed.setter
    def memory_guaranteed(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_guaranteed", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key and value pairs for Org VDC metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]]]:
        """
        Metadata entries for the given VDC
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        """
        return pulumi.get(self, "network_pool_name")

    @network_pool_name.setter
    def network_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pool_name", value)

    @property
    @pulumi.getter(name="networkQuota")
    def network_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
        deployed.
        """
        return pulumi.get(self, "network_quota")

    @network_quota.setter
    def network_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_quota", value)

    @property
    @pulumi.getter(name="nicQuota")
    def nic_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        """
        return pulumi.get(self, "nic_quota")

    @nic_quota.setter
    def nic_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nic_quota", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="vmPlacementPolicyIds")
    def vm_placement_policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of VM Placement Policy IDs
        """
        return pulumi.get(self, "vm_placement_policy_ids")

    @vm_placement_policy_ids.setter
    def vm_placement_policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_placement_policy_ids", value)

    @property
    @pulumi.getter(name="vmQuota")
    def vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
        templates. Defaults to 0, which specifies an unlimited number.
        """
        return pulumi.get(self, "vm_quota")

    @vm_quota.setter
    def vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vm_quota", value)

    @property
    @pulumi.getter(name="vmSizingPolicyIds")
    def vm_sizing_policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of VM Sizing Policy IDs
        """
        return pulumi.get(self, "vm_sizing_policy_ids")

    @vm_sizing_policy_ids.setter
    def vm_sizing_policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_sizing_policy_ids", value)


@pulumi.input_type
class _OrgVdcState:
    def __init__(__self__, *,
                 allocation_model: Optional[pulumi.Input[str]] = None,
                 allow_over_commit: Optional[pulumi.Input[bool]] = None,
                 compute_capacity: Optional[pulumi.Input['OrgVdcComputeCapacityArgs']] = None,
                 cpu_guaranteed: Optional[pulumi.Input[float]] = None,
                 cpu_speed: Optional[pulumi.Input[int]] = None,
                 default_compute_policy_id: Optional[pulumi.Input[str]] = None,
                 default_vm_sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 elasticity: Optional[pulumi.Input[bool]] = None,
                 enable_fast_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_thin_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_vm_discovery: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 include_vm_memory_overhead: Optional[pulumi.Input[bool]] = None,
                 memory_guaranteed: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_name: Optional[pulumi.Input[str]] = None,
                 network_quota: Optional[pulumi.Input[int]] = None,
                 nic_quota: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 provider_vdc_name: Optional[pulumi.Input[str]] = None,
                 storage_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]]] = None,
                 vm_placement_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_quota: Optional[pulumi.Input[int]] = None,
                 vm_sizing_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering OrgVdc resources.
        :param pulumi.Input[str] allocation_model: The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        :param pulumi.Input[bool] allow_over_commit: Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
               ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        :param pulumi.Input['OrgVdcComputeCapacityArgs'] compute_capacity: The compute capacity allocated to this VDC.
        :param pulumi.Input[float] cpu_guaranteed: Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
               75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
               element is empty, vCD sets a value
        :param pulumi.Input[int] cpu_speed: Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
               consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
               AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        :param pulumi.Input[str] default_compute_policy_id: ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[str] default_vm_sizing_policy_id: ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[str] edge_cluster_id: ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        :param pulumi.Input[bool] elasticity: Set to true to indicate if the Flex VDC is to be elastic.
        :param pulumi.Input[bool] enable_fast_provisioning: Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
               can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
               provisioning, all provisioning operations will result in full clones.
        :param pulumi.Input[bool] enable_thin_provisioning: Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
               provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        :param pulumi.Input[bool] enable_vm_discovery: True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
               behaviour depends on enablement at the organization level and at the system level.
        :param pulumi.Input[bool] enabled: True if this VDC is enabled for use by the organization VDCs. Default is true.
        :param pulumi.Input[bool] include_vm_memory_overhead: Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        :param pulumi.Input[float] memory_guaranteed: Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
               then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
               Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for Org VDC metadata
        :param pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]] metadata_entries: Metadata entries for the given VDC
        :param pulumi.Input[str] network_pool_name: The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        :param pulumi.Input[int] network_quota: Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
               deployed.
        :param pulumi.Input[int] nic_quota: Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] provider_vdc_name: A reference to the Provider VDC from which this organization VDC is provisioned.
        :param pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]] storage_profiles: Storage profiles supported by this VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_placement_policy_ids: Set of VM Placement Policy IDs
        :param pulumi.Input[int] vm_quota: The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
               templates. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_sizing_policy_ids: Set of VM Sizing Policy IDs
        """
        if allocation_model is not None:
            pulumi.set(__self__, "allocation_model", allocation_model)
        if allow_over_commit is not None:
            pulumi.set(__self__, "allow_over_commit", allow_over_commit)
        if compute_capacity is not None:
            pulumi.set(__self__, "compute_capacity", compute_capacity)
        if cpu_guaranteed is not None:
            pulumi.set(__self__, "cpu_guaranteed", cpu_guaranteed)
        if cpu_speed is not None:
            pulumi.set(__self__, "cpu_speed", cpu_speed)
        if default_compute_policy_id is not None:
            pulumi.set(__self__, "default_compute_policy_id", default_compute_policy_id)
        if default_vm_sizing_policy_id is not None:
            warnings.warn("""Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""", DeprecationWarning)
            pulumi.log.warn("""default_vm_sizing_policy_id is deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""")
        if default_vm_sizing_policy_id is not None:
            pulumi.set(__self__, "default_vm_sizing_policy_id", default_vm_sizing_policy_id)
        if delete_force is not None:
            pulumi.set(__self__, "delete_force", delete_force)
        if delete_recursive is not None:
            pulumi.set(__self__, "delete_recursive", delete_recursive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_cluster_id is not None:
            pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if elasticity is not None:
            pulumi.set(__self__, "elasticity", elasticity)
        if enable_fast_provisioning is not None:
            pulumi.set(__self__, "enable_fast_provisioning", enable_fast_provisioning)
        if enable_thin_provisioning is not None:
            pulumi.set(__self__, "enable_thin_provisioning", enable_thin_provisioning)
        if enable_vm_discovery is not None:
            pulumi.set(__self__, "enable_vm_discovery", enable_vm_discovery)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if include_vm_memory_overhead is not None:
            pulumi.set(__self__, "include_vm_memory_overhead", include_vm_memory_overhead)
        if memory_guaranteed is not None:
            pulumi.set(__self__, "memory_guaranteed", memory_guaranteed)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_pool_name is not None:
            pulumi.set(__self__, "network_pool_name", network_pool_name)
        if network_quota is not None:
            pulumi.set(__self__, "network_quota", network_quota)
        if nic_quota is not None:
            pulumi.set(__self__, "nic_quota", nic_quota)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if provider_vdc_name is not None:
            pulumi.set(__self__, "provider_vdc_name", provider_vdc_name)
        if storage_profiles is not None:
            pulumi.set(__self__, "storage_profiles", storage_profiles)
        if vm_placement_policy_ids is not None:
            pulumi.set(__self__, "vm_placement_policy_ids", vm_placement_policy_ids)
        if vm_quota is not None:
            pulumi.set(__self__, "vm_quota", vm_quota)
        if vm_sizing_policy_ids is not None:
            pulumi.set(__self__, "vm_sizing_policy_ids", vm_sizing_policy_ids)

    @property
    @pulumi.getter(name="allocationModel")
    def allocation_model(self) -> Optional[pulumi.Input[str]]:
        """
        The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        """
        return pulumi.get(self, "allocation_model")

    @allocation_model.setter
    def allocation_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocation_model", value)

    @property
    @pulumi.getter(name="allowOverCommit")
    def allow_over_commit(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
        ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        """
        return pulumi.get(self, "allow_over_commit")

    @allow_over_commit.setter
    def allow_over_commit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_over_commit", value)

    @property
    @pulumi.getter(name="computeCapacity")
    def compute_capacity(self) -> Optional[pulumi.Input['OrgVdcComputeCapacityArgs']]:
        """
        The compute capacity allocated to this VDC.
        """
        return pulumi.get(self, "compute_capacity")

    @compute_capacity.setter
    def compute_capacity(self, value: Optional[pulumi.Input['OrgVdcComputeCapacityArgs']]):
        pulumi.set(self, "compute_capacity", value)

    @property
    @pulumi.getter(name="cpuGuaranteed")
    def cpu_guaranteed(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
        75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
        element is empty, vCD sets a value
        """
        return pulumi.get(self, "cpu_guaranteed")

    @cpu_guaranteed.setter
    def cpu_guaranteed(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu_guaranteed", value)

    @property
    @pulumi.getter(name="cpuSpeed")
    def cpu_speed(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
        consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
        AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        """
        return pulumi.get(self, "cpu_speed")

    @cpu_speed.setter
    def cpu_speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_speed", value)

    @property
    @pulumi.getter(name="defaultComputePolicyId")
    def default_compute_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        """
        return pulumi.get(self, "default_compute_policy_id")

    @default_compute_policy_id.setter
    def default_compute_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_compute_policy_id", value)

    @property
    @pulumi.getter(name="defaultVmSizingPolicyId")
    def default_vm_sizing_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        """
        return pulumi.get(self, "default_vm_sizing_policy_id")

    @default_vm_sizing_policy_id.setter
    def default_vm_sizing_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_vm_sizing_policy_id", value)

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @delete_force.setter
    def delete_force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_force", value)

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
        normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @delete_recursive.setter
    def delete_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_recursive", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        """
        return pulumi.get(self, "edge_cluster_id")

    @edge_cluster_id.setter
    def edge_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_cluster_id", value)

    @property
    @pulumi.getter
    def elasticity(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to indicate if the Flex VDC is to be elastic.
        """
        return pulumi.get(self, "elasticity")

    @elasticity.setter
    def elasticity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticity", value)

    @property
    @pulumi.getter(name="enableFastProvisioning")
    def enable_fast_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
        can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
        provisioning, all provisioning operations will result in full clones.
        """
        return pulumi.get(self, "enable_fast_provisioning")

    @enable_fast_provisioning.setter
    def enable_fast_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_fast_provisioning", value)

    @property
    @pulumi.getter(name="enableThinProvisioning")
    def enable_thin_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
        provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        """
        return pulumi.get(self, "enable_thin_provisioning")

    @enable_thin_provisioning.setter
    def enable_thin_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_thin_provisioning", value)

    @property
    @pulumi.getter(name="enableVmDiscovery")
    def enable_vm_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
        behaviour depends on enablement at the organization level and at the system level.
        """
        return pulumi.get(self, "enable_vm_discovery")

    @enable_vm_discovery.setter
    def enable_vm_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vm_discovery", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this VDC is enabled for use by the organization VDCs. Default is true.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="includeVmMemoryOverhead")
    def include_vm_memory_overhead(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        """
        return pulumi.get(self, "include_vm_memory_overhead")

    @include_vm_memory_overhead.setter
    def include_vm_memory_overhead(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_vm_memory_overhead", value)

    @property
    @pulumi.getter(name="memoryGuaranteed")
    def memory_guaranteed(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
        then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
        Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        """
        return pulumi.get(self, "memory_guaranteed")

    @memory_guaranteed.setter
    def memory_guaranteed(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_guaranteed", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key and value pairs for Org VDC metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]]]:
        """
        Metadata entries for the given VDC
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        """
        return pulumi.get(self, "network_pool_name")

    @network_pool_name.setter
    def network_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pool_name", value)

    @property
    @pulumi.getter(name="networkQuota")
    def network_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
        deployed.
        """
        return pulumi.get(self, "network_quota")

    @network_quota.setter
    def network_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_quota", value)

    @property
    @pulumi.getter(name="nicQuota")
    def nic_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        """
        return pulumi.get(self, "nic_quota")

    @nic_quota.setter
    def nic_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nic_quota", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="providerVdcName")
    def provider_vdc_name(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to the Provider VDC from which this organization VDC is provisioned.
        """
        return pulumi.get(self, "provider_vdc_name")

    @provider_vdc_name.setter
    def provider_vdc_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_vdc_name", value)

    @property
    @pulumi.getter(name="storageProfiles")
    def storage_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]]]:
        """
        Storage profiles supported by this VDC.
        """
        return pulumi.get(self, "storage_profiles")

    @storage_profiles.setter
    def storage_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgVdcStorageProfileArgs']]]]):
        pulumi.set(self, "storage_profiles", value)

    @property
    @pulumi.getter(name="vmPlacementPolicyIds")
    def vm_placement_policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of VM Placement Policy IDs
        """
        return pulumi.get(self, "vm_placement_policy_ids")

    @vm_placement_policy_ids.setter
    def vm_placement_policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_placement_policy_ids", value)

    @property
    @pulumi.getter(name="vmQuota")
    def vm_quota(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
        templates. Defaults to 0, which specifies an unlimited number.
        """
        return pulumi.get(self, "vm_quota")

    @vm_quota.setter
    def vm_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vm_quota", value)

    @property
    @pulumi.getter(name="vmSizingPolicyIds")
    def vm_sizing_policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of VM Sizing Policy IDs
        """
        return pulumi.get(self, "vm_sizing_policy_ids")

    @vm_sizing_policy_ids.setter
    def vm_sizing_policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_sizing_policy_ids", value)


class OrgVdc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_model: Optional[pulumi.Input[str]] = None,
                 allow_over_commit: Optional[pulumi.Input[bool]] = None,
                 compute_capacity: Optional[pulumi.Input[pulumi.InputType['OrgVdcComputeCapacityArgs']]] = None,
                 cpu_guaranteed: Optional[pulumi.Input[float]] = None,
                 cpu_speed: Optional[pulumi.Input[int]] = None,
                 default_compute_policy_id: Optional[pulumi.Input[str]] = None,
                 default_vm_sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 elasticity: Optional[pulumi.Input[bool]] = None,
                 enable_fast_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_thin_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_vm_discovery: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 include_vm_memory_overhead: Optional[pulumi.Input[bool]] = None,
                 memory_guaranteed: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcMetadataEntryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_name: Optional[pulumi.Input[str]] = None,
                 network_quota: Optional[pulumi.Input[int]] = None,
                 nic_quota: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 provider_vdc_name: Optional[pulumi.Input[str]] = None,
                 storage_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcStorageProfileArgs']]]]] = None,
                 vm_placement_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_quota: Optional[pulumi.Input[int]] = None,
                 vm_sizing_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a OrgVdc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allocation_model: The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        :param pulumi.Input[bool] allow_over_commit: Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
               ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        :param pulumi.Input[pulumi.InputType['OrgVdcComputeCapacityArgs']] compute_capacity: The compute capacity allocated to this VDC.
        :param pulumi.Input[float] cpu_guaranteed: Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
               75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
               element is empty, vCD sets a value
        :param pulumi.Input[int] cpu_speed: Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
               consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
               AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        :param pulumi.Input[str] default_compute_policy_id: ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[str] default_vm_sizing_policy_id: ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[str] edge_cluster_id: ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        :param pulumi.Input[bool] elasticity: Set to true to indicate if the Flex VDC is to be elastic.
        :param pulumi.Input[bool] enable_fast_provisioning: Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
               can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
               provisioning, all provisioning operations will result in full clones.
        :param pulumi.Input[bool] enable_thin_provisioning: Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
               provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        :param pulumi.Input[bool] enable_vm_discovery: True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
               behaviour depends on enablement at the organization level and at the system level.
        :param pulumi.Input[bool] enabled: True if this VDC is enabled for use by the organization VDCs. Default is true.
        :param pulumi.Input[bool] include_vm_memory_overhead: Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        :param pulumi.Input[float] memory_guaranteed: Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
               then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
               Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for Org VDC metadata
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcMetadataEntryArgs']]]] metadata_entries: Metadata entries for the given VDC
        :param pulumi.Input[str] network_pool_name: The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        :param pulumi.Input[int] network_quota: Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
               deployed.
        :param pulumi.Input[int] nic_quota: Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] provider_vdc_name: A reference to the Provider VDC from which this organization VDC is provisioned.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcStorageProfileArgs']]]] storage_profiles: Storage profiles supported by this VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_placement_policy_ids: Set of VM Placement Policy IDs
        :param pulumi.Input[int] vm_quota: The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
               templates. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_sizing_policy_ids: Set of VM Sizing Policy IDs
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgVdcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OrgVdc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgVdcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgVdcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_model: Optional[pulumi.Input[str]] = None,
                 allow_over_commit: Optional[pulumi.Input[bool]] = None,
                 compute_capacity: Optional[pulumi.Input[pulumi.InputType['OrgVdcComputeCapacityArgs']]] = None,
                 cpu_guaranteed: Optional[pulumi.Input[float]] = None,
                 cpu_speed: Optional[pulumi.Input[int]] = None,
                 default_compute_policy_id: Optional[pulumi.Input[str]] = None,
                 default_vm_sizing_policy_id: Optional[pulumi.Input[str]] = None,
                 delete_force: Optional[pulumi.Input[bool]] = None,
                 delete_recursive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_cluster_id: Optional[pulumi.Input[str]] = None,
                 elasticity: Optional[pulumi.Input[bool]] = None,
                 enable_fast_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_thin_provisioning: Optional[pulumi.Input[bool]] = None,
                 enable_vm_discovery: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 include_vm_memory_overhead: Optional[pulumi.Input[bool]] = None,
                 memory_guaranteed: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcMetadataEntryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_pool_name: Optional[pulumi.Input[str]] = None,
                 network_quota: Optional[pulumi.Input[int]] = None,
                 nic_quota: Optional[pulumi.Input[int]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 provider_vdc_name: Optional[pulumi.Input[str]] = None,
                 storage_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcStorageProfileArgs']]]]] = None,
                 vm_placement_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_quota: Optional[pulumi.Input[int]] = None,
                 vm_sizing_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgVdcArgs.__new__(OrgVdcArgs)

            if allocation_model is None and not opts.urn:
                raise TypeError("Missing required property 'allocation_model'")
            __props__.__dict__["allocation_model"] = allocation_model
            __props__.__dict__["allow_over_commit"] = allow_over_commit
            if compute_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'compute_capacity'")
            __props__.__dict__["compute_capacity"] = compute_capacity
            __props__.__dict__["cpu_guaranteed"] = cpu_guaranteed
            __props__.__dict__["cpu_speed"] = cpu_speed
            __props__.__dict__["default_compute_policy_id"] = default_compute_policy_id
            if default_vm_sizing_policy_id is not None and not opts.urn:
                warnings.warn("""Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""", DeprecationWarning)
                pulumi.log.warn("""default_vm_sizing_policy_id is deprecated: Use `default_compute_policy_id` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies""")
            __props__.__dict__["default_vm_sizing_policy_id"] = default_vm_sizing_policy_id
            if delete_force is None and not opts.urn:
                raise TypeError("Missing required property 'delete_force'")
            __props__.__dict__["delete_force"] = delete_force
            if delete_recursive is None and not opts.urn:
                raise TypeError("Missing required property 'delete_recursive'")
            __props__.__dict__["delete_recursive"] = delete_recursive
            __props__.__dict__["description"] = description
            __props__.__dict__["edge_cluster_id"] = edge_cluster_id
            __props__.__dict__["elasticity"] = elasticity
            __props__.__dict__["enable_fast_provisioning"] = enable_fast_provisioning
            __props__.__dict__["enable_thin_provisioning"] = enable_thin_provisioning
            __props__.__dict__["enable_vm_discovery"] = enable_vm_discovery
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["include_vm_memory_overhead"] = include_vm_memory_overhead
            __props__.__dict__["memory_guaranteed"] = memory_guaranteed
            if metadata is not None and not opts.urn:
                warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
                pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["network_pool_name"] = network_pool_name
            __props__.__dict__["network_quota"] = network_quota
            __props__.__dict__["nic_quota"] = nic_quota
            __props__.__dict__["org"] = org
            if provider_vdc_name is None and not opts.urn:
                raise TypeError("Missing required property 'provider_vdc_name'")
            __props__.__dict__["provider_vdc_name"] = provider_vdc_name
            if storage_profiles is None and not opts.urn:
                raise TypeError("Missing required property 'storage_profiles'")
            __props__.__dict__["storage_profiles"] = storage_profiles
            __props__.__dict__["vm_placement_policy_ids"] = vm_placement_policy_ids
            __props__.__dict__["vm_quota"] = vm_quota
            __props__.__dict__["vm_sizing_policy_ids"] = vm_sizing_policy_ids
        super(OrgVdc, __self__).__init__(
            'vcd:index/orgVdc:OrgVdc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocation_model: Optional[pulumi.Input[str]] = None,
            allow_over_commit: Optional[pulumi.Input[bool]] = None,
            compute_capacity: Optional[pulumi.Input[pulumi.InputType['OrgVdcComputeCapacityArgs']]] = None,
            cpu_guaranteed: Optional[pulumi.Input[float]] = None,
            cpu_speed: Optional[pulumi.Input[int]] = None,
            default_compute_policy_id: Optional[pulumi.Input[str]] = None,
            default_vm_sizing_policy_id: Optional[pulumi.Input[str]] = None,
            delete_force: Optional[pulumi.Input[bool]] = None,
            delete_recursive: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_cluster_id: Optional[pulumi.Input[str]] = None,
            elasticity: Optional[pulumi.Input[bool]] = None,
            enable_fast_provisioning: Optional[pulumi.Input[bool]] = None,
            enable_thin_provisioning: Optional[pulumi.Input[bool]] = None,
            enable_vm_discovery: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            include_vm_memory_overhead: Optional[pulumi.Input[bool]] = None,
            memory_guaranteed: Optional[pulumi.Input[float]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcMetadataEntryArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_pool_name: Optional[pulumi.Input[str]] = None,
            network_quota: Optional[pulumi.Input[int]] = None,
            nic_quota: Optional[pulumi.Input[int]] = None,
            org: Optional[pulumi.Input[str]] = None,
            provider_vdc_name: Optional[pulumi.Input[str]] = None,
            storage_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcStorageProfileArgs']]]]] = None,
            vm_placement_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vm_quota: Optional[pulumi.Input[int]] = None,
            vm_sizing_policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'OrgVdc':
        """
        Get an existing OrgVdc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allocation_model: The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        :param pulumi.Input[bool] allow_over_commit: Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
               ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        :param pulumi.Input[pulumi.InputType['OrgVdcComputeCapacityArgs']] compute_capacity: The compute capacity allocated to this VDC.
        :param pulumi.Input[float] cpu_guaranteed: Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
               75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
               element is empty, vCD sets a value
        :param pulumi.Input[int] cpu_speed: Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
               consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
               AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        :param pulumi.Input[str] default_compute_policy_id: ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[str] default_vm_sizing_policy_id: ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        :param pulumi.Input[bool] delete_force: When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        :param pulumi.Input[bool] delete_recursive: When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
               normally allows removal.
        :param pulumi.Input[str] edge_cluster_id: ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        :param pulumi.Input[bool] elasticity: Set to true to indicate if the Flex VDC is to be elastic.
        :param pulumi.Input[bool] enable_fast_provisioning: Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
               can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
               provisioning, all provisioning operations will result in full clones.
        :param pulumi.Input[bool] enable_thin_provisioning: Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
               provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        :param pulumi.Input[bool] enable_vm_discovery: True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
               behaviour depends on enablement at the organization level and at the system level.
        :param pulumi.Input[bool] enabled: True if this VDC is enabled for use by the organization VDCs. Default is true.
        :param pulumi.Input[bool] include_vm_memory_overhead: Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        :param pulumi.Input[float] memory_guaranteed: Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
               then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
               Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for Org VDC metadata
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcMetadataEntryArgs']]]] metadata_entries: Metadata entries for the given VDC
        :param pulumi.Input[str] network_pool_name: The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        :param pulumi.Input[int] network_quota: Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
               deployed.
        :param pulumi.Input[int] nic_quota: Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] provider_vdc_name: A reference to the Provider VDC from which this organization VDC is provisioned.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgVdcStorageProfileArgs']]]] storage_profiles: Storage profiles supported by this VDC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_placement_policy_ids: Set of VM Placement Policy IDs
        :param pulumi.Input[int] vm_quota: The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
               templates. Defaults to 0, which specifies an unlimited number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_sizing_policy_ids: Set of VM Sizing Policy IDs
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgVdcState.__new__(_OrgVdcState)

        __props__.__dict__["allocation_model"] = allocation_model
        __props__.__dict__["allow_over_commit"] = allow_over_commit
        __props__.__dict__["compute_capacity"] = compute_capacity
        __props__.__dict__["cpu_guaranteed"] = cpu_guaranteed
        __props__.__dict__["cpu_speed"] = cpu_speed
        __props__.__dict__["default_compute_policy_id"] = default_compute_policy_id
        __props__.__dict__["default_vm_sizing_policy_id"] = default_vm_sizing_policy_id
        __props__.__dict__["delete_force"] = delete_force
        __props__.__dict__["delete_recursive"] = delete_recursive
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_cluster_id"] = edge_cluster_id
        __props__.__dict__["elasticity"] = elasticity
        __props__.__dict__["enable_fast_provisioning"] = enable_fast_provisioning
        __props__.__dict__["enable_thin_provisioning"] = enable_thin_provisioning
        __props__.__dict__["enable_vm_discovery"] = enable_vm_discovery
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["include_vm_memory_overhead"] = include_vm_memory_overhead
        __props__.__dict__["memory_guaranteed"] = memory_guaranteed
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["network_pool_name"] = network_pool_name
        __props__.__dict__["network_quota"] = network_quota
        __props__.__dict__["nic_quota"] = nic_quota
        __props__.__dict__["org"] = org
        __props__.__dict__["provider_vdc_name"] = provider_vdc_name
        __props__.__dict__["storage_profiles"] = storage_profiles
        __props__.__dict__["vm_placement_policy_ids"] = vm_placement_policy_ids
        __props__.__dict__["vm_quota"] = vm_quota
        __props__.__dict__["vm_sizing_policy_ids"] = vm_sizing_policy_ids
        return OrgVdc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocationModel")
    def allocation_model(self) -> pulumi.Output[str]:
        """
        The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
        """
        return pulumi.get(self, "allocation_model")

    @property
    @pulumi.getter(name="allowOverCommit")
    def allow_over_commit(self) -> pulumi.Output[bool]:
        """
        Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
        ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
        """
        return pulumi.get(self, "allow_over_commit")

    @property
    @pulumi.getter(name="computeCapacity")
    def compute_capacity(self) -> pulumi.Output['outputs.OrgVdcComputeCapacity']:
        """
        The compute capacity allocated to this VDC.
        """
        return pulumi.get(self, "compute_capacity")

    @property
    @pulumi.getter(name="cpuGuaranteed")
    def cpu_guaranteed(self) -> pulumi.Output[float]:
        """
        Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
        75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
        element is empty, vCD sets a value
        """
        return pulumi.get(self, "cpu_guaranteed")

    @property
    @pulumi.getter(name="cpuSpeed")
    def cpu_speed(self) -> pulumi.Output[int]:
        """
        Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
        consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
        AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
        """
        return pulumi.get(self, "cpu_speed")

    @property
    @pulumi.getter(name="defaultComputePolicyId")
    def default_compute_policy_id(self) -> pulumi.Output[str]:
        """
        ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        """
        return pulumi.get(self, "default_compute_policy_id")

    @property
    @pulumi.getter(name="defaultVmSizingPolicyId")
    def default_vm_sizing_policy_id(self) -> pulumi.Output[str]:
        """
        ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
        """
        return pulumi.get(self, "default_vm_sizing_policy_id")

    @property
    @pulumi.getter(name="deleteForce")
    def delete_force(self) -> pulumi.Output[bool]:
        """
        When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
        """
        return pulumi.get(self, "delete_force")

    @property
    @pulumi.getter(name="deleteRecursive")
    def delete_recursive(self) -> pulumi.Output[bool]:
        """
        When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
        normally allows removal.
        """
        return pulumi.get(self, "delete_recursive")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
        """
        return pulumi.get(self, "edge_cluster_id")

    @property
    @pulumi.getter
    def elasticity(self) -> pulumi.Output[bool]:
        """
        Set to true to indicate if the Flex VDC is to be elastic.
        """
        return pulumi.get(self, "elasticity")

    @property
    @pulumi.getter(name="enableFastProvisioning")
    def enable_fast_provisioning(self) -> pulumi.Output[Optional[bool]]:
        """
        Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
        can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
        provisioning, all provisioning operations will result in full clones.
        """
        return pulumi.get(self, "enable_fast_provisioning")

    @property
    @pulumi.getter(name="enableThinProvisioning")
    def enable_thin_provisioning(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
        provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
        """
        return pulumi.get(self, "enable_thin_provisioning")

    @property
    @pulumi.getter(name="enableVmDiscovery")
    def enable_vm_discovery(self) -> pulumi.Output[Optional[bool]]:
        """
        True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
        behaviour depends on enablement at the organization level and at the system level.
        """
        return pulumi.get(self, "enable_vm_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True if this VDC is enabled for use by the organization VDCs. Default is true.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="includeVmMemoryOverhead")
    def include_vm_memory_overhead(self) -> pulumi.Output[bool]:
        """
        Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
        """
        return pulumi.get(self, "include_vm_memory_overhead")

    @property
    @pulumi.getter(name="memoryGuaranteed")
    def memory_guaranteed(self) -> pulumi.Output[float]:
        """
        Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
        then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
        Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
        """
        return pulumi.get(self, "memory_guaranteed")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Key and value pairs for Org VDC metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.OrgVdcMetadataEntry']]:
        """
        Metadata entries for the given VDC
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolName")
    def network_pool_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
        """
        return pulumi.get(self, "network_pool_name")

    @property
    @pulumi.getter(name="networkQuota")
    def network_quota(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
        deployed.
        """
        return pulumi.get(self, "network_quota")

    @property
    @pulumi.getter(name="nicQuota")
    def nic_quota(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
        """
        return pulumi.get(self, "nic_quota")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="providerVdcName")
    def provider_vdc_name(self) -> pulumi.Output[str]:
        """
        A reference to the Provider VDC from which this organization VDC is provisioned.
        """
        return pulumi.get(self, "provider_vdc_name")

    @property
    @pulumi.getter(name="storageProfiles")
    def storage_profiles(self) -> pulumi.Output[Sequence['outputs.OrgVdcStorageProfile']]:
        """
        Storage profiles supported by this VDC.
        """
        return pulumi.get(self, "storage_profiles")

    @property
    @pulumi.getter(name="vmPlacementPolicyIds")
    def vm_placement_policy_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of VM Placement Policy IDs
        """
        return pulumi.get(self, "vm_placement_policy_ids")

    @property
    @pulumi.getter(name="vmQuota")
    def vm_quota(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
        templates. Defaults to 0, which specifies an unlimited number.
        """
        return pulumi.get(self, "vm_quota")

    @property
    @pulumi.getter(name="vmSizingPolicyIds")
    def vm_sizing_policy_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of VM Sizing Policy IDs
        """
        return pulumi.get(self, "vm_sizing_policy_ids")

