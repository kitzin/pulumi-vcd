# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtEdgegatewayResult',
    'AwaitableGetNsxtEdgegatewayResult',
    'get_nsxt_edgegateway',
    'get_nsxt_edgegateway_output',
]

@pulumi.output_type
class GetNsxtEdgegatewayResult:
    """
    A collection of values returned by getNsxtEdgegateway.
    """
    def __init__(__self__, dedicate_external_network=None, description=None, edge_cluster_id=None, external_network_id=None, id=None, name=None, org=None, owner_id=None, primary_ip=None, subnets=None, vdc=None):
        if dedicate_external_network and not isinstance(dedicate_external_network, bool):
            raise TypeError("Expected argument 'dedicate_external_network' to be a bool")
        pulumi.set(__self__, "dedicate_external_network", dedicate_external_network)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_cluster_id and not isinstance(edge_cluster_id, str):
            raise TypeError("Expected argument 'edge_cluster_id' to be a str")
        pulumi.set(__self__, "edge_cluster_id", edge_cluster_id)
        if external_network_id and not isinstance(external_network_id, str):
            raise TypeError("Expected argument 'external_network_id' to be a str")
        pulumi.set(__self__, "external_network_id", external_network_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if primary_ip and not isinstance(primary_ip, str):
            raise TypeError("Expected argument 'primary_ip' to be a str")
        pulumi.set(__self__, "primary_ip", primary_ip)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        if vdc is not None:
            warnings.warn("""This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs""")

        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="dedicateExternalNetwork")
    def dedicate_external_network(self) -> bool:
        return pulumi.get(self, "dedicate_external_network")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeClusterId")
    def edge_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_cluster_id")

    @property
    @pulumi.getter(name="externalNetworkId")
    def external_network_id(self) -> str:
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> str:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetNsxtEdgegatewaySubnetResult']:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def vdc(self) -> str:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxtEdgegatewayResult(GetNsxtEdgegatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtEdgegatewayResult(
            dedicate_external_network=self.dedicate_external_network,
            description=self.description,
            edge_cluster_id=self.edge_cluster_id,
            external_network_id=self.external_network_id,
            id=self.id,
            name=self.name,
            org=self.org,
            owner_id=self.owner_id,
            primary_ip=self.primary_ip,
            subnets=self.subnets,
            vdc=self.vdc)


def get_nsxt_edgegateway(edge_cluster_id: Optional[str] = None,
                         name: Optional[str] = None,
                         org: Optional[str] = None,
                         owner_id: Optional[str] = None,
                         vdc: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtEdgegatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['edgeClusterId'] = edge_cluster_id
    __args__['name'] = name
    __args__['org'] = org
    __args__['ownerId'] = owner_id
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtEdgegateway:getNsxtEdgegateway', __args__, opts=opts, typ=GetNsxtEdgegatewayResult).value

    return AwaitableGetNsxtEdgegatewayResult(
        dedicate_external_network=__ret__.dedicate_external_network,
        description=__ret__.description,
        edge_cluster_id=__ret__.edge_cluster_id,
        external_network_id=__ret__.external_network_id,
        id=__ret__.id,
        name=__ret__.name,
        org=__ret__.org,
        owner_id=__ret__.owner_id,
        primary_ip=__ret__.primary_ip,
        subnets=__ret__.subnets,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_nsxt_edgegateway)
def get_nsxt_edgegateway_output(edge_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[str]] = None,
                                org: Optional[pulumi.Input[Optional[str]]] = None,
                                owner_id: Optional[pulumi.Input[Optional[str]]] = None,
                                vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtEdgegatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
