# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCatalogMediaResult',
    'AwaitableGetCatalogMediaResult',
    'get_catalog_media',
    'get_catalog_media_output',
]

@pulumi.output_type
class GetCatalogMediaResult:
    """
    A collection of values returned by getCatalogMedia.
    """
    def __init__(__self__, catalog=None, catalog_id=None, creation_date=None, description=None, filter=None, id=None, is_iso=None, is_published=None, metadata=None, metadata_entries=None, name=None, org=None, owner_name=None, size=None, status=None, storage_profile_name=None):
        if catalog and not isinstance(catalog, str):
            raise TypeError("Expected argument 'catalog' to be a str")
        if catalog is not None:
            warnings.warn("""use catalog_id instead, especially if using a shared catalog""", DeprecationWarning)
            pulumi.log.warn("""catalog is deprecated: use catalog_id instead, especially if using a shared catalog""")

        pulumi.set(__self__, "catalog", catalog)
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_iso and not isinstance(is_iso, bool):
            raise TypeError("Expected argument 'is_iso' to be a bool")
        pulumi.set(__self__, "is_iso", is_iso)
        if is_published and not isinstance(is_published, bool):
            raise TypeError("Expected argument 'is_published' to be a bool")
        pulumi.set(__self__, "is_published", is_published)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if owner_name and not isinstance(owner_name, str):
            raise TypeError("Expected argument 'owner_name' to be a str")
        pulumi.set(__self__, "owner_name", owner_name)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if storage_profile_name and not isinstance(storage_profile_name, str):
            raise TypeError("Expected argument 'storage_profile_name' to be a str")
        pulumi.set(__self__, "storage_profile_name", storage_profile_name)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetCatalogMediaFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIso")
    def is_iso(self) -> bool:
        return pulumi.get(self, "is_iso")

    @property
    @pulumi.getter(name="isPublished")
    def is_published(self) -> bool:
        return pulumi.get(self, "is_published")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetCatalogMediaMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ownerName")
    def owner_name(self) -> str:
        return pulumi.get(self, "owner_name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageProfileName")
    def storage_profile_name(self) -> str:
        return pulumi.get(self, "storage_profile_name")


class AwaitableGetCatalogMediaResult(GetCatalogMediaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogMediaResult(
            catalog=self.catalog,
            catalog_id=self.catalog_id,
            creation_date=self.creation_date,
            description=self.description,
            filter=self.filter,
            id=self.id,
            is_iso=self.is_iso,
            is_published=self.is_published,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            org=self.org,
            owner_name=self.owner_name,
            size=self.size,
            status=self.status,
            storage_profile_name=self.storage_profile_name)


def get_catalog_media(catalog: Optional[str] = None,
                      catalog_id: Optional[str] = None,
                      filter: Optional[pulumi.InputType['GetCatalogMediaFilterArgs']] = None,
                      name: Optional[str] = None,
                      org: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogMediaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalog'] = catalog
    __args__['catalogId'] = catalog_id
    __args__['filter'] = filter
    __args__['name'] = name
    __args__['org'] = org
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getCatalogMedia:getCatalogMedia', __args__, opts=opts, typ=GetCatalogMediaResult).value

    return AwaitableGetCatalogMediaResult(
        catalog=__ret__.catalog,
        catalog_id=__ret__.catalog_id,
        creation_date=__ret__.creation_date,
        description=__ret__.description,
        filter=__ret__.filter,
        id=__ret__.id,
        is_iso=__ret__.is_iso,
        is_published=__ret__.is_published,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        org=__ret__.org,
        owner_name=__ret__.owner_name,
        size=__ret__.size,
        status=__ret__.status,
        storage_profile_name=__ret__.storage_profile_name)


@_utilities.lift_output_func(get_catalog_media)
def get_catalog_media_output(catalog: Optional[pulumi.Input[Optional[str]]] = None,
                             catalog_id: Optional[pulumi.Input[Optional[str]]] = None,
                             filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetCatalogMediaFilterArgs']]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             org: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCatalogMediaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
