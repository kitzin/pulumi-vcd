# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtDynamicSecurityGroupResult',
    'AwaitableGetNsxtDynamicSecurityGroupResult',
    'get_nsxt_dynamic_security_group',
    'get_nsxt_dynamic_security_group_output',
]

@pulumi.output_type
class GetNsxtDynamicSecurityGroupResult:
    """
    A collection of values returned by getNsxtDynamicSecurityGroup.
    """
    def __init__(__self__, criterias=None, description=None, id=None, member_vms=None, name=None, org=None, vdc_group_id=None):
        if criterias and not isinstance(criterias, list):
            raise TypeError("Expected argument 'criterias' to be a list")
        pulumi.set(__self__, "criterias", criterias)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if member_vms and not isinstance(member_vms, list):
            raise TypeError("Expected argument 'member_vms' to be a list")
        pulumi.set(__self__, "member_vms", member_vms)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if vdc_group_id and not isinstance(vdc_group_id, str):
            raise TypeError("Expected argument 'vdc_group_id' to be a str")
        pulumi.set(__self__, "vdc_group_id", vdc_group_id)

    @property
    @pulumi.getter
    def criterias(self) -> Sequence['outputs.GetNsxtDynamicSecurityGroupCriteriaResult']:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberVms")
    def member_vms(self) -> Sequence['outputs.GetNsxtDynamicSecurityGroupMemberVmResult']:
        return pulumi.get(self, "member_vms")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="vdcGroupId")
    def vdc_group_id(self) -> str:
        return pulumi.get(self, "vdc_group_id")


class AwaitableGetNsxtDynamicSecurityGroupResult(GetNsxtDynamicSecurityGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtDynamicSecurityGroupResult(
            criterias=self.criterias,
            description=self.description,
            id=self.id,
            member_vms=self.member_vms,
            name=self.name,
            org=self.org,
            vdc_group_id=self.vdc_group_id)


def get_nsxt_dynamic_security_group(description: Optional[str] = None,
                                    name: Optional[str] = None,
                                    org: Optional[str] = None,
                                    vdc_group_id: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtDynamicSecurityGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdcGroupId'] = vdc_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtDynamicSecurityGroup:getNsxtDynamicSecurityGroup', __args__, opts=opts, typ=GetNsxtDynamicSecurityGroupResult).value

    return AwaitableGetNsxtDynamicSecurityGroupResult(
        criterias=__ret__.criterias,
        description=__ret__.description,
        id=__ret__.id,
        member_vms=__ret__.member_vms,
        name=__ret__.name,
        org=__ret__.org,
        vdc_group_id=__ret__.vdc_group_id)


@_utilities.lift_output_func(get_nsxt_dynamic_security_group)
def get_nsxt_dynamic_security_group_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                                           name: Optional[pulumi.Input[str]] = None,
                                           org: Optional[pulumi.Input[Optional[str]]] = None,
                                           vdc_group_id: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtDynamicSecurityGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
