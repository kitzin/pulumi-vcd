# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NsxtAlbSettingsArgs', 'NsxtAlbSettings']

@pulumi.input_type
class NsxtAlbSettingsArgs:
    def __init__(__self__, *,
                 edge_gateway_id: pulumi.Input[str],
                 is_active: pulumi.Input[bool],
                 org: Optional[pulumi.Input[str]] = None,
                 service_network_specification: Optional[pulumi.Input[str]] = None,
                 supported_feature_set: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NsxtAlbSettings resource.
        :param pulumi.Input[str] edge_gateway_id: Edge gateway ID
        :param pulumi.Input[bool] is_active: Defines if ALB is enabled on Edge Gateway
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] service_network_specification: Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        :param pulumi.Input[str] supported_feature_set: Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        pulumi.set(__self__, "is_active", is_active)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if service_network_specification is not None:
            pulumi.set(__self__, "service_network_specification", service_network_specification)
        if supported_feature_set is not None:
            pulumi.set(__self__, "supported_feature_set", supported_feature_set)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Input[str]:
        """
        Edge gateway ID
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Input[bool]:
        """
        Defines if ALB is enabled on Edge Gateway
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="serviceNetworkSpecification")
    def service_network_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        """
        return pulumi.get(self, "service_network_specification")

    @service_network_specification.setter
    def service_network_specification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network_specification", value)

    @property
    @pulumi.getter(name="supportedFeatureSet")
    def supported_feature_set(self) -> Optional[pulumi.Input[str]]:
        """
        Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        """
        return pulumi.get(self, "supported_feature_set")

    @supported_feature_set.setter
    def supported_feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supported_feature_set", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


@pulumi.input_type
class _NsxtAlbSettingsState:
    def __init__(__self__, *,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 service_network_specification: Optional[pulumi.Input[str]] = None,
                 supported_feature_set: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NsxtAlbSettings resources.
        :param pulumi.Input[str] edge_gateway_id: Edge gateway ID
        :param pulumi.Input[bool] is_active: Defines if ALB is enabled on Edge Gateway
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] service_network_specification: Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        :param pulumi.Input[str] supported_feature_set: Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        if edge_gateway_id is not None:
            pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if service_network_specification is not None:
            pulumi.set(__self__, "service_network_specification", service_network_specification)
        if supported_feature_set is not None:
            pulumi.set(__self__, "supported_feature_set", supported_feature_set)
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
        if vdc is not None:
            pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        Edge gateway ID
        """
        return pulumi.get(self, "edge_gateway_id")

    @edge_gateway_id.setter
    def edge_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_gateway_id", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if ALB is enabled on Edge Gateway
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="serviceNetworkSpecification")
    def service_network_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        """
        return pulumi.get(self, "service_network_specification")

    @service_network_specification.setter
    def service_network_specification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network_specification", value)

    @property
    @pulumi.getter(name="supportedFeatureSet")
    def supported_feature_set(self) -> Optional[pulumi.Input[str]]:
        """
        Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        """
        return pulumi.get(self, "supported_feature_set")

    @supported_feature_set.setter
    def supported_feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supported_feature_set", value)

    @property
    @pulumi.getter
    def vdc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

    @vdc.setter
    def vdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc", value)


class NsxtAlbSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 service_network_specification: Optional[pulumi.Input[str]] = None,
                 supported_feature_set: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NsxtAlbSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway_id: Edge gateway ID
        :param pulumi.Input[bool] is_active: Defines if ALB is enabled on Edge Gateway
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] service_network_specification: Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        :param pulumi.Input[str] supported_feature_set: Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxtAlbSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NsxtAlbSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NsxtAlbSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxtAlbSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_gateway_id: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 service_network_specification: Optional[pulumi.Input[str]] = None,
                 supported_feature_set: Optional[pulumi.Input[str]] = None,
                 vdc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxtAlbSettingsArgs.__new__(NsxtAlbSettingsArgs)

            if edge_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'edge_gateway_id'")
            __props__.__dict__["edge_gateway_id"] = edge_gateway_id
            if is_active is None and not opts.urn:
                raise TypeError("Missing required property 'is_active'")
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["org"] = org
            __props__.__dict__["service_network_specification"] = service_network_specification
            __props__.__dict__["supported_feature_set"] = supported_feature_set
            if vdc is not None and not opts.urn:
                warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
                pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")
            __props__.__dict__["vdc"] = vdc
        super(NsxtAlbSettings, __self__).__init__(
            'vcd:index/nsxtAlbSettings:NsxtAlbSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            edge_gateway_id: Optional[pulumi.Input[str]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            org: Optional[pulumi.Input[str]] = None,
            service_network_specification: Optional[pulumi.Input[str]] = None,
            supported_feature_set: Optional[pulumi.Input[str]] = None,
            vdc: Optional[pulumi.Input[str]] = None) -> 'NsxtAlbSettings':
        """
        Get an existing NsxtAlbSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] edge_gateway_id: Edge gateway ID
        :param pulumi.Input[bool] is_active: Defines if ALB is enabled on Edge Gateway
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] service_network_specification: Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        :param pulumi.Input[str] supported_feature_set: Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        :param pulumi.Input[str] vdc: The name of VDC to use, optional if defined at provider level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxtAlbSettingsState.__new__(_NsxtAlbSettingsState)

        __props__.__dict__["edge_gateway_id"] = edge_gateway_id
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["org"] = org
        __props__.__dict__["service_network_specification"] = service_network_specification
        __props__.__dict__["supported_feature_set"] = supported_feature_set
        __props__.__dict__["vdc"] = vdc
        return NsxtAlbSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> pulumi.Output[str]:
        """
        Edge gateway ID
        """
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[bool]:
        """
        Defines if ALB is enabled on Edge Gateway
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="serviceNetworkSpecification")
    def service_network_specification(self) -> pulumi.Output[str]:
        """
        Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
        """
        return pulumi.get(self, "service_network_specification")

    @property
    @pulumi.getter(name="supportedFeatureSet")
    def supported_feature_set(self) -> pulumi.Output[str]:
        """
        Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
        """
        return pulumi.get(self, "supported_feature_set")

    @property
    @pulumi.getter
    def vdc(self) -> pulumi.Output[str]:
        """
        The name of VDC to use, optional if defined at provider level
        """
        return pulumi.get(self, "vdc")

