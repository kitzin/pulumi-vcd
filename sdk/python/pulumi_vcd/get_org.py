# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetOrgResult',
    'AwaitableGetOrgResult',
    'get_org',
    'get_org_output',
]

@pulumi.output_type
class GetOrgResult:
    """
    A collection of values returned by getOrg.
    """
    def __init__(__self__, can_publish_catalogs=None, can_publish_external_catalogs=None, can_subscribe_external_catalogs=None, delay_after_power_on_seconds=None, deployed_vm_quota=None, description=None, full_name=None, id=None, is_enabled=None, metadata=None, metadata_entries=None, name=None, stored_vm_quota=None, vapp_leases=None, vapp_template_leases=None):
        if can_publish_catalogs and not isinstance(can_publish_catalogs, bool):
            raise TypeError("Expected argument 'can_publish_catalogs' to be a bool")
        pulumi.set(__self__, "can_publish_catalogs", can_publish_catalogs)
        if can_publish_external_catalogs and not isinstance(can_publish_external_catalogs, bool):
            raise TypeError("Expected argument 'can_publish_external_catalogs' to be a bool")
        pulumi.set(__self__, "can_publish_external_catalogs", can_publish_external_catalogs)
        if can_subscribe_external_catalogs and not isinstance(can_subscribe_external_catalogs, bool):
            raise TypeError("Expected argument 'can_subscribe_external_catalogs' to be a bool")
        pulumi.set(__self__, "can_subscribe_external_catalogs", can_subscribe_external_catalogs)
        if delay_after_power_on_seconds and not isinstance(delay_after_power_on_seconds, int):
            raise TypeError("Expected argument 'delay_after_power_on_seconds' to be a int")
        pulumi.set(__self__, "delay_after_power_on_seconds", delay_after_power_on_seconds)
        if deployed_vm_quota and not isinstance(deployed_vm_quota, int):
            raise TypeError("Expected argument 'deployed_vm_quota' to be a int")
        pulumi.set(__self__, "deployed_vm_quota", deployed_vm_quota)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if stored_vm_quota and not isinstance(stored_vm_quota, int):
            raise TypeError("Expected argument 'stored_vm_quota' to be a int")
        pulumi.set(__self__, "stored_vm_quota", stored_vm_quota)
        if vapp_leases and not isinstance(vapp_leases, list):
            raise TypeError("Expected argument 'vapp_leases' to be a list")
        pulumi.set(__self__, "vapp_leases", vapp_leases)
        if vapp_template_leases and not isinstance(vapp_template_leases, list):
            raise TypeError("Expected argument 'vapp_template_leases' to be a list")
        pulumi.set(__self__, "vapp_template_leases", vapp_template_leases)

    @property
    @pulumi.getter(name="canPublishCatalogs")
    def can_publish_catalogs(self) -> bool:
        return pulumi.get(self, "can_publish_catalogs")

    @property
    @pulumi.getter(name="canPublishExternalCatalogs")
    def can_publish_external_catalogs(self) -> bool:
        return pulumi.get(self, "can_publish_external_catalogs")

    @property
    @pulumi.getter(name="canSubscribeExternalCatalogs")
    def can_subscribe_external_catalogs(self) -> bool:
        return pulumi.get(self, "can_subscribe_external_catalogs")

    @property
    @pulumi.getter(name="delayAfterPowerOnSeconds")
    def delay_after_power_on_seconds(self) -> int:
        return pulumi.get(self, "delay_after_power_on_seconds")

    @property
    @pulumi.getter(name="deployedVmQuota")
    def deployed_vm_quota(self) -> int:
        return pulumi.get(self, "deployed_vm_quota")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetOrgMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storedVmQuota")
    def stored_vm_quota(self) -> int:
        return pulumi.get(self, "stored_vm_quota")

    @property
    @pulumi.getter(name="vappLeases")
    def vapp_leases(self) -> Sequence['outputs.GetOrgVappLeaseResult']:
        return pulumi.get(self, "vapp_leases")

    @property
    @pulumi.getter(name="vappTemplateLeases")
    def vapp_template_leases(self) -> Sequence['outputs.GetOrgVappTemplateLeaseResult']:
        return pulumi.get(self, "vapp_template_leases")


class AwaitableGetOrgResult(GetOrgResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgResult(
            can_publish_catalogs=self.can_publish_catalogs,
            can_publish_external_catalogs=self.can_publish_external_catalogs,
            can_subscribe_external_catalogs=self.can_subscribe_external_catalogs,
            delay_after_power_on_seconds=self.delay_after_power_on_seconds,
            deployed_vm_quota=self.deployed_vm_quota,
            description=self.description,
            full_name=self.full_name,
            id=self.id,
            is_enabled=self.is_enabled,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            stored_vm_quota=self.stored_vm_quota,
            vapp_leases=self.vapp_leases,
            vapp_template_leases=self.vapp_template_leases)


def get_org(name: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getOrg:getOrg', __args__, opts=opts, typ=GetOrgResult).value

    return AwaitableGetOrgResult(
        can_publish_catalogs=__ret__.can_publish_catalogs,
        can_publish_external_catalogs=__ret__.can_publish_external_catalogs,
        can_subscribe_external_catalogs=__ret__.can_subscribe_external_catalogs,
        delay_after_power_on_seconds=__ret__.delay_after_power_on_seconds,
        deployed_vm_quota=__ret__.deployed_vm_quota,
        description=__ret__.description,
        full_name=__ret__.full_name,
        id=__ret__.id,
        is_enabled=__ret__.is_enabled,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        stored_vm_quota=__ret__.stored_vm_quota,
        vapp_leases=__ret__.vapp_leases,
        vapp_template_leases=__ret__.vapp_template_leases)


@_utilities.lift_output_func(get_org)
def get_org_output(name: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrgResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
