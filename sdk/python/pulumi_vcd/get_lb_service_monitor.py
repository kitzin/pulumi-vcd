# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetLbServiceMonitorResult',
    'AwaitableGetLbServiceMonitorResult',
    'get_lb_service_monitor',
    'get_lb_service_monitor_output',
]

@pulumi.output_type
class GetLbServiceMonitorResult:
    """
    A collection of values returned by getLbServiceMonitor.
    """
    def __init__(__self__, edge_gateway=None, expected=None, extension=None, id=None, interval=None, max_retries=None, method=None, name=None, org=None, receive=None, send=None, timeout=None, type=None, url=None, vdc=None):
        if edge_gateway and not isinstance(edge_gateway, str):
            raise TypeError("Expected argument 'edge_gateway' to be a str")
        pulumi.set(__self__, "edge_gateway", edge_gateway)
        if expected and not isinstance(expected, str):
            raise TypeError("Expected argument 'expected' to be a str")
        pulumi.set(__self__, "expected", expected)
        if extension and not isinstance(extension, dict):
            raise TypeError("Expected argument 'extension' to be a dict")
        pulumi.set(__self__, "extension", extension)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if max_retries and not isinstance(max_retries, int):
            raise TypeError("Expected argument 'max_retries' to be a int")
        pulumi.set(__self__, "max_retries", max_retries)
        if method and not isinstance(method, str):
            raise TypeError("Expected argument 'method' to be a str")
        pulumi.set(__self__, "method", method)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if receive and not isinstance(receive, str):
            raise TypeError("Expected argument 'receive' to be a str")
        pulumi.set(__self__, "receive", receive)
        if send and not isinstance(send, str):
            raise TypeError("Expected argument 'send' to be a str")
        pulumi.set(__self__, "send", send)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter(name="edgeGateway")
    def edge_gateway(self) -> str:
        return pulumi.get(self, "edge_gateway")

    @property
    @pulumi.getter
    def expected(self) -> str:
        return pulumi.get(self, "expected")

    @property
    @pulumi.getter
    def extension(self) -> Mapping[str, Any]:
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> int:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def receive(self) -> str:
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> str:
        return pulumi.get(self, "send")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetLbServiceMonitorResult(GetLbServiceMonitorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLbServiceMonitorResult(
            edge_gateway=self.edge_gateway,
            expected=self.expected,
            extension=self.extension,
            id=self.id,
            interval=self.interval,
            max_retries=self.max_retries,
            method=self.method,
            name=self.name,
            org=self.org,
            receive=self.receive,
            send=self.send,
            timeout=self.timeout,
            type=self.type,
            url=self.url,
            vdc=self.vdc)


def get_lb_service_monitor(edge_gateway: Optional[str] = None,
                           name: Optional[str] = None,
                           org: Optional[str] = None,
                           vdc: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLbServiceMonitorResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['edgeGateway'] = edge_gateway
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getLbServiceMonitor:getLbServiceMonitor', __args__, opts=opts, typ=GetLbServiceMonitorResult).value

    return AwaitableGetLbServiceMonitorResult(
        edge_gateway=__ret__.edge_gateway,
        expected=__ret__.expected,
        extension=__ret__.extension,
        id=__ret__.id,
        interval=__ret__.interval,
        max_retries=__ret__.max_retries,
        method=__ret__.method,
        name=__ret__.name,
        org=__ret__.org,
        receive=__ret__.receive,
        send=__ret__.send,
        timeout=__ret__.timeout,
        type=__ret__.type,
        url=__ret__.url,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_lb_service_monitor)
def get_lb_service_monitor_output(edge_gateway: Optional[pulumi.Input[str]] = None,
                                  name: Optional[pulumi.Input[str]] = None,
                                  org: Optional[pulumi.Input[Optional[str]]] = None,
                                  vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLbServiceMonitorResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
