# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRightsBundleResult',
    'AwaitableGetRightsBundleResult',
    'get_rights_bundle',
    'get_rights_bundle_output',
]

@pulumi.output_type
class GetRightsBundleResult:
    """
    A collection of values returned by getRightsBundle.
    """
    def __init__(__self__, bundle_key=None, description=None, id=None, name=None, publish_to_all_tenants=None, read_only=None, rights=None, tenants=None):
        if bundle_key and not isinstance(bundle_key, str):
            raise TypeError("Expected argument 'bundle_key' to be a str")
        pulumi.set(__self__, "bundle_key", bundle_key)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if publish_to_all_tenants and not isinstance(publish_to_all_tenants, bool):
            raise TypeError("Expected argument 'publish_to_all_tenants' to be a bool")
        pulumi.set(__self__, "publish_to_all_tenants", publish_to_all_tenants)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if rights and not isinstance(rights, list):
            raise TypeError("Expected argument 'rights' to be a list")
        pulumi.set(__self__, "rights", rights)
        if tenants and not isinstance(tenants, list):
            raise TypeError("Expected argument 'tenants' to be a list")
        pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter(name="bundleKey")
    def bundle_key(self) -> str:
        return pulumi.get(self, "bundle_key")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publishToAllTenants")
    def publish_to_all_tenants(self) -> bool:
        return pulumi.get(self, "publish_to_all_tenants")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def rights(self) -> Sequence[str]:
        return pulumi.get(self, "rights")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        return pulumi.get(self, "tenants")


class AwaitableGetRightsBundleResult(GetRightsBundleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRightsBundleResult(
            bundle_key=self.bundle_key,
            description=self.description,
            id=self.id,
            name=self.name,
            publish_to_all_tenants=self.publish_to_all_tenants,
            read_only=self.read_only,
            rights=self.rights,
            tenants=self.tenants)


def get_rights_bundle(name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRightsBundleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getRightsBundle:getRightsBundle', __args__, opts=opts, typ=GetRightsBundleResult).value

    return AwaitableGetRightsBundleResult(
        bundle_key=__ret__.bundle_key,
        description=__ret__.description,
        id=__ret__.id,
        name=__ret__.name,
        publish_to_all_tenants=__ret__.publish_to_all_tenants,
        read_only=__ret__.read_only,
        rights=__ret__.rights,
        tenants=__ret__.tenants)


@_utilities.lift_output_func(get_rights_bundle)
def get_rights_bundle_output(name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRightsBundleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
