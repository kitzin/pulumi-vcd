# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetProviderVdcResult',
    'AwaitableGetProviderVdcResult',
    'get_provider_vdc',
    'get_provider_vdc_output',
]

@pulumi.output_type
class GetProviderVdcResult:
    """
    A collection of values returned by getProviderVdc.
    """
    def __init__(__self__, capabilities=None, compute_capacities=None, compute_provider_scope=None, description=None, external_network_ids=None, highest_supported_hardware_version=None, host_ids=None, id=None, is_enabled=None, metadata=None, metadata_entries=None, name=None, network_pool_ids=None, nsxt_manager_id=None, resource_pool_ids=None, status=None, storage_container_ids=None, storage_profile_ids=None, universal_network_pool_id=None, vcenter_id=None):
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if compute_capacities and not isinstance(compute_capacities, list):
            raise TypeError("Expected argument 'compute_capacities' to be a list")
        pulumi.set(__self__, "compute_capacities", compute_capacities)
        if compute_provider_scope and not isinstance(compute_provider_scope, str):
            raise TypeError("Expected argument 'compute_provider_scope' to be a str")
        pulumi.set(__self__, "compute_provider_scope", compute_provider_scope)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_network_ids and not isinstance(external_network_ids, list):
            raise TypeError("Expected argument 'external_network_ids' to be a list")
        pulumi.set(__self__, "external_network_ids", external_network_ids)
        if highest_supported_hardware_version and not isinstance(highest_supported_hardware_version, str):
            raise TypeError("Expected argument 'highest_supported_hardware_version' to be a str")
        pulumi.set(__self__, "highest_supported_hardware_version", highest_supported_hardware_version)
        if host_ids and not isinstance(host_ids, list):
            raise TypeError("Expected argument 'host_ids' to be a list")
        pulumi.set(__self__, "host_ids", host_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")

        pulumi.set(__self__, "metadata", metadata)
        if metadata_entries and not isinstance(metadata_entries, list):
            raise TypeError("Expected argument 'metadata_entries' to be a list")
        pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_pool_ids and not isinstance(network_pool_ids, list):
            raise TypeError("Expected argument 'network_pool_ids' to be a list")
        pulumi.set(__self__, "network_pool_ids", network_pool_ids)
        if nsxt_manager_id and not isinstance(nsxt_manager_id, str):
            raise TypeError("Expected argument 'nsxt_manager_id' to be a str")
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if resource_pool_ids and not isinstance(resource_pool_ids, list):
            raise TypeError("Expected argument 'resource_pool_ids' to be a list")
        pulumi.set(__self__, "resource_pool_ids", resource_pool_ids)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if storage_container_ids and not isinstance(storage_container_ids, list):
            raise TypeError("Expected argument 'storage_container_ids' to be a list")
        pulumi.set(__self__, "storage_container_ids", storage_container_ids)
        if storage_profile_ids and not isinstance(storage_profile_ids, list):
            raise TypeError("Expected argument 'storage_profile_ids' to be a list")
        pulumi.set(__self__, "storage_profile_ids", storage_profile_ids)
        if universal_network_pool_id and not isinstance(universal_network_pool_id, str):
            raise TypeError("Expected argument 'universal_network_pool_id' to be a str")
        pulumi.set(__self__, "universal_network_pool_id", universal_network_pool_id)
        if vcenter_id and not isinstance(vcenter_id, str):
            raise TypeError("Expected argument 'vcenter_id' to be a str")
        pulumi.set(__self__, "vcenter_id", vcenter_id)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[str]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="computeCapacities")
    def compute_capacities(self) -> Sequence['outputs.GetProviderVdcComputeCapacityResult']:
        return pulumi.get(self, "compute_capacities")

    @property
    @pulumi.getter(name="computeProviderScope")
    def compute_provider_scope(self) -> str:
        return pulumi.get(self, "compute_provider_scope")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalNetworkIds")
    def external_network_ids(self) -> Sequence[str]:
        return pulumi.get(self, "external_network_ids")

    @property
    @pulumi.getter(name="highestSupportedHardwareVersion")
    def highest_supported_hardware_version(self) -> str:
        return pulumi.get(self, "highest_supported_hardware_version")

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Sequence[str]:
        return pulumi.get(self, "host_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Sequence['outputs.GetProviderVdcMetadataEntryResult']:
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPoolIds")
    def network_pool_ids(self) -> Sequence[str]:
        return pulumi.get(self, "network_pool_ids")

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> str:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="resourcePoolIds")
    def resource_pool_ids(self) -> Sequence[str]:
        return pulumi.get(self, "resource_pool_ids")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageContainerIds")
    def storage_container_ids(self) -> Sequence[str]:
        return pulumi.get(self, "storage_container_ids")

    @property
    @pulumi.getter(name="storageProfileIds")
    def storage_profile_ids(self) -> Sequence[str]:
        return pulumi.get(self, "storage_profile_ids")

    @property
    @pulumi.getter(name="universalNetworkPoolId")
    def universal_network_pool_id(self) -> str:
        return pulumi.get(self, "universal_network_pool_id")

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> str:
        return pulumi.get(self, "vcenter_id")


class AwaitableGetProviderVdcResult(GetProviderVdcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProviderVdcResult(
            capabilities=self.capabilities,
            compute_capacities=self.compute_capacities,
            compute_provider_scope=self.compute_provider_scope,
            description=self.description,
            external_network_ids=self.external_network_ids,
            highest_supported_hardware_version=self.highest_supported_hardware_version,
            host_ids=self.host_ids,
            id=self.id,
            is_enabled=self.is_enabled,
            metadata=self.metadata,
            metadata_entries=self.metadata_entries,
            name=self.name,
            network_pool_ids=self.network_pool_ids,
            nsxt_manager_id=self.nsxt_manager_id,
            resource_pool_ids=self.resource_pool_ids,
            status=self.status,
            storage_container_ids=self.storage_container_ids,
            storage_profile_ids=self.storage_profile_ids,
            universal_network_pool_id=self.universal_network_pool_id,
            vcenter_id=self.vcenter_id)


def get_provider_vdc(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProviderVdcResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getProviderVdc:getProviderVdc', __args__, opts=opts, typ=GetProviderVdcResult).value

    return AwaitableGetProviderVdcResult(
        capabilities=__ret__.capabilities,
        compute_capacities=__ret__.compute_capacities,
        compute_provider_scope=__ret__.compute_provider_scope,
        description=__ret__.description,
        external_network_ids=__ret__.external_network_ids,
        highest_supported_hardware_version=__ret__.highest_supported_hardware_version,
        host_ids=__ret__.host_ids,
        id=__ret__.id,
        is_enabled=__ret__.is_enabled,
        metadata=__ret__.metadata,
        metadata_entries=__ret__.metadata_entries,
        name=__ret__.name,
        network_pool_ids=__ret__.network_pool_ids,
        nsxt_manager_id=__ret__.nsxt_manager_id,
        resource_pool_ids=__ret__.resource_pool_ids,
        status=__ret__.status,
        storage_container_ids=__ret__.storage_container_ids,
        storage_profile_ids=__ret__.storage_profile_ids,
        universal_network_pool_id=__ret__.universal_network_pool_id,
        vcenter_id=__ret__.vcenter_id)


@_utilities.lift_output_func(get_provider_vdc)
def get_provider_vdc_output(name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProviderVdcResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
