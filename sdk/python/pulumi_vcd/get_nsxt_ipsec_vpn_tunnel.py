# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNsxtIpsecVpnTunnelResult',
    'AwaitableGetNsxtIpsecVpnTunnelResult',
    'get_nsxt_ipsec_vpn_tunnel',
    'get_nsxt_ipsec_vpn_tunnel_output',
]

@pulumi.output_type
class GetNsxtIpsecVpnTunnelResult:
    """
    A collection of values returned by getNsxtIpsecVpnTunnel.
    """
    def __init__(__self__, description=None, edge_gateway_id=None, enabled=None, id=None, ike_fail_reason=None, ike_service_status=None, local_ip_address=None, local_networks=None, logging=None, name=None, org=None, pre_shared_key=None, remote_ip_address=None, remote_networks=None, security_profile=None, security_profile_customizations=None, status=None, vdc=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_gateway_id and not isinstance(edge_gateway_id, str):
            raise TypeError("Expected argument 'edge_gateway_id' to be a str")
        pulumi.set(__self__, "edge_gateway_id", edge_gateway_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ike_fail_reason and not isinstance(ike_fail_reason, str):
            raise TypeError("Expected argument 'ike_fail_reason' to be a str")
        pulumi.set(__self__, "ike_fail_reason", ike_fail_reason)
        if ike_service_status and not isinstance(ike_service_status, str):
            raise TypeError("Expected argument 'ike_service_status' to be a str")
        pulumi.set(__self__, "ike_service_status", ike_service_status)
        if local_ip_address and not isinstance(local_ip_address, str):
            raise TypeError("Expected argument 'local_ip_address' to be a str")
        pulumi.set(__self__, "local_ip_address", local_ip_address)
        if local_networks and not isinstance(local_networks, list):
            raise TypeError("Expected argument 'local_networks' to be a list")
        pulumi.set(__self__, "local_networks", local_networks)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if pre_shared_key and not isinstance(pre_shared_key, str):
            raise TypeError("Expected argument 'pre_shared_key' to be a str")
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if remote_ip_address and not isinstance(remote_ip_address, str):
            raise TypeError("Expected argument 'remote_ip_address' to be a str")
        pulumi.set(__self__, "remote_ip_address", remote_ip_address)
        if remote_networks and not isinstance(remote_networks, list):
            raise TypeError("Expected argument 'remote_networks' to be a list")
        pulumi.set(__self__, "remote_networks", remote_networks)
        if security_profile and not isinstance(security_profile, str):
            raise TypeError("Expected argument 'security_profile' to be a str")
        pulumi.set(__self__, "security_profile", security_profile)
        if security_profile_customizations and not isinstance(security_profile_customizations, list):
            raise TypeError("Expected argument 'security_profile_customizations' to be a list")
        pulumi.set(__self__, "security_profile_customizations", security_profile_customizations)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdc and not isinstance(vdc, str):
            raise TypeError("Expected argument 'vdc' to be a str")
        if vdc is not None:
            warnings.warn("""Edge Gateway will be looked up based on 'edge_gateway_id' field""", DeprecationWarning)
            pulumi.log.warn("""vdc is deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field""")

        pulumi.set(__self__, "vdc", vdc)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeGatewayId")
    def edge_gateway_id(self) -> str:
        return pulumi.get(self, "edge_gateway_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ikeFailReason")
    def ike_fail_reason(self) -> str:
        return pulumi.get(self, "ike_fail_reason")

    @property
    @pulumi.getter(name="ikeServiceStatus")
    def ike_service_status(self) -> str:
        return pulumi.get(self, "ike_service_status")

    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> str:
        return pulumi.get(self, "local_ip_address")

    @property
    @pulumi.getter(name="localNetworks")
    def local_networks(self) -> Sequence[str]:
        return pulumi.get(self, "local_networks")

    @property
    @pulumi.getter
    def logging(self) -> bool:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> Optional[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> str:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter(name="remoteIpAddress")
    def remote_ip_address(self) -> str:
        return pulumi.get(self, "remote_ip_address")

    @property
    @pulumi.getter(name="remoteNetworks")
    def remote_networks(self) -> Sequence[str]:
        return pulumi.get(self, "remote_networks")

    @property
    @pulumi.getter(name="securityProfile")
    def security_profile(self) -> str:
        return pulumi.get(self, "security_profile")

    @property
    @pulumi.getter(name="securityProfileCustomizations")
    def security_profile_customizations(self) -> Sequence['outputs.GetNsxtIpsecVpnTunnelSecurityProfileCustomizationResult']:
        return pulumi.get(self, "security_profile_customizations")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdc(self) -> Optional[str]:
        return pulumi.get(self, "vdc")


class AwaitableGetNsxtIpsecVpnTunnelResult(GetNsxtIpsecVpnTunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxtIpsecVpnTunnelResult(
            description=self.description,
            edge_gateway_id=self.edge_gateway_id,
            enabled=self.enabled,
            id=self.id,
            ike_fail_reason=self.ike_fail_reason,
            ike_service_status=self.ike_service_status,
            local_ip_address=self.local_ip_address,
            local_networks=self.local_networks,
            logging=self.logging,
            name=self.name,
            org=self.org,
            pre_shared_key=self.pre_shared_key,
            remote_ip_address=self.remote_ip_address,
            remote_networks=self.remote_networks,
            security_profile=self.security_profile,
            security_profile_customizations=self.security_profile_customizations,
            status=self.status,
            vdc=self.vdc)


def get_nsxt_ipsec_vpn_tunnel(edge_gateway_id: Optional[str] = None,
                              name: Optional[str] = None,
                              org: Optional[str] = None,
                              vdc: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxtIpsecVpnTunnelResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['edgeGatewayId'] = edge_gateway_id
    __args__['name'] = name
    __args__['org'] = org
    __args__['vdc'] = vdc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vcd:index/getNsxtIpsecVpnTunnel:getNsxtIpsecVpnTunnel', __args__, opts=opts, typ=GetNsxtIpsecVpnTunnelResult).value

    return AwaitableGetNsxtIpsecVpnTunnelResult(
        description=__ret__.description,
        edge_gateway_id=__ret__.edge_gateway_id,
        enabled=__ret__.enabled,
        id=__ret__.id,
        ike_fail_reason=__ret__.ike_fail_reason,
        ike_service_status=__ret__.ike_service_status,
        local_ip_address=__ret__.local_ip_address,
        local_networks=__ret__.local_networks,
        logging=__ret__.logging,
        name=__ret__.name,
        org=__ret__.org,
        pre_shared_key=__ret__.pre_shared_key,
        remote_ip_address=__ret__.remote_ip_address,
        remote_networks=__ret__.remote_networks,
        security_profile=__ret__.security_profile,
        security_profile_customizations=__ret__.security_profile_customizations,
        status=__ret__.status,
        vdc=__ret__.vdc)


@_utilities.lift_output_func(get_nsxt_ipsec_vpn_tunnel)
def get_nsxt_ipsec_vpn_tunnel_output(edge_gateway_id: Optional[pulumi.Input[str]] = None,
                                     name: Optional[pulumi.Input[str]] = None,
                                     org: Optional[pulumi.Input[Optional[str]]] = None,
                                     vdc: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxtIpsecVpnTunnelResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
