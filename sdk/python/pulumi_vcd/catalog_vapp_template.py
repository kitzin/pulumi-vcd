# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CatalogVappTemplateArgs', 'CatalogVappTemplate']

@pulumi.input_type
class CatalogVappTemplateArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a CatalogVappTemplate resource.
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for the metadata of this vApp Template
        :param pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]] metadata_entries: Metadata entries for the given vApp Template
        :param pulumi.Input[str] name: vApp Template name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] ova_path: Absolute or relative path to OVA
        :param pulumi.Input[str] ovf_url: URL of OVF file
        :param pulumi.Input[int] upload_piece_size: Size of upload file piece size in megabytes
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if ova_path is not None:
            pulumi.set(__self__, "ova_path", ova_path)
        if ovf_url is not None:
            pulumi.set(__self__, "ovf_url", ovf_url)
        if upload_piece_size is not None:
            pulumi.set(__self__, "upload_piece_size", upload_piece_size)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        ID of the Catalog where to upload the OVA file
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key and value pairs for the metadata of this vApp Template
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]:
        """
        Metadata entries for the given vApp Template
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        vApp Template name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ovaPath")
    def ova_path(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute or relative path to OVA
        """
        return pulumi.get(self, "ova_path")

    @ova_path.setter
    def ova_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ova_path", value)

    @property
    @pulumi.getter(name="ovfUrl")
    def ovf_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of OVF file
        """
        return pulumi.get(self, "ovf_url")

    @ovf_url.setter
    def ovf_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovf_url", value)

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of upload file piece size in megabytes
        """
        return pulumi.get(self, "upload_piece_size")

    @upload_piece_size.setter
    def upload_piece_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_piece_size", value)


@pulumi.input_type
class _CatalogVappTemplateState:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 vm_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering CatalogVappTemplate resources.
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] created: Timestamp of when the vApp Template was created
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for the metadata of this vApp Template
        :param pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]] metadata_entries: Metadata entries for the given vApp Template
        :param pulumi.Input[str] name: vApp Template name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] ova_path: Absolute or relative path to OVA
        :param pulumi.Input[str] ovf_url: URL of OVF file
        :param pulumi.Input[int] upload_piece_size: Size of upload file piece size in megabytes
        :param pulumi.Input[str] vdc_id: ID of the VDC to which the vApp Template belongs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_names: Set of VM names within the vApp template
        """
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
            pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_entries is not None:
            pulumi.set(__self__, "metadata_entries", metadata_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if ova_path is not None:
            pulumi.set(__self__, "ova_path", ova_path)
        if ovf_url is not None:
            pulumi.set(__self__, "ovf_url", ovf_url)
        if upload_piece_size is not None:
            pulumi.set(__self__, "upload_piece_size", upload_piece_size)
        if vdc_id is not None:
            pulumi.set(__self__, "vdc_id", vdc_id)
        if vm_names is not None:
            pulumi.set(__self__, "vm_names", vm_names)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Catalog where to upload the OVA file
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the vApp Template was created
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key and value pairs for the metadata of this vApp Template
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]:
        """
        Metadata entries for the given vApp Template
        """
        return pulumi.get(self, "metadata_entries")

    @metadata_entries.setter
    def metadata_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CatalogVappTemplateMetadataEntryArgs']]]]):
        pulumi.set(self, "metadata_entries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        vApp Template name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="ovaPath")
    def ova_path(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute or relative path to OVA
        """
        return pulumi.get(self, "ova_path")

    @ova_path.setter
    def ova_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ova_path", value)

    @property
    @pulumi.getter(name="ovfUrl")
    def ovf_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of OVF file
        """
        return pulumi.get(self, "ovf_url")

    @ovf_url.setter
    def ovf_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovf_url", value)

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of upload file piece size in megabytes
        """
        return pulumi.get(self, "upload_piece_size")

    @upload_piece_size.setter
    def upload_piece_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_piece_size", value)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VDC to which the vApp Template belongs
        """
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_id", value)

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of VM names within the vApp template
        """
        return pulumi.get(self, "vm_names")

    @vm_names.setter
    def vm_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_names", value)


class CatalogVappTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CatalogVappTemplateMetadataEntryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a CatalogVappTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for the metadata of this vApp Template
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CatalogVappTemplateMetadataEntryArgs']]]] metadata_entries: Metadata entries for the given vApp Template
        :param pulumi.Input[str] name: vApp Template name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] ova_path: Absolute or relative path to OVA
        :param pulumi.Input[str] ovf_url: URL of OVF file
        :param pulumi.Input[int] upload_piece_size: Size of upload file piece size in megabytes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CatalogVappTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CatalogVappTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CatalogVappTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CatalogVappTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CatalogVappTemplateMetadataEntryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 ova_path: Optional[pulumi.Input[str]] = None,
                 ovf_url: Optional[pulumi.Input[str]] = None,
                 upload_piece_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CatalogVappTemplateArgs.__new__(CatalogVappTemplateArgs)

            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            __props__.__dict__["description"] = description
            if metadata is not None and not opts.urn:
                warnings.warn("""Use metadata_entry instead""", DeprecationWarning)
                pulumi.log.warn("""metadata is deprecated: Use metadata_entry instead""")
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_entries"] = metadata_entries
            __props__.__dict__["name"] = name
            __props__.__dict__["org"] = org
            __props__.__dict__["ova_path"] = ova_path
            __props__.__dict__["ovf_url"] = ovf_url
            __props__.__dict__["upload_piece_size"] = upload_piece_size
            __props__.__dict__["created"] = None
            __props__.__dict__["vdc_id"] = None
            __props__.__dict__["vm_names"] = None
        super(CatalogVappTemplate, __self__).__init__(
            'vcd:index/catalogVappTemplate:CatalogVappTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog_id: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            metadata_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CatalogVappTemplateMetadataEntryArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org: Optional[pulumi.Input[str]] = None,
            ova_path: Optional[pulumi.Input[str]] = None,
            ovf_url: Optional[pulumi.Input[str]] = None,
            upload_piece_size: Optional[pulumi.Input[int]] = None,
            vdc_id: Optional[pulumi.Input[str]] = None,
            vm_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'CatalogVappTemplate':
        """
        Get an existing CatalogVappTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog_id: ID of the Catalog where to upload the OVA file
        :param pulumi.Input[str] created: Timestamp of when the vApp Template was created
        :param pulumi.Input[str] description: Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        :param pulumi.Input[Mapping[str, Any]] metadata: Key and value pairs for the metadata of this vApp Template
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CatalogVappTemplateMetadataEntryArgs']]]] metadata_entries: Metadata entries for the given vApp Template
        :param pulumi.Input[str] name: vApp Template name
        :param pulumi.Input[str] org: The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
               different organizations
        :param pulumi.Input[str] ova_path: Absolute or relative path to OVA
        :param pulumi.Input[str] ovf_url: URL of OVF file
        :param pulumi.Input[int] upload_piece_size: Size of upload file piece size in megabytes
        :param pulumi.Input[str] vdc_id: ID of the VDC to which the vApp Template belongs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_names: Set of VM names within the vApp template
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CatalogVappTemplateState.__new__(_CatalogVappTemplateState)

        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_entries"] = metadata_entries
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["ova_path"] = ova_path
        __props__.__dict__["ovf_url"] = ovf_url
        __props__.__dict__["upload_piece_size"] = upload_piece_size
        __props__.__dict__["vdc_id"] = vdc_id
        __props__.__dict__["vm_names"] = vm_names
        return CatalogVappTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[str]:
        """
        ID of the Catalog where to upload the OVA file
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp of when the vApp Template was created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Key and value pairs for the metadata of this vApp Template
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataEntries")
    def metadata_entries(self) -> pulumi.Output[Sequence['outputs.CatalogVappTemplateMetadataEntry']]:
        """
        Metadata entries for the given vApp Template
        """
        return pulumi.get(self, "metadata_entries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        vApp Template name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[str]]:
        """
        The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
        different organizations
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="ovaPath")
    def ova_path(self) -> pulumi.Output[Optional[str]]:
        """
        Absolute or relative path to OVA
        """
        return pulumi.get(self, "ova_path")

    @property
    @pulumi.getter(name="ovfUrl")
    def ovf_url(self) -> pulumi.Output[Optional[str]]:
        """
        URL of OVF file
        """
        return pulumi.get(self, "ovf_url")

    @property
    @pulumi.getter(name="uploadPieceSize")
    def upload_piece_size(self) -> pulumi.Output[Optional[int]]:
        """
        Size of upload file piece size in megabytes
        """
        return pulumi.get(self, "upload_piece_size")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> pulumi.Output[str]:
        """
        ID of the VDC to which the vApp Template belongs
        """
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="vmNames")
    def vm_names(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of VM names within the vApp template
        """
        return pulumi.get(self, "vm_names")

