# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'CatalogAccessControlSharedWith',
    'CatalogItemMetadataEntry',
    'CatalogMediaMetadataEntry',
    'CatalogMetadataEntry',
    'CatalogVappTemplateMetadataEntry',
    'EdgeGatewayExternalNetwork',
    'EdgeGatewayExternalNetworkSubnet',
    'EdgeGatewayExternalNetworkSubnetSuballocatePool',
    'EdgeGatewayVpnLocalSubnet',
    'EdgeGatewayVpnPeerSubnet',
    'ExternalNetworkIpScope',
    'ExternalNetworkIpScopeStaticIpPool',
    'ExternalNetworkV2IpScope',
    'ExternalNetworkV2IpScopeStaticIpPool',
    'ExternalNetworkV2NsxtNetwork',
    'ExternalNetworkV2VsphereNetwork',
    'ExternalNetworkVsphereNetwork',
    'IndependentDiskMetadataEntry',
    'LbServerPoolMember',
    'NetworkDirectMetadataEntry',
    'NetworkIsolatedDhcpPool',
    'NetworkIsolatedMetadataEntry',
    'NetworkIsolatedStaticIpPool',
    'NetworkIsolatedV2MetadataEntry',
    'NetworkIsolatedV2StaticIpPool',
    'NetworkRoutedDhcpPool',
    'NetworkRoutedMetadataEntry',
    'NetworkRoutedStaticIpPool',
    'NetworkRoutedV2MetadataEntry',
    'NetworkRoutedV2StaticIpPool',
    'NsxtAlbPoolHealthMonitor',
    'NsxtAlbPoolMember',
    'NsxtAlbPoolPersistenceProfile',
    'NsxtAlbVirtualServiceServicePort',
    'NsxtAppPortProfileAppPort',
    'NsxtDistributedFirewallRule',
    'NsxtDynamicSecurityGroupCriteria',
    'NsxtDynamicSecurityGroupCriteriaRule',
    'NsxtDynamicSecurityGroupMemberVm',
    'NsxtEdgegatewayBgpIpPrefixListIpPrefix',
    'NsxtEdgegatewaySubnet',
    'NsxtEdgegatewaySubnetAllocatedIp',
    'NsxtFirewallRule',
    'NsxtIpsecVpnTunnelSecurityProfileCustomization',
    'NsxtNetworkDhcpPool',
    'NsxtNetworkImportedStaticIpPool',
    'NsxtSecurityGroupMemberVm',
    'NsxvDhcpRelayRelayAgent',
    'NsxvFirewallRuleDestination',
    'NsxvFirewallRuleService',
    'NsxvFirewallRuleSource',
    'OrgLdapCustomSettings',
    'OrgLdapCustomSettingsGroupAttributes',
    'OrgLdapCustomSettingsUserAttributes',
    'OrgMetadataEntry',
    'OrgVappLease',
    'OrgVappTemplateLease',
    'OrgVdcAccessControlSharedWith',
    'OrgVdcComputeCapacity',
    'OrgVdcComputeCapacityCpu',
    'OrgVdcComputeCapacityMemory',
    'OrgVdcMetadataEntry',
    'OrgVdcStorageProfile',
    'VappAccessControlSharedWith',
    'VappFirewallRulesRule',
    'VappLease',
    'VappMetadataEntry',
    'VappNatRulesRule',
    'VappNetworkDhcpPool',
    'VappNetworkStaticIpPool',
    'VappStaticRoutingRule',
    'VappVmCustomization',
    'VappVmDisk',
    'VappVmInternalDisk',
    'VappVmMetadataEntry',
    'VappVmNetwork',
    'VappVmOverrideTemplateDisk',
    'VdcGroupParticipatingOrgVdc',
    'VmCustomization',
    'VmDisk',
    'VmInternalDisk',
    'VmMetadataEntry',
    'VmNetwork',
    'VmOverrideTemplateDisk',
    'VmSizingPolicyCpu',
    'VmSizingPolicyMemory',
    'GetCatalogFilterResult',
    'GetCatalogFilterMetadataResult',
    'GetCatalogItemFilterResult',
    'GetCatalogItemFilterMetadataResult',
    'GetCatalogItemMetadataEntryResult',
    'GetCatalogMediaFilterResult',
    'GetCatalogMediaFilterMetadataResult',
    'GetCatalogMediaMetadataEntryResult',
    'GetCatalogMetadataEntryResult',
    'GetCatalogVappTemplateFilterResult',
    'GetCatalogVappTemplateFilterMetadataResult',
    'GetCatalogVappTemplateMetadataEntryResult',
    'GetEdgegatewayExternalNetworkResult',
    'GetEdgegatewayExternalNetworkSubnetResult',
    'GetEdgegatewayExternalNetworkSubnetSuballocatePoolResult',
    'GetEdgegatewayFilterResult',
    'GetExternalNetworkIpScopeResult',
    'GetExternalNetworkIpScopeStaticIpPoolResult',
    'GetExternalNetworkV2IpScopeResult',
    'GetExternalNetworkV2IpScopeStaticIpPoolResult',
    'GetExternalNetworkV2NsxtNetworkResult',
    'GetExternalNetworkV2VsphereNetworkResult',
    'GetExternalNetworkVsphereNetworkResult',
    'GetIndependentDiskMetadataEntryResult',
    'GetLbServerPoolMemberResult',
    'GetNetworkDirectFilterResult',
    'GetNetworkDirectFilterMetadataResult',
    'GetNetworkDirectMetadataEntryResult',
    'GetNetworkIsolatedDhcpPoolResult',
    'GetNetworkIsolatedFilterResult',
    'GetNetworkIsolatedFilterMetadataResult',
    'GetNetworkIsolatedMetadataEntryResult',
    'GetNetworkIsolatedStaticIpPoolResult',
    'GetNetworkIsolatedV2FilterResult',
    'GetNetworkIsolatedV2MetadataEntryResult',
    'GetNetworkIsolatedV2StaticIpPoolResult',
    'GetNetworkRoutedDhcpPoolResult',
    'GetNetworkRoutedFilterResult',
    'GetNetworkRoutedFilterMetadataResult',
    'GetNetworkRoutedMetadataEntryResult',
    'GetNetworkRoutedStaticIpPoolResult',
    'GetNetworkRoutedV2FilterResult',
    'GetNetworkRoutedV2MetadataEntryResult',
    'GetNetworkRoutedV2StaticIpPoolResult',
    'GetNsxtAlbPoolHealthMonitorResult',
    'GetNsxtAlbPoolMemberResult',
    'GetNsxtAlbPoolPersistenceProfileResult',
    'GetNsxtAlbVirtualServiceServicePortResult',
    'GetNsxtAppPortProfileAppPortResult',
    'GetNsxtDistributedFirewallRuleResult',
    'GetNsxtDynamicSecurityGroupCriteriaResult',
    'GetNsxtDynamicSecurityGroupCriteriaRuleResult',
    'GetNsxtDynamicSecurityGroupMemberVmResult',
    'GetNsxtEdgegatewayBgpIpPrefixListIpPrefixResult',
    'GetNsxtEdgegatewaySubnetResult',
    'GetNsxtEdgegatewaySubnetAllocatedIpResult',
    'GetNsxtFirewallRuleResult',
    'GetNsxtIpsecVpnTunnelSecurityProfileCustomizationResult',
    'GetNsxtNetworkDhcpPoolResult',
    'GetNsxtNetworkImportedFilterResult',
    'GetNsxtNetworkImportedStaticIpPoolResult',
    'GetNsxtSecurityGroupMemberVmResult',
    'GetNsxvDhcpRelayRelayAgentResult',
    'GetNsxvFirewallRuleDestinationResult',
    'GetNsxvFirewallRuleServiceResult',
    'GetNsxvFirewallRuleSourceResult',
    'GetOrgLdapCustomSettingResult',
    'GetOrgLdapCustomSettingGroupAttributeResult',
    'GetOrgLdapCustomSettingUserAttributeResult',
    'GetOrgMetadataEntryResult',
    'GetOrgVappLeaseResult',
    'GetOrgVappTemplateLeaseResult',
    'GetOrgVdcComputeCapacityResult',
    'GetOrgVdcComputeCapacityCpusResult',
    'GetOrgVdcComputeCapacityMemoryResult',
    'GetOrgVdcMetadataEntryResult',
    'GetOrgVdcStorageProfileResult',
    'GetProviderVdcComputeCapacityResult',
    'GetProviderVdcComputeCapacityCpusResult',
    'GetProviderVdcComputeCapacityMemoryResult',
    'GetProviderVdcMetadataEntryResult',
    'GetResourceSchemaAttributeResult',
    'GetResourceSchemaBlockAttributeResult',
    'GetResourceSchemaBlockAttributeAttributeResult',
    'GetRightImpliedRightResult',
    'GetStorageProfileIopsSettingResult',
    'GetStorageProfileMetadataEntryResult',
    'GetSubscribedCatalogFilterResult',
    'GetSubscribedCatalogFilterMetadataResult',
    'GetVappLeaseResult',
    'GetVappMetadataEntryResult',
    'GetVappNetworkDhcpPoolResult',
    'GetVappNetworkStaticIpPoolResult',
    'GetVappVmCustomizationResult',
    'GetVappVmDiskResult',
    'GetVappVmInternalDiskResult',
    'GetVappVmMetadataEntryResult',
    'GetVappVmNetworkResult',
    'GetVdcGroupParticipatingOrgVdcResult',
    'GetVmCustomizationResult',
    'GetVmDiskResult',
    'GetVmInternalDiskResult',
    'GetVmMetadataEntryResult',
    'GetVmNetworkResult',
    'GetVmSizingPolicyCpusResult',
    'GetVmSizingPolicyMemoryResult',
]

@pulumi.output_type
class CatalogAccessControlSharedWith(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "subjectName":
            suggest = "subject_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogAccessControlSharedWith. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogAccessControlSharedWith.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogAccessControlSharedWith.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: str,
                 group_id: Optional[str] = None,
                 org_id: Optional[str] = None,
                 subject_name: Optional[str] = None,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "access_level", access_level)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[str]:
        return pulumi.get(self, "subject_name")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class CatalogItemMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogItemMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogItemMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogItemMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CatalogMediaMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogMediaMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogMediaMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogMediaMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CatalogMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CatalogVappTemplateMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogVappTemplateMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogVappTemplateMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogVappTemplateMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class EdgeGatewayExternalNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableRateLimit":
            suggest = "enable_rate_limit"
        elif key == "incomingRateLimit":
            suggest = "incoming_rate_limit"
        elif key == "outgoingRateLimit":
            suggest = "outgoing_rate_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeGatewayExternalNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeGatewayExternalNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeGatewayExternalNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 enable_rate_limit: Optional[bool] = None,
                 incoming_rate_limit: Optional[float] = None,
                 outgoing_rate_limit: Optional[float] = None,
                 subnets: Optional[Sequence['outputs.EdgeGatewayExternalNetworkSubnet']] = None):
        pulumi.set(__self__, "name", name)
        if enable_rate_limit is not None:
            pulumi.set(__self__, "enable_rate_limit", enable_rate_limit)
        if incoming_rate_limit is not None:
            pulumi.set(__self__, "incoming_rate_limit", incoming_rate_limit)
        if outgoing_rate_limit is not None:
            pulumi.set(__self__, "outgoing_rate_limit", outgoing_rate_limit)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="enableRateLimit")
    def enable_rate_limit(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rate_limit")

    @property
    @pulumi.getter(name="incomingRateLimit")
    def incoming_rate_limit(self) -> Optional[float]:
        return pulumi.get(self, "incoming_rate_limit")

    @property
    @pulumi.getter(name="outgoingRateLimit")
    def outgoing_rate_limit(self) -> Optional[float]:
        return pulumi.get(self, "outgoing_rate_limit")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence['outputs.EdgeGatewayExternalNetworkSubnet']]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class EdgeGatewayExternalNetworkSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "suballocatePools":
            suggest = "suballocate_pools"
        elif key == "useForDefaultRoute":
            suggest = "use_for_default_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeGatewayExternalNetworkSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeGatewayExternalNetworkSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeGatewayExternalNetworkSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: str,
                 netmask: str,
                 ip_address: Optional[str] = None,
                 suballocate_pools: Optional[Sequence['outputs.EdgeGatewayExternalNetworkSubnetSuballocatePool']] = None,
                 use_for_default_route: Optional[bool] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "netmask", netmask)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if suballocate_pools is not None:
            pulumi.set(__self__, "suballocate_pools", suballocate_pools)
        if use_for_default_route is not None:
            pulumi.set(__self__, "use_for_default_route", use_for_default_route)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="suballocatePools")
    def suballocate_pools(self) -> Optional[Sequence['outputs.EdgeGatewayExternalNetworkSubnetSuballocatePool']]:
        return pulumi.get(self, "suballocate_pools")

    @property
    @pulumi.getter(name="useForDefaultRoute")
    def use_for_default_route(self) -> Optional[bool]:
        return pulumi.get(self, "use_for_default_route")


@pulumi.output_type
class EdgeGatewayExternalNetworkSubnetSuballocatePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeGatewayExternalNetworkSubnetSuballocatePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeGatewayExternalNetworkSubnetSuballocatePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeGatewayExternalNetworkSubnetSuballocatePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class EdgeGatewayVpnLocalSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localSubnetGateway":
            suggest = "local_subnet_gateway"
        elif key == "localSubnetMask":
            suggest = "local_subnet_mask"
        elif key == "localSubnetName":
            suggest = "local_subnet_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeGatewayVpnLocalSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeGatewayVpnLocalSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeGatewayVpnLocalSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_subnet_gateway: str,
                 local_subnet_mask: str,
                 local_subnet_name: str):
        pulumi.set(__self__, "local_subnet_gateway", local_subnet_gateway)
        pulumi.set(__self__, "local_subnet_mask", local_subnet_mask)
        pulumi.set(__self__, "local_subnet_name", local_subnet_name)

    @property
    @pulumi.getter(name="localSubnetGateway")
    def local_subnet_gateway(self) -> str:
        return pulumi.get(self, "local_subnet_gateway")

    @property
    @pulumi.getter(name="localSubnetMask")
    def local_subnet_mask(self) -> str:
        return pulumi.get(self, "local_subnet_mask")

    @property
    @pulumi.getter(name="localSubnetName")
    def local_subnet_name(self) -> str:
        return pulumi.get(self, "local_subnet_name")


@pulumi.output_type
class EdgeGatewayVpnPeerSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peerSubnetGateway":
            suggest = "peer_subnet_gateway"
        elif key == "peerSubnetMask":
            suggest = "peer_subnet_mask"
        elif key == "peerSubnetName":
            suggest = "peer_subnet_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeGatewayVpnPeerSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeGatewayVpnPeerSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeGatewayVpnPeerSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 peer_subnet_gateway: str,
                 peer_subnet_mask: str,
                 peer_subnet_name: str):
        pulumi.set(__self__, "peer_subnet_gateway", peer_subnet_gateway)
        pulumi.set(__self__, "peer_subnet_mask", peer_subnet_mask)
        pulumi.set(__self__, "peer_subnet_name", peer_subnet_name)

    @property
    @pulumi.getter(name="peerSubnetGateway")
    def peer_subnet_gateway(self) -> str:
        return pulumi.get(self, "peer_subnet_gateway")

    @property
    @pulumi.getter(name="peerSubnetMask")
    def peer_subnet_mask(self) -> str:
        return pulumi.get(self, "peer_subnet_mask")

    @property
    @pulumi.getter(name="peerSubnetName")
    def peer_subnet_name(self) -> str:
        return pulumi.get(self, "peer_subnet_name")


@pulumi.output_type
class ExternalNetworkIpScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffix":
            suggest = "dns_suffix"
        elif key == "staticIpPools":
            suggest = "static_ip_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalNetworkIpScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalNetworkIpScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalNetworkIpScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: str,
                 netmask: str,
                 dns1: Optional[str] = None,
                 dns2: Optional[str] = None,
                 dns_suffix: Optional[str] = None,
                 static_ip_pools: Optional[Sequence['outputs.ExternalNetworkIpScopeStaticIpPool']] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "netmask", netmask)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def dns1(self) -> Optional[str]:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> Optional[str]:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[str]:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[Sequence['outputs.ExternalNetworkIpScopeStaticIpPool']]:
        return pulumi.get(self, "static_ip_pools")


@pulumi.output_type
class ExternalNetworkIpScopeStaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalNetworkIpScopeStaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalNetworkIpScopeStaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalNetworkIpScopeStaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class ExternalNetworkV2IpScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"
        elif key == "dnsSuffix":
            suggest = "dns_suffix"
        elif key == "staticIpPools":
            suggest = "static_ip_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalNetworkV2IpScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalNetworkV2IpScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalNetworkV2IpScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: str,
                 prefix_length: int,
                 dns1: Optional[str] = None,
                 dns2: Optional[str] = None,
                 dns_suffix: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 static_ip_pools: Optional[Sequence['outputs.ExternalNetworkV2IpScopeStaticIpPool']] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def dns1(self) -> Optional[str]:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> Optional[str]:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[str]:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[Sequence['outputs.ExternalNetworkV2IpScopeStaticIpPool']]:
        return pulumi.get(self, "static_ip_pools")


@pulumi.output_type
class ExternalNetworkV2IpScopeStaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalNetworkV2IpScopeStaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalNetworkV2IpScopeStaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalNetworkV2IpScopeStaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class ExternalNetworkV2NsxtNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nsxtManagerId":
            suggest = "nsxt_manager_id"
        elif key == "nsxtSegmentName":
            suggest = "nsxt_segment_name"
        elif key == "nsxtTier0RouterId":
            suggest = "nsxt_tier0_router_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalNetworkV2NsxtNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalNetworkV2NsxtNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalNetworkV2NsxtNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nsxt_manager_id: str,
                 nsxt_segment_name: Optional[str] = None,
                 nsxt_tier0_router_id: Optional[str] = None):
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if nsxt_segment_name is not None:
            pulumi.set(__self__, "nsxt_segment_name", nsxt_segment_name)
        if nsxt_tier0_router_id is not None:
            pulumi.set(__self__, "nsxt_tier0_router_id", nsxt_tier0_router_id)

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> str:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="nsxtSegmentName")
    def nsxt_segment_name(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_segment_name")

    @property
    @pulumi.getter(name="nsxtTier0RouterId")
    def nsxt_tier0_router_id(self) -> Optional[str]:
        return pulumi.get(self, "nsxt_tier0_router_id")


@pulumi.output_type
class ExternalNetworkV2VsphereNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portgroupId":
            suggest = "portgroup_id"
        elif key == "vcenterId":
            suggest = "vcenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalNetworkV2VsphereNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalNetworkV2VsphereNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalNetworkV2VsphereNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 portgroup_id: str,
                 vcenter_id: str):
        pulumi.set(__self__, "portgroup_id", portgroup_id)
        pulumi.set(__self__, "vcenter_id", vcenter_id)

    @property
    @pulumi.getter(name="portgroupId")
    def portgroup_id(self) -> str:
        return pulumi.get(self, "portgroup_id")

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> str:
        return pulumi.get(self, "vcenter_id")


@pulumi.output_type
class ExternalNetworkVsphereNetwork(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 vcenter: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcenter", vcenter)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcenter(self) -> str:
        return pulumi.get(self, "vcenter")


@pulumi.output_type
class IndependentDiskMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndependentDiskMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndependentDiskMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndependentDiskMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LbServerPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "monitorPort":
            suggest = "monitor_port"
        elif key == "maxConnections":
            suggest = "max_connections"
        elif key == "minConnections":
            suggest = "min_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbServerPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbServerPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbServerPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: str,
                 ip_address: str,
                 monitor_port: int,
                 name: str,
                 port: int,
                 weight: int,
                 id: Optional[str] = None,
                 max_connections: Optional[int] = None,
                 min_connections: Optional[int] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "monitor_port", monitor_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if min_connections is not None:
            pulumi.set(__self__, "min_connections", min_connections)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="monitorPort")
    def monitor_port(self) -> int:
        return pulumi.get(self, "monitor_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="minConnections")
    def min_connections(self) -> Optional[int]:
        return pulumi.get(self, "min_connections")


@pulumi.output_type
class NetworkDirectMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkDirectMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkDirectMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkDirectMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkIsolatedDhcpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"
        elif key == "defaultLeaseTime":
            suggest = "default_lease_time"
        elif key == "maxLeaseTime":
            suggest = "max_lease_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkIsolatedDhcpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkIsolatedDhcpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkIsolatedDhcpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str,
                 default_lease_time: Optional[int] = None,
                 max_lease_time: Optional[int] = None):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)
        if default_lease_time is not None:
            pulumi.set(__self__, "default_lease_time", default_lease_time)
        if max_lease_time is not None:
            pulumi.set(__self__, "max_lease_time", max_lease_time)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> Optional[int]:
        return pulumi.get(self, "default_lease_time")

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> Optional[int]:
        return pulumi.get(self, "max_lease_time")


@pulumi.output_type
class NetworkIsolatedMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkIsolatedMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkIsolatedMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkIsolatedMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkIsolatedStaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkIsolatedStaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkIsolatedStaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkIsolatedStaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NetworkIsolatedV2MetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkIsolatedV2MetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkIsolatedV2MetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkIsolatedV2MetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkIsolatedV2StaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkIsolatedV2StaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkIsolatedV2StaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkIsolatedV2StaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NetworkRoutedDhcpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"
        elif key == "defaultLeaseTime":
            suggest = "default_lease_time"
        elif key == "maxLeaseTime":
            suggest = "max_lease_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRoutedDhcpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRoutedDhcpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRoutedDhcpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str,
                 default_lease_time: Optional[int] = None,
                 max_lease_time: Optional[int] = None):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)
        if default_lease_time is not None:
            pulumi.set(__self__, "default_lease_time", default_lease_time)
        if max_lease_time is not None:
            pulumi.set(__self__, "max_lease_time", max_lease_time)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> Optional[int]:
        return pulumi.get(self, "default_lease_time")

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> Optional[int]:
        return pulumi.get(self, "max_lease_time")


@pulumi.output_type
class NetworkRoutedMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRoutedMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRoutedMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRoutedMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkRoutedStaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRoutedStaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRoutedStaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRoutedStaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NetworkRoutedV2MetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRoutedV2MetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRoutedV2MetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRoutedV2MetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkRoutedV2StaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRoutedV2StaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRoutedV2StaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRoutedV2StaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NsxtAlbPoolHealthMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemDefined":
            suggest = "system_defined"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtAlbPoolHealthMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtAlbPoolHealthMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtAlbPoolHealthMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 system_defined: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if system_defined is not None:
            pulumi.set(__self__, "system_defined", system_defined)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemDefined")
    def system_defined(self) -> Optional[bool]:
        return pulumi.get(self, "system_defined")


@pulumi.output_type
class NsxtAlbPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "detailedHealthMessage":
            suggest = "detailed_health_message"
        elif key == "healthStatus":
            suggest = "health_status"
        elif key == "markedDownBies":
            suggest = "marked_down_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtAlbPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtAlbPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtAlbPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 detailed_health_message: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 health_status: Optional[str] = None,
                 marked_down_bies: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 ratio: Optional[int] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if detailed_health_message is not None:
            pulumi.set(__self__, "detailed_health_message", detailed_health_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if marked_down_bies is not None:
            pulumi.set(__self__, "marked_down_bies", marked_down_bies)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ratio is not None:
            pulumi.set(__self__, "ratio", ratio)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="detailedHealthMessage")
    def detailed_health_message(self) -> Optional[str]:
        return pulumi.get(self, "detailed_health_message")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[str]:
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="markedDownBies")
    def marked_down_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "marked_down_bies")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def ratio(self) -> Optional[int]:
        return pulumi.get(self, "ratio")


@pulumi.output_type
class NsxtAlbPoolPersistenceProfile(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NsxtAlbVirtualServiceServicePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startPort":
            suggest = "start_port"
        elif key == "endPort":
            suggest = "end_port"
        elif key == "sslEnabled":
            suggest = "ssl_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtAlbVirtualServiceServicePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtAlbVirtualServiceServicePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtAlbVirtualServiceServicePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_port: int,
                 type: str,
                 end_port: Optional[int] = None,
                 ssl_enabled: Optional[bool] = None):
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "type", type)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")


@pulumi.output_type
class NsxtAppPortProfileAppPort(dict):
    def __init__(__self__, *,
                 protocol: str,
                 ports: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "protocol", protocol)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class NsxtDistributedFirewallRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appPortProfileIds":
            suggest = "app_port_profile_ids"
        elif key == "destinationGroupsExcluded":
            suggest = "destination_groups_excluded"
        elif key == "destinationIds":
            suggest = "destination_ids"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "networkContextProfileIds":
            suggest = "network_context_profile_ids"
        elif key == "sourceGroupsExcluded":
            suggest = "source_groups_excluded"
        elif key == "sourceIds":
            suggest = "source_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtDistributedFirewallRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtDistributedFirewallRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtDistributedFirewallRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 name: str,
                 app_port_profile_ids: Optional[Sequence[str]] = None,
                 comment: Optional[str] = None,
                 description: Optional[str] = None,
                 destination_groups_excluded: Optional[bool] = None,
                 destination_ids: Optional[Sequence[str]] = None,
                 direction: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 ip_protocol: Optional[str] = None,
                 logging: Optional[bool] = None,
                 network_context_profile_ids: Optional[Sequence[str]] = None,
                 source_groups_excluded: Optional[bool] = None,
                 source_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        if app_port_profile_ids is not None:
            pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_groups_excluded is not None:
            pulumi.set(__self__, "destination_groups_excluded", destination_groups_excluded)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if network_context_profile_ids is not None:
            pulumi.set(__self__, "network_context_profile_ids", network_context_profile_ids)
        if source_groups_excluded is not None:
            pulumi.set(__self__, "source_groups_excluded", source_groups_excluded)
        if source_ids is not None:
            pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_port_profile_ids")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> Optional[bool]:
        return pulumi.get(self, "destination_groups_excluded")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def logging(self) -> Optional[bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_context_profile_ids")

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> Optional[bool]:
        return pulumi.get(self, "source_groups_excluded")

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ids")


@pulumi.output_type
class NsxtDynamicSecurityGroupCriteria(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.NsxtDynamicSecurityGroupCriteriaRule']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.NsxtDynamicSecurityGroupCriteriaRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class NsxtDynamicSecurityGroupCriteriaRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class NsxtDynamicSecurityGroupMemberVm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vappId":
            suggest = "vapp_id"
        elif key == "vappName":
            suggest = "vapp_name"
        elif key == "vmId":
            suggest = "vm_id"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtDynamicSecurityGroupMemberVm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtDynamicSecurityGroupMemberVm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtDynamicSecurityGroupMemberVm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vapp_id: Optional[str] = None,
                 vapp_name: Optional[str] = None,
                 vm_id: Optional[str] = None,
                 vm_name: Optional[str] = None):
        if vapp_id is not None:
            pulumi.set(__self__, "vapp_id", vapp_id)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> Optional[str]:
        return pulumi.get(self, "vapp_id")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[str]:
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[str]:
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class NsxtEdgegatewayBgpIpPrefixListIpPrefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "greaterThanOrEqualTo":
            suggest = "greater_than_or_equal_to"
        elif key == "lessThanOrEqualTo":
            suggest = "less_than_or_equal_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtEdgegatewayBgpIpPrefixListIpPrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtEdgegatewayBgpIpPrefixListIpPrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtEdgegatewayBgpIpPrefixListIpPrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 network: str,
                 greater_than_or_equal_to: Optional[int] = None,
                 less_than_or_equal_to: Optional[int] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "network", network)
        if greater_than_or_equal_to is not None:
            pulumi.set(__self__, "greater_than_or_equal_to", greater_than_or_equal_to)
        if less_than_or_equal_to is not None:
            pulumi.set(__self__, "less_than_or_equal_to", less_than_or_equal_to)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="greaterThanOrEqualTo")
    def greater_than_or_equal_to(self) -> Optional[int]:
        return pulumi.get(self, "greater_than_or_equal_to")

    @property
    @pulumi.getter(name="lessThanOrEqualTo")
    def less_than_or_equal_to(self) -> Optional[int]:
        return pulumi.get(self, "less_than_or_equal_to")


@pulumi.output_type
class NsxtEdgegatewaySubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedIps":
            suggest = "allocated_ips"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "primaryIp":
            suggest = "primary_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtEdgegatewaySubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtEdgegatewaySubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtEdgegatewaySubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_ips: Sequence['outputs.NsxtEdgegatewaySubnetAllocatedIp'],
                 gateway: str,
                 prefix_length: int,
                 primary_ip: Optional[str] = None):
        pulumi.set(__self__, "allocated_ips", allocated_ips)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)

    @property
    @pulumi.getter(name="allocatedIps")
    def allocated_ips(self) -> Sequence['outputs.NsxtEdgegatewaySubnetAllocatedIp']:
        return pulumi.get(self, "allocated_ips")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[str]:
        return pulumi.get(self, "primary_ip")


@pulumi.output_type
class NsxtEdgegatewaySubnetAllocatedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtEdgegatewaySubnetAllocatedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtEdgegatewaySubnetAllocatedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtEdgegatewaySubnetAllocatedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NsxtFirewallRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "appPortProfileIds":
            suggest = "app_port_profile_ids"
        elif key == "destinationIds":
            suggest = "destination_ids"
        elif key == "sourceIds":
            suggest = "source_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtFirewallRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtFirewallRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtFirewallRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 direction: str,
                 ip_protocol: str,
                 name: str,
                 app_port_profile_ids: Optional[Sequence[str]] = None,
                 destination_ids: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 logging: Optional[bool] = None,
                 source_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "name", name)
        if app_port_profile_ids is not None:
            pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if source_ids is not None:
            pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_port_profile_ids")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logging(self) -> Optional[bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ids")


@pulumi.output_type
class NsxtIpsecVpnTunnelSecurityProfileCustomization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ikeDhGroups":
            suggest = "ike_dh_groups"
        elif key == "ikeEncryptionAlgorithms":
            suggest = "ike_encryption_algorithms"
        elif key == "ikeVersion":
            suggest = "ike_version"
        elif key == "tunnelDhGroups":
            suggest = "tunnel_dh_groups"
        elif key == "tunnelEncryptionAlgorithms":
            suggest = "tunnel_encryption_algorithms"
        elif key == "dpdProbeInternal":
            suggest = "dpd_probe_internal"
        elif key == "ikeDigestAlgorithms":
            suggest = "ike_digest_algorithms"
        elif key == "ikeSaLifetime":
            suggest = "ike_sa_lifetime"
        elif key == "tunnelDfPolicy":
            suggest = "tunnel_df_policy"
        elif key == "tunnelDigestAlgorithms":
            suggest = "tunnel_digest_algorithms"
        elif key == "tunnelPfsEnabled":
            suggest = "tunnel_pfs_enabled"
        elif key == "tunnelSaLifetime":
            suggest = "tunnel_sa_lifetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtIpsecVpnTunnelSecurityProfileCustomization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtIpsecVpnTunnelSecurityProfileCustomization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtIpsecVpnTunnelSecurityProfileCustomization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ike_dh_groups: Sequence[str],
                 ike_encryption_algorithms: Sequence[str],
                 ike_version: str,
                 tunnel_dh_groups: Sequence[str],
                 tunnel_encryption_algorithms: Sequence[str],
                 dpd_probe_internal: Optional[int] = None,
                 ike_digest_algorithms: Optional[Sequence[str]] = None,
                 ike_sa_lifetime: Optional[int] = None,
                 tunnel_df_policy: Optional[str] = None,
                 tunnel_digest_algorithms: Optional[Sequence[str]] = None,
                 tunnel_pfs_enabled: Optional[bool] = None,
                 tunnel_sa_lifetime: Optional[int] = None):
        pulumi.set(__self__, "ike_dh_groups", ike_dh_groups)
        pulumi.set(__self__, "ike_encryption_algorithms", ike_encryption_algorithms)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "tunnel_dh_groups", tunnel_dh_groups)
        pulumi.set(__self__, "tunnel_encryption_algorithms", tunnel_encryption_algorithms)
        if dpd_probe_internal is not None:
            pulumi.set(__self__, "dpd_probe_internal", dpd_probe_internal)
        if ike_digest_algorithms is not None:
            pulumi.set(__self__, "ike_digest_algorithms", ike_digest_algorithms)
        if ike_sa_lifetime is not None:
            pulumi.set(__self__, "ike_sa_lifetime", ike_sa_lifetime)
        if tunnel_df_policy is not None:
            pulumi.set(__self__, "tunnel_df_policy", tunnel_df_policy)
        if tunnel_digest_algorithms is not None:
            pulumi.set(__self__, "tunnel_digest_algorithms", tunnel_digest_algorithms)
        if tunnel_pfs_enabled is not None:
            pulumi.set(__self__, "tunnel_pfs_enabled", tunnel_pfs_enabled)
        if tunnel_sa_lifetime is not None:
            pulumi.set(__self__, "tunnel_sa_lifetime", tunnel_sa_lifetime)

    @property
    @pulumi.getter(name="ikeDhGroups")
    def ike_dh_groups(self) -> Sequence[str]:
        return pulumi.get(self, "ike_dh_groups")

    @property
    @pulumi.getter(name="ikeEncryptionAlgorithms")
    def ike_encryption_algorithms(self) -> Sequence[str]:
        return pulumi.get(self, "ike_encryption_algorithms")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> str:
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="tunnelDhGroups")
    def tunnel_dh_groups(self) -> Sequence[str]:
        return pulumi.get(self, "tunnel_dh_groups")

    @property
    @pulumi.getter(name="tunnelEncryptionAlgorithms")
    def tunnel_encryption_algorithms(self) -> Sequence[str]:
        return pulumi.get(self, "tunnel_encryption_algorithms")

    @property
    @pulumi.getter(name="dpdProbeInternal")
    def dpd_probe_internal(self) -> Optional[int]:
        return pulumi.get(self, "dpd_probe_internal")

    @property
    @pulumi.getter(name="ikeDigestAlgorithms")
    def ike_digest_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ike_digest_algorithms")

    @property
    @pulumi.getter(name="ikeSaLifetime")
    def ike_sa_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "ike_sa_lifetime")

    @property
    @pulumi.getter(name="tunnelDfPolicy")
    def tunnel_df_policy(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_df_policy")

    @property
    @pulumi.getter(name="tunnelDigestAlgorithms")
    def tunnel_digest_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tunnel_digest_algorithms")

    @property
    @pulumi.getter(name="tunnelPfsEnabled")
    def tunnel_pfs_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "tunnel_pfs_enabled")

    @property
    @pulumi.getter(name="tunnelSaLifetime")
    def tunnel_sa_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "tunnel_sa_lifetime")


@pulumi.output_type
class NsxtNetworkDhcpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtNetworkDhcpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtNetworkDhcpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtNetworkDhcpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NsxtNetworkImportedStaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtNetworkImportedStaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtNetworkImportedStaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtNetworkImportedStaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class NsxtSecurityGroupMemberVm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vappId":
            suggest = "vapp_id"
        elif key == "vappName":
            suggest = "vapp_name"
        elif key == "vmId":
            suggest = "vm_id"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtSecurityGroupMemberVm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtSecurityGroupMemberVm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtSecurityGroupMemberVm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vapp_id: Optional[str] = None,
                 vapp_name: Optional[str] = None,
                 vm_id: Optional[str] = None,
                 vm_name: Optional[str] = None):
        if vapp_id is not None:
            pulumi.set(__self__, "vapp_id", vapp_id)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> Optional[str]:
        return pulumi.get(self, "vapp_id")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[str]:
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[str]:
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class NsxvDhcpRelayRelayAgent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkName":
            suggest = "network_name"
        elif key == "gatewayIpAddress":
            suggest = "gateway_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxvDhcpRelayRelayAgent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxvDhcpRelayRelayAgent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxvDhcpRelayRelayAgent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_name: str,
                 gateway_ip_address: Optional[str] = None):
        pulumi.set(__self__, "network_name", network_name)
        if gateway_ip_address is not None:
            pulumi.set(__self__, "gateway_ip_address", gateway_ip_address)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="gatewayIpAddress")
    def gateway_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "gateway_ip_address")


@pulumi.output_type
class NsxvFirewallRuleDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayInterfaces":
            suggest = "gateway_interfaces"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "ipSets":
            suggest = "ip_sets"
        elif key == "orgNetworks":
            suggest = "org_networks"
        elif key == "vmIds":
            suggest = "vm_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxvFirewallRuleDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxvFirewallRuleDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxvFirewallRuleDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude: Optional[bool] = None,
                 gateway_interfaces: Optional[Sequence[str]] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_sets: Optional[Sequence[str]] = None,
                 org_networks: Optional[Sequence[str]] = None,
                 vm_ids: Optional[Sequence[str]] = None):
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if gateway_interfaces is not None:
            pulumi.set(__self__, "gateway_interfaces", gateway_interfaces)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if org_networks is not None:
            pulumi.set(__self__, "org_networks", org_networks)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="gatewayInterfaces")
    def gateway_interfaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "gateway_interfaces")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter(name="orgNetworks")
    def org_networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "org_networks")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vm_ids")


@pulumi.output_type
class NsxvFirewallRuleService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePort":
            suggest = "source_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxvFirewallRuleService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxvFirewallRuleService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxvFirewallRuleService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 port: Optional[str] = None,
                 source_port: Optional[str] = None):
        pulumi.set(__self__, "protocol", protocol)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[str]:
        return pulumi.get(self, "source_port")


@pulumi.output_type
class NsxvFirewallRuleSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayInterfaces":
            suggest = "gateway_interfaces"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "ipSets":
            suggest = "ip_sets"
        elif key == "orgNetworks":
            suggest = "org_networks"
        elif key == "vmIds":
            suggest = "vm_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxvFirewallRuleSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxvFirewallRuleSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxvFirewallRuleSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude: Optional[bool] = None,
                 gateway_interfaces: Optional[Sequence[str]] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_sets: Optional[Sequence[str]] = None,
                 org_networks: Optional[Sequence[str]] = None,
                 vm_ids: Optional[Sequence[str]] = None):
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if gateway_interfaces is not None:
            pulumi.set(__self__, "gateway_interfaces", gateway_interfaces)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if org_networks is not None:
            pulumi.set(__self__, "org_networks", org_networks)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="gatewayInterfaces")
    def gateway_interfaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "gateway_interfaces")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter(name="orgNetworks")
    def org_networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "org_networks")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vm_ids")


@pulumi.output_type
class OrgLdapCustomSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "connectorType":
            suggest = "connector_type"
        elif key == "groupAttributes":
            suggest = "group_attributes"
        elif key == "userAttributes":
            suggest = "user_attributes"
        elif key == "baseDistinguishedName":
            suggest = "base_distinguished_name"
        elif key == "isSsl":
            suggest = "is_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLdapCustomSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLdapCustomSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLdapCustomSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_method: str,
                 connector_type: str,
                 group_attributes: 'outputs.OrgLdapCustomSettingsGroupAttributes',
                 port: int,
                 server: str,
                 user_attributes: 'outputs.OrgLdapCustomSettingsUserAttributes',
                 base_distinguished_name: Optional[str] = None,
                 is_ssl: Optional[bool] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "group_attributes", group_attributes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "user_attributes", user_attributes)
        if base_distinguished_name is not None:
            pulumi.set(__self__, "base_distinguished_name", base_distinguished_name)
        if is_ssl is not None:
            pulumi.set(__self__, "is_ssl", is_ssl)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> str:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="groupAttributes")
    def group_attributes(self) -> 'outputs.OrgLdapCustomSettingsGroupAttributes':
        return pulumi.get(self, "group_attributes")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> 'outputs.OrgLdapCustomSettingsUserAttributes':
        return pulumi.get(self, "user_attributes")

    @property
    @pulumi.getter(name="baseDistinguishedName")
    def base_distinguished_name(self) -> Optional[str]:
        return pulumi.get(self, "base_distinguished_name")

    @property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class OrgLdapCustomSettingsGroupAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupMembershipIdentifier":
            suggest = "group_membership_identifier"
        elif key == "objectClass":
            suggest = "object_class"
        elif key == "uniqueIdentifier":
            suggest = "unique_identifier"
        elif key == "groupBackLinkIdentifier":
            suggest = "group_back_link_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLdapCustomSettingsGroupAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLdapCustomSettingsGroupAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLdapCustomSettingsGroupAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_membership_identifier: str,
                 membership: str,
                 name: str,
                 object_class: str,
                 unique_identifier: str,
                 group_back_link_identifier: Optional[str] = None):
        pulumi.set(__self__, "group_membership_identifier", group_membership_identifier)
        pulumi.set(__self__, "membership", membership)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_class", object_class)
        pulumi.set(__self__, "unique_identifier", unique_identifier)
        if group_back_link_identifier is not None:
            pulumi.set(__self__, "group_back_link_identifier", group_back_link_identifier)

    @property
    @pulumi.getter(name="groupMembershipIdentifier")
    def group_membership_identifier(self) -> str:
        return pulumi.get(self, "group_membership_identifier")

    @property
    @pulumi.getter
    def membership(self) -> str:
        return pulumi.get(self, "membership")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> str:
        return pulumi.get(self, "object_class")

    @property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> str:
        return pulumi.get(self, "unique_identifier")

    @property
    @pulumi.getter(name="groupBackLinkIdentifier")
    def group_back_link_identifier(self) -> Optional[str]:
        return pulumi.get(self, "group_back_link_identifier")


@pulumi.output_type
class OrgLdapCustomSettingsUserAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "groupMembershipIdentifier":
            suggest = "group_membership_identifier"
        elif key == "objectClass":
            suggest = "object_class"
        elif key == "uniqueIdentifier":
            suggest = "unique_identifier"
        elif key == "groupBackLinkIdentifier":
            suggest = "group_back_link_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLdapCustomSettingsUserAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLdapCustomSettingsUserAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLdapCustomSettingsUserAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 email: str,
                 given_name: str,
                 group_membership_identifier: str,
                 object_class: str,
                 surname: str,
                 telephone: str,
                 unique_identifier: str,
                 username: str,
                 group_back_link_identifier: Optional[str] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "group_membership_identifier", group_membership_identifier)
        pulumi.set(__self__, "object_class", object_class)
        pulumi.set(__self__, "surname", surname)
        pulumi.set(__self__, "telephone", telephone)
        pulumi.set(__self__, "unique_identifier", unique_identifier)
        pulumi.set(__self__, "username", username)
        if group_back_link_identifier is not None:
            pulumi.set(__self__, "group_back_link_identifier", group_back_link_identifier)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="groupMembershipIdentifier")
    def group_membership_identifier(self) -> str:
        return pulumi.get(self, "group_membership_identifier")

    @property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> str:
        return pulumi.get(self, "object_class")

    @property
    @pulumi.getter
    def surname(self) -> str:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def telephone(self) -> str:
        return pulumi.get(self, "telephone")

    @property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> str:
        return pulumi.get(self, "unique_identifier")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="groupBackLinkIdentifier")
    def group_back_link_identifier(self) -> Optional[str]:
        return pulumi.get(self, "group_back_link_identifier")


@pulumi.output_type
class OrgMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OrgVappLease(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnStorageLeaseExpiration":
            suggest = "delete_on_storage_lease_expiration"
        elif key == "maximumRuntimeLeaseInSec":
            suggest = "maximum_runtime_lease_in_sec"
        elif key == "maximumStorageLeaseInSec":
            suggest = "maximum_storage_lease_in_sec"
        elif key == "powerOffOnRuntimeLeaseExpiration":
            suggest = "power_off_on_runtime_lease_expiration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgVappLease. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgVappLease.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgVappLease.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_storage_lease_expiration: bool,
                 maximum_runtime_lease_in_sec: int,
                 maximum_storage_lease_in_sec: int,
                 power_off_on_runtime_lease_expiration: bool):
        pulumi.set(__self__, "delete_on_storage_lease_expiration", delete_on_storage_lease_expiration)
        pulumi.set(__self__, "maximum_runtime_lease_in_sec", maximum_runtime_lease_in_sec)
        pulumi.set(__self__, "maximum_storage_lease_in_sec", maximum_storage_lease_in_sec)
        pulumi.set(__self__, "power_off_on_runtime_lease_expiration", power_off_on_runtime_lease_expiration)

    @property
    @pulumi.getter(name="deleteOnStorageLeaseExpiration")
    def delete_on_storage_lease_expiration(self) -> bool:
        return pulumi.get(self, "delete_on_storage_lease_expiration")

    @property
    @pulumi.getter(name="maximumRuntimeLeaseInSec")
    def maximum_runtime_lease_in_sec(self) -> int:
        return pulumi.get(self, "maximum_runtime_lease_in_sec")

    @property
    @pulumi.getter(name="maximumStorageLeaseInSec")
    def maximum_storage_lease_in_sec(self) -> int:
        return pulumi.get(self, "maximum_storage_lease_in_sec")

    @property
    @pulumi.getter(name="powerOffOnRuntimeLeaseExpiration")
    def power_off_on_runtime_lease_expiration(self) -> bool:
        return pulumi.get(self, "power_off_on_runtime_lease_expiration")


@pulumi.output_type
class OrgVappTemplateLease(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnStorageLeaseExpiration":
            suggest = "delete_on_storage_lease_expiration"
        elif key == "maximumStorageLeaseInSec":
            suggest = "maximum_storage_lease_in_sec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgVappTemplateLease. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgVappTemplateLease.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgVappTemplateLease.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_storage_lease_expiration: bool,
                 maximum_storage_lease_in_sec: int):
        pulumi.set(__self__, "delete_on_storage_lease_expiration", delete_on_storage_lease_expiration)
        pulumi.set(__self__, "maximum_storage_lease_in_sec", maximum_storage_lease_in_sec)

    @property
    @pulumi.getter(name="deleteOnStorageLeaseExpiration")
    def delete_on_storage_lease_expiration(self) -> bool:
        return pulumi.get(self, "delete_on_storage_lease_expiration")

    @property
    @pulumi.getter(name="maximumStorageLeaseInSec")
    def maximum_storage_lease_in_sec(self) -> int:
        return pulumi.get(self, "maximum_storage_lease_in_sec")


@pulumi.output_type
class OrgVdcAccessControlSharedWith(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "subjectName":
            suggest = "subject_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgVdcAccessControlSharedWith. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgVdcAccessControlSharedWith.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgVdcAccessControlSharedWith.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: str,
                 group_id: Optional[str] = None,
                 subject_name: Optional[str] = None,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "access_level", access_level)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[str]:
        return pulumi.get(self, "subject_name")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class OrgVdcComputeCapacity(dict):
    def __init__(__self__, *,
                 cpu: 'outputs.OrgVdcComputeCapacityCpu',
                 memory: 'outputs.OrgVdcComputeCapacityMemory'):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> 'outputs.OrgVdcComputeCapacityCpu':
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> 'outputs.OrgVdcComputeCapacityMemory':
        return pulumi.get(self, "memory")


@pulumi.output_type
class OrgVdcComputeCapacityCpu(dict):
    def __init__(__self__, *,
                 allocated: Optional[int] = None,
                 limit: Optional[int] = None,
                 reserved: Optional[int] = None,
                 used: Optional[int] = None):
        if allocated is not None:
            pulumi.set(__self__, "allocated", allocated)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> Optional[int]:
        return pulumi.get(self, "allocated")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def reserved(self) -> Optional[int]:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter
    def used(self) -> Optional[int]:
        return pulumi.get(self, "used")


@pulumi.output_type
class OrgVdcComputeCapacityMemory(dict):
    def __init__(__self__, *,
                 allocated: Optional[int] = None,
                 limit: Optional[int] = None,
                 reserved: Optional[int] = None,
                 used: Optional[int] = None):
        if allocated is not None:
            pulumi.set(__self__, "allocated", allocated)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> Optional[int]:
        return pulumi.get(self, "allocated")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def reserved(self) -> Optional[int]:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter
    def used(self) -> Optional[int]:
        return pulumi.get(self, "used")


@pulumi.output_type
class OrgVdcMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgVdcMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgVdcMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgVdcMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OrgVdcStorageProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageUsedInMb":
            suggest = "storage_used_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgVdcStorageProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgVdcStorageProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgVdcStorageProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: bool,
                 limit: int,
                 name: str,
                 enabled: Optional[bool] = None,
                 storage_used_in_mb: Optional[int] = None):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "name", name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if storage_used_in_mb is not None:
            pulumi.set(__self__, "storage_used_in_mb", storage_used_in_mb)

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="storageUsedInMb")
    def storage_used_in_mb(self) -> Optional[int]:
        return pulumi.get(self, "storage_used_in_mb")


@pulumi.output_type
class VappAccessControlSharedWith(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "subjectName":
            suggest = "subject_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappAccessControlSharedWith. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappAccessControlSharedWith.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappAccessControlSharedWith.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: str,
                 group_id: Optional[str] = None,
                 subject_name: Optional[str] = None,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "access_level", access_level)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[str]:
        return pulumi.get(self, "subject_name")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class VappFirewallRulesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "destinationVmId":
            suggest = "destination_vm_id"
        elif key == "destinationVmIpType":
            suggest = "destination_vm_ip_type"
        elif key == "destinationVmNicId":
            suggest = "destination_vm_nic_id"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "sourceVmId":
            suggest = "source_vm_id"
        elif key == "sourceVmIpType":
            suggest = "source_vm_ip_type"
        elif key == "sourceVmNicId":
            suggest = "source_vm_nic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappFirewallRulesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappFirewallRulesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappFirewallRulesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ip: Optional[str] = None,
                 destination_port: Optional[str] = None,
                 destination_vm_id: Optional[str] = None,
                 destination_vm_ip_type: Optional[str] = None,
                 destination_vm_nic_id: Optional[int] = None,
                 enable_logging: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 policy: Optional[str] = None,
                 protocol: Optional[str] = None,
                 source_ip: Optional[str] = None,
                 source_port: Optional[str] = None,
                 source_vm_id: Optional[str] = None,
                 source_vm_ip_type: Optional[str] = None,
                 source_vm_nic_id: Optional[int] = None):
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_vm_id is not None:
            pulumi.set(__self__, "destination_vm_id", destination_vm_id)
        if destination_vm_ip_type is not None:
            pulumi.set(__self__, "destination_vm_ip_type", destination_vm_ip_type)
        if destination_vm_nic_id is not None:
            pulumi.set(__self__, "destination_vm_nic_id", destination_vm_nic_id)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_vm_id is not None:
            pulumi.set(__self__, "source_vm_id", source_vm_id)
        if source_vm_ip_type is not None:
            pulumi.set(__self__, "source_vm_ip_type", source_vm_ip_type)
        if source_vm_nic_id is not None:
            pulumi.set(__self__, "source_vm_nic_id", source_vm_nic_id)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[str]:
        return pulumi.get(self, "destination_ip")

    @property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[str]:
        return pulumi.get(self, "destination_port")

    @property
    @pulumi.getter(name="destinationVmId")
    def destination_vm_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_vm_id")

    @property
    @pulumi.getter(name="destinationVmIpType")
    def destination_vm_ip_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_vm_ip_type")

    @property
    @pulumi.getter(name="destinationVmNicId")
    def destination_vm_nic_id(self) -> Optional[int]:
        return pulumi.get(self, "destination_vm_nic_id")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[str]:
        return pulumi.get(self, "source_port")

    @property
    @pulumi.getter(name="sourceVmId")
    def source_vm_id(self) -> Optional[str]:
        return pulumi.get(self, "source_vm_id")

    @property
    @pulumi.getter(name="sourceVmIpType")
    def source_vm_ip_type(self) -> Optional[str]:
        return pulumi.get(self, "source_vm_ip_type")

    @property
    @pulumi.getter(name="sourceVmNicId")
    def source_vm_nic_id(self) -> Optional[int]:
        return pulumi.get(self, "source_vm_nic_id")


@pulumi.output_type
class VappLease(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runtimeLeaseInSec":
            suggest = "runtime_lease_in_sec"
        elif key == "storageLeaseInSec":
            suggest = "storage_lease_in_sec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappLease. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappLease.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappLease.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 runtime_lease_in_sec: int,
                 storage_lease_in_sec: int):
        pulumi.set(__self__, "runtime_lease_in_sec", runtime_lease_in_sec)
        pulumi.set(__self__, "storage_lease_in_sec", storage_lease_in_sec)

    @property
    @pulumi.getter(name="runtimeLeaseInSec")
    def runtime_lease_in_sec(self) -> int:
        return pulumi.get(self, "runtime_lease_in_sec")

    @property
    @pulumi.getter(name="storageLeaseInSec")
    def storage_lease_in_sec(self) -> int:
        return pulumi.get(self, "storage_lease_in_sec")


@pulumi.output_type
class VappMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VappNatRulesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmId":
            suggest = "vm_id"
        elif key == "vmNicId":
            suggest = "vm_nic_id"
        elif key == "externalIp":
            suggest = "external_ip"
        elif key == "externalPort":
            suggest = "external_port"
        elif key == "forwardToPort":
            suggest = "forward_to_port"
        elif key == "mappingMode":
            suggest = "mapping_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappNatRulesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappNatRulesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappNatRulesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_id: str,
                 vm_nic_id: int,
                 external_ip: Optional[str] = None,
                 external_port: Optional[int] = None,
                 forward_to_port: Optional[int] = None,
                 id: Optional[str] = None,
                 mapping_mode: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vm_nic_id", vm_nic_id)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if forward_to_port is not None:
            pulumi.set(__self__, "forward_to_port", forward_to_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mapping_mode is not None:
            pulumi.set(__self__, "mapping_mode", mapping_mode)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmNicId")
    def vm_nic_id(self) -> int:
        return pulumi.get(self, "vm_nic_id")

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[str]:
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[int]:
        return pulumi.get(self, "external_port")

    @property
    @pulumi.getter(name="forwardToPort")
    def forward_to_port(self) -> Optional[int]:
        return pulumi.get(self, "forward_to_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mappingMode")
    def mapping_mode(self) -> Optional[str]:
        return pulumi.get(self, "mapping_mode")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class VappNetworkDhcpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startAddress":
            suggest = "start_address"
        elif key == "defaultLeaseTime":
            suggest = "default_lease_time"
        elif key == "endAddress":
            suggest = "end_address"
        elif key == "maxLeaseTime":
            suggest = "max_lease_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappNetworkDhcpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappNetworkDhcpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappNetworkDhcpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_address: str,
                 default_lease_time: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 end_address: Optional[str] = None,
                 max_lease_time: Optional[int] = None):
        pulumi.set(__self__, "start_address", start_address)
        if default_lease_time is not None:
            pulumi.set(__self__, "default_lease_time", default_lease_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if end_address is not None:
            pulumi.set(__self__, "end_address", end_address)
        if max_lease_time is not None:
            pulumi.set(__self__, "max_lease_time", max_lease_time)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> Optional[int]:
        return pulumi.get(self, "default_lease_time")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> Optional[str]:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> Optional[int]:
        return pulumi.get(self, "max_lease_time")


@pulumi.output_type
class VappNetworkStaticIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "startAddress":
            suggest = "start_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappNetworkStaticIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappNetworkStaticIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappNetworkStaticIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class VappStaticRoutingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkCidr":
            suggest = "network_cidr"
        elif key == "nextHopIp":
            suggest = "next_hop_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappStaticRoutingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappStaticRoutingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappStaticRoutingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 network_cidr: str,
                 next_hop_ip: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_cidr", network_cidr)
        pulumi.set(__self__, "next_hop_ip", next_hop_ip)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkCidr")
    def network_cidr(self) -> str:
        return pulumi.get(self, "network_cidr")

    @property
    @pulumi.getter(name="nextHopIp")
    def next_hop_ip(self) -> str:
        return pulumi.get(self, "next_hop_ip")


@pulumi.output_type
class VappVmCustomization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminPassword":
            suggest = "admin_password"
        elif key == "allowLocalAdminPassword":
            suggest = "allow_local_admin_password"
        elif key == "autoGeneratePassword":
            suggest = "auto_generate_password"
        elif key == "changeSid":
            suggest = "change_sid"
        elif key == "joinDomain":
            suggest = "join_domain"
        elif key == "joinDomainAccountOu":
            suggest = "join_domain_account_ou"
        elif key == "joinDomainName":
            suggest = "join_domain_name"
        elif key == "joinDomainPassword":
            suggest = "join_domain_password"
        elif key == "joinDomainUser":
            suggest = "join_domain_user"
        elif key == "joinOrgDomain":
            suggest = "join_org_domain"
        elif key == "mustChangePasswordOnFirstLogin":
            suggest = "must_change_password_on_first_login"
        elif key == "numberOfAutoLogons":
            suggest = "number_of_auto_logons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappVmCustomization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappVmCustomization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappVmCustomization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 allow_local_admin_password: Optional[bool] = None,
                 auto_generate_password: Optional[bool] = None,
                 change_sid: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force: Optional[bool] = None,
                 initscript: Optional[str] = None,
                 join_domain: Optional[bool] = None,
                 join_domain_account_ou: Optional[str] = None,
                 join_domain_name: Optional[str] = None,
                 join_domain_password: Optional[str] = None,
                 join_domain_user: Optional[str] = None,
                 join_org_domain: Optional[bool] = None,
                 must_change_password_on_first_login: Optional[bool] = None,
                 number_of_auto_logons: Optional[int] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if allow_local_admin_password is not None:
            pulumi.set(__self__, "allow_local_admin_password", allow_local_admin_password)
        if auto_generate_password is not None:
            pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if change_sid is not None:
            pulumi.set(__self__, "change_sid", change_sid)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if initscript is not None:
            pulumi.set(__self__, "initscript", initscript)
        if join_domain is not None:
            pulumi.set(__self__, "join_domain", join_domain)
        if join_domain_account_ou is not None:
            pulumi.set(__self__, "join_domain_account_ou", join_domain_account_ou)
        if join_domain_name is not None:
            pulumi.set(__self__, "join_domain_name", join_domain_name)
        if join_domain_password is not None:
            pulumi.set(__self__, "join_domain_password", join_domain_password)
        if join_domain_user is not None:
            pulumi.set(__self__, "join_domain_user", join_domain_user)
        if join_org_domain is not None:
            pulumi.set(__self__, "join_org_domain", join_org_domain)
        if must_change_password_on_first_login is not None:
            pulumi.set(__self__, "must_change_password_on_first_login", must_change_password_on_first_login)
        if number_of_auto_logons is not None:
            pulumi.set(__self__, "number_of_auto_logons", number_of_auto_logons)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="allowLocalAdminPassword")
    def allow_local_admin_password(self) -> Optional[bool]:
        return pulumi.get(self, "allow_local_admin_password")

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> Optional[bool]:
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter(name="changeSid")
    def change_sid(self) -> Optional[bool]:
        return pulumi.get(self, "change_sid")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def initscript(self) -> Optional[str]:
        return pulumi.get(self, "initscript")

    @property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> Optional[bool]:
        return pulumi.get(self, "join_domain")

    @property
    @pulumi.getter(name="joinDomainAccountOu")
    def join_domain_account_ou(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_account_ou")

    @property
    @pulumi.getter(name="joinDomainName")
    def join_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_name")

    @property
    @pulumi.getter(name="joinDomainPassword")
    def join_domain_password(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_password")

    @property
    @pulumi.getter(name="joinDomainUser")
    def join_domain_user(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_user")

    @property
    @pulumi.getter(name="joinOrgDomain")
    def join_org_domain(self) -> Optional[bool]:
        return pulumi.get(self, "join_org_domain")

    @property
    @pulumi.getter(name="mustChangePasswordOnFirstLogin")
    def must_change_password_on_first_login(self) -> Optional[bool]:
        return pulumi.get(self, "must_change_password_on_first_login")

    @property
    @pulumi.getter(name="numberOfAutoLogons")
    def number_of_auto_logons(self) -> Optional[int]:
        return pulumi.get(self, "number_of_auto_logons")


@pulumi.output_type
class VappVmDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"
        elif key == "unitNumber":
            suggest = "unit_number"
        elif key == "sizeInMb":
            suggest = "size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappVmDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappVmDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappVmDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: str,
                 name: str,
                 unit_number: str,
                 size_in_mb: Optional[int] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit_number", unit_number)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> str:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> str:
        return pulumi.get(self, "unit_number")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[int]:
        return pulumi.get(self, "size_in_mb")


@pulumi.output_type
class VappVmInternalDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"
        elif key == "busType":
            suggest = "bus_type"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "sizeInMb":
            suggest = "size_in_mb"
        elif key == "storageProfile":
            suggest = "storage_profile"
        elif key == "thinProvisioned":
            suggest = "thin_provisioned"
        elif key == "unitNumber":
            suggest = "unit_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappVmInternalDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappVmInternalDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappVmInternalDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: Optional[int] = None,
                 bus_type: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 iops: Optional[int] = None,
                 size_in_mb: Optional[int] = None,
                 storage_profile: Optional[str] = None,
                 thin_provisioned: Optional[bool] = None,
                 unit_number: Optional[int] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if thin_provisioned is not None:
            pulumi.set(__self__, "thin_provisioned", thin_provisioned)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[int]:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[str]:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[int]:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[str]:
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="thinProvisioned")
    def thin_provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "thin_provisioned")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class VappVmMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappVmMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappVmMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappVmMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VappVmNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterType":
            suggest = "adapter_type"
        elif key == "ipAllocationMode":
            suggest = "ip_allocation_mode"
        elif key == "isPrimary":
            suggest = "is_primary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappVmNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappVmNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappVmNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 adapter_type: Optional[str] = None,
                 connected: Optional[bool] = None,
                 ip: Optional[str] = None,
                 ip_allocation_mode: Optional[str] = None,
                 is_primary: Optional[bool] = None,
                 mac: Optional[str] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if adapter_type is not None:
            pulumi.set(__self__, "adapter_type", adapter_type)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_allocation_mode is not None:
            pulumi.set(__self__, "ip_allocation_mode", ip_allocation_mode)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> Optional[str]:
        return pulumi.get(self, "adapter_type")

    @property
    @pulumi.getter
    def connected(self) -> Optional[bool]:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAllocationMode")
    def ip_allocation_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_allocation_mode")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VappVmOverrideTemplateDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"
        elif key == "busType":
            suggest = "bus_type"
        elif key == "sizeInMb":
            suggest = "size_in_mb"
        elif key == "unitNumber":
            suggest = "unit_number"
        elif key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VappVmOverrideTemplateDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VappVmOverrideTemplateDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VappVmOverrideTemplateDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: int,
                 bus_type: str,
                 size_in_mb: int,
                 unit_number: int,
                 iops: Optional[int] = None,
                 storage_profile: Optional[str] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "bus_type", bus_type)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "unit_number", unit_number)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> int:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> str:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> int:
        return pulumi.get(self, "unit_number")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[str]:
        return pulumi.get(self, "storage_profile")


@pulumi.output_type
class VdcGroupParticipatingOrgVdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "faultDomainTag":
            suggest = "fault_domain_tag"
        elif key == "isRemoteOrg":
            suggest = "is_remote_org"
        elif key == "networkProviderScope":
            suggest = "network_provider_scope"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "orgName":
            suggest = "org_name"
        elif key == "siteId":
            suggest = "site_id"
        elif key == "siteName":
            suggest = "site_name"
        elif key == "vdcId":
            suggest = "vdc_id"
        elif key == "vdcName":
            suggest = "vdc_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VdcGroupParticipatingOrgVdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VdcGroupParticipatingOrgVdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VdcGroupParticipatingOrgVdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fault_domain_tag: Optional[str] = None,
                 is_remote_org: Optional[bool] = None,
                 network_provider_scope: Optional[str] = None,
                 org_id: Optional[str] = None,
                 org_name: Optional[str] = None,
                 site_id: Optional[str] = None,
                 site_name: Optional[str] = None,
                 status: Optional[str] = None,
                 vdc_id: Optional[str] = None,
                 vdc_name: Optional[str] = None):
        if fault_domain_tag is not None:
            pulumi.set(__self__, "fault_domain_tag", fault_domain_tag)
        if is_remote_org is not None:
            pulumi.set(__self__, "is_remote_org", is_remote_org)
        if network_provider_scope is not None:
            pulumi.set(__self__, "network_provider_scope", network_provider_scope)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_name is not None:
            pulumi.set(__self__, "org_name", org_name)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdc_id is not None:
            pulumi.set(__self__, "vdc_id", vdc_id)
        if vdc_name is not None:
            pulumi.set(__self__, "vdc_name", vdc_name)

    @property
    @pulumi.getter(name="faultDomainTag")
    def fault_domain_tag(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain_tag")

    @property
    @pulumi.getter(name="isRemoteOrg")
    def is_remote_org(self) -> Optional[bool]:
        return pulumi.get(self, "is_remote_org")

    @property
    @pulumi.getter(name="networkProviderScope")
    def network_provider_scope(self) -> Optional[str]:
        return pulumi.get(self, "network_provider_scope")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> Optional[str]:
        return pulumi.get(self, "org_name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[str]:
        return pulumi.get(self, "site_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[str]:
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="vdcName")
    def vdc_name(self) -> Optional[str]:
        return pulumi.get(self, "vdc_name")


@pulumi.output_type
class VmCustomization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminPassword":
            suggest = "admin_password"
        elif key == "allowLocalAdminPassword":
            suggest = "allow_local_admin_password"
        elif key == "autoGeneratePassword":
            suggest = "auto_generate_password"
        elif key == "changeSid":
            suggest = "change_sid"
        elif key == "joinDomain":
            suggest = "join_domain"
        elif key == "joinDomainAccountOu":
            suggest = "join_domain_account_ou"
        elif key == "joinDomainName":
            suggest = "join_domain_name"
        elif key == "joinDomainPassword":
            suggest = "join_domain_password"
        elif key == "joinDomainUser":
            suggest = "join_domain_user"
        elif key == "joinOrgDomain":
            suggest = "join_org_domain"
        elif key == "mustChangePasswordOnFirstLogin":
            suggest = "must_change_password_on_first_login"
        elif key == "numberOfAutoLogons":
            suggest = "number_of_auto_logons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmCustomization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmCustomization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmCustomization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 allow_local_admin_password: Optional[bool] = None,
                 auto_generate_password: Optional[bool] = None,
                 change_sid: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force: Optional[bool] = None,
                 initscript: Optional[str] = None,
                 join_domain: Optional[bool] = None,
                 join_domain_account_ou: Optional[str] = None,
                 join_domain_name: Optional[str] = None,
                 join_domain_password: Optional[str] = None,
                 join_domain_user: Optional[str] = None,
                 join_org_domain: Optional[bool] = None,
                 must_change_password_on_first_login: Optional[bool] = None,
                 number_of_auto_logons: Optional[int] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if allow_local_admin_password is not None:
            pulumi.set(__self__, "allow_local_admin_password", allow_local_admin_password)
        if auto_generate_password is not None:
            pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if change_sid is not None:
            pulumi.set(__self__, "change_sid", change_sid)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if initscript is not None:
            pulumi.set(__self__, "initscript", initscript)
        if join_domain is not None:
            pulumi.set(__self__, "join_domain", join_domain)
        if join_domain_account_ou is not None:
            pulumi.set(__self__, "join_domain_account_ou", join_domain_account_ou)
        if join_domain_name is not None:
            pulumi.set(__self__, "join_domain_name", join_domain_name)
        if join_domain_password is not None:
            pulumi.set(__self__, "join_domain_password", join_domain_password)
        if join_domain_user is not None:
            pulumi.set(__self__, "join_domain_user", join_domain_user)
        if join_org_domain is not None:
            pulumi.set(__self__, "join_org_domain", join_org_domain)
        if must_change_password_on_first_login is not None:
            pulumi.set(__self__, "must_change_password_on_first_login", must_change_password_on_first_login)
        if number_of_auto_logons is not None:
            pulumi.set(__self__, "number_of_auto_logons", number_of_auto_logons)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="allowLocalAdminPassword")
    def allow_local_admin_password(self) -> Optional[bool]:
        return pulumi.get(self, "allow_local_admin_password")

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> Optional[bool]:
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter(name="changeSid")
    def change_sid(self) -> Optional[bool]:
        return pulumi.get(self, "change_sid")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def initscript(self) -> Optional[str]:
        return pulumi.get(self, "initscript")

    @property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> Optional[bool]:
        return pulumi.get(self, "join_domain")

    @property
    @pulumi.getter(name="joinDomainAccountOu")
    def join_domain_account_ou(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_account_ou")

    @property
    @pulumi.getter(name="joinDomainName")
    def join_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_name")

    @property
    @pulumi.getter(name="joinDomainPassword")
    def join_domain_password(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_password")

    @property
    @pulumi.getter(name="joinDomainUser")
    def join_domain_user(self) -> Optional[str]:
        return pulumi.get(self, "join_domain_user")

    @property
    @pulumi.getter(name="joinOrgDomain")
    def join_org_domain(self) -> Optional[bool]:
        return pulumi.get(self, "join_org_domain")

    @property
    @pulumi.getter(name="mustChangePasswordOnFirstLogin")
    def must_change_password_on_first_login(self) -> Optional[bool]:
        return pulumi.get(self, "must_change_password_on_first_login")

    @property
    @pulumi.getter(name="numberOfAutoLogons")
    def number_of_auto_logons(self) -> Optional[int]:
        return pulumi.get(self, "number_of_auto_logons")


@pulumi.output_type
class VmDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"
        elif key == "unitNumber":
            suggest = "unit_number"
        elif key == "sizeInMb":
            suggest = "size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: str,
                 name: str,
                 unit_number: str,
                 size_in_mb: Optional[int] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit_number", unit_number)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> str:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> str:
        return pulumi.get(self, "unit_number")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[int]:
        return pulumi.get(self, "size_in_mb")


@pulumi.output_type
class VmInternalDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"
        elif key == "busType":
            suggest = "bus_type"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "sizeInMb":
            suggest = "size_in_mb"
        elif key == "storageProfile":
            suggest = "storage_profile"
        elif key == "thinProvisioned":
            suggest = "thin_provisioned"
        elif key == "unitNumber":
            suggest = "unit_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmInternalDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmInternalDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmInternalDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: Optional[int] = None,
                 bus_type: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 iops: Optional[int] = None,
                 size_in_mb: Optional[int] = None,
                 storage_profile: Optional[str] = None,
                 thin_provisioned: Optional[bool] = None,
                 unit_number: Optional[int] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if thin_provisioned is not None:
            pulumi.set(__self__, "thin_provisioned", thin_provisioned)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[int]:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[str]:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[int]:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[str]:
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="thinProvisioned")
    def thin_provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "thin_provisioned")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class VmMetadataEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSystem":
            suggest = "is_system"
        elif key == "userAccess":
            suggest = "user_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmMetadataEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmMetadataEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmMetadataEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VmNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterType":
            suggest = "adapter_type"
        elif key == "ipAllocationMode":
            suggest = "ip_allocation_mode"
        elif key == "isPrimary":
            suggest = "is_primary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 adapter_type: Optional[str] = None,
                 connected: Optional[bool] = None,
                 ip: Optional[str] = None,
                 ip_allocation_mode: Optional[str] = None,
                 is_primary: Optional[bool] = None,
                 mac: Optional[str] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if adapter_type is not None:
            pulumi.set(__self__, "adapter_type", adapter_type)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_allocation_mode is not None:
            pulumi.set(__self__, "ip_allocation_mode", ip_allocation_mode)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> Optional[str]:
        return pulumi.get(self, "adapter_type")

    @property
    @pulumi.getter
    def connected(self) -> Optional[bool]:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAllocationMode")
    def ip_allocation_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_allocation_mode")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VmOverrideTemplateDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"
        elif key == "busType":
            suggest = "bus_type"
        elif key == "sizeInMb":
            suggest = "size_in_mb"
        elif key == "unitNumber":
            suggest = "unit_number"
        elif key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmOverrideTemplateDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmOverrideTemplateDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmOverrideTemplateDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: int,
                 bus_type: str,
                 size_in_mb: int,
                 unit_number: int,
                 iops: Optional[int] = None,
                 storage_profile: Optional[str] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "bus_type", bus_type)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "unit_number", unit_number)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> int:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> str:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> int:
        return pulumi.get(self, "unit_number")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[str]:
        return pulumi.get(self, "storage_profile")


@pulumi.output_type
class VmSizingPolicyCpu(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coresPerSocket":
            suggest = "cores_per_socket"
        elif key == "limitInMhz":
            suggest = "limit_in_mhz"
        elif key == "reservationGuarantee":
            suggest = "reservation_guarantee"
        elif key == "speedInMhz":
            suggest = "speed_in_mhz"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmSizingPolicyCpu. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmSizingPolicyCpu.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmSizingPolicyCpu.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cores_per_socket: Optional[str] = None,
                 count: Optional[str] = None,
                 limit_in_mhz: Optional[str] = None,
                 reservation_guarantee: Optional[str] = None,
                 shares: Optional[str] = None,
                 speed_in_mhz: Optional[str] = None):
        if cores_per_socket is not None:
            pulumi.set(__self__, "cores_per_socket", cores_per_socket)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if limit_in_mhz is not None:
            pulumi.set(__self__, "limit_in_mhz", limit_in_mhz)
        if reservation_guarantee is not None:
            pulumi.set(__self__, "reservation_guarantee", reservation_guarantee)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if speed_in_mhz is not None:
            pulumi.set(__self__, "speed_in_mhz", speed_in_mhz)

    @property
    @pulumi.getter(name="coresPerSocket")
    def cores_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "cores_per_socket")

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="limitInMhz")
    def limit_in_mhz(self) -> Optional[str]:
        return pulumi.get(self, "limit_in_mhz")

    @property
    @pulumi.getter(name="reservationGuarantee")
    def reservation_guarantee(self) -> Optional[str]:
        return pulumi.get(self, "reservation_guarantee")

    @property
    @pulumi.getter
    def shares(self) -> Optional[str]:
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter(name="speedInMhz")
    def speed_in_mhz(self) -> Optional[str]:
        return pulumi.get(self, "speed_in_mhz")


@pulumi.output_type
class VmSizingPolicyMemory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "limitInMb":
            suggest = "limit_in_mb"
        elif key == "reservationGuarantee":
            suggest = "reservation_guarantee"
        elif key == "sizeInMb":
            suggest = "size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmSizingPolicyMemory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmSizingPolicyMemory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmSizingPolicyMemory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 limit_in_mb: Optional[str] = None,
                 reservation_guarantee: Optional[str] = None,
                 shares: Optional[str] = None,
                 size_in_mb: Optional[str] = None):
        if limit_in_mb is not None:
            pulumi.set(__self__, "limit_in_mb", limit_in_mb)
        if reservation_guarantee is not None:
            pulumi.set(__self__, "reservation_guarantee", reservation_guarantee)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="limitInMb")
    def limit_in_mb(self) -> Optional[str]:
        return pulumi.get(self, "limit_in_mb")

    @property
    @pulumi.getter(name="reservationGuarantee")
    def reservation_guarantee(self) -> Optional[str]:
        return pulumi.get(self, "reservation_guarantee")

    @property
    @pulumi.getter
    def shares(self) -> Optional[str]:
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mb")


@pulumi.output_type
class GetCatalogFilterResult(dict):
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['outputs.GetCatalogFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetCatalogFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetCatalogFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetCatalogItemFilterResult(dict):
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['outputs.GetCatalogItemFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetCatalogItemFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetCatalogItemFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetCatalogItemMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCatalogMediaFilterResult(dict):
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['outputs.GetCatalogMediaFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetCatalogMediaFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetCatalogMediaFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetCatalogMediaMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCatalogMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCatalogVappTemplateFilterResult(dict):
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['outputs.GetCatalogVappTemplateFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetCatalogVappTemplateFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetCatalogVappTemplateFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetCatalogVappTemplateMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEdgegatewayExternalNetworkResult(dict):
    def __init__(__self__, *,
                 enable_rate_limit: bool,
                 incoming_rate_limit: float,
                 name: str,
                 outgoing_rate_limit: float,
                 subnets: Sequence['outputs.GetEdgegatewayExternalNetworkSubnetResult']):
        pulumi.set(__self__, "enable_rate_limit", enable_rate_limit)
        pulumi.set(__self__, "incoming_rate_limit", incoming_rate_limit)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "outgoing_rate_limit", outgoing_rate_limit)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="enableRateLimit")
    def enable_rate_limit(self) -> bool:
        return pulumi.get(self, "enable_rate_limit")

    @property
    @pulumi.getter(name="incomingRateLimit")
    def incoming_rate_limit(self) -> float:
        return pulumi.get(self, "incoming_rate_limit")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outgoingRateLimit")
    def outgoing_rate_limit(self) -> float:
        return pulumi.get(self, "outgoing_rate_limit")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetEdgegatewayExternalNetworkSubnetResult']:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class GetEdgegatewayExternalNetworkSubnetResult(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip_address: str,
                 netmask: str,
                 suballocate_pools: Sequence['outputs.GetEdgegatewayExternalNetworkSubnetSuballocatePoolResult'],
                 use_for_default_route: bool):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "suballocate_pools", suballocate_pools)
        pulumi.set(__self__, "use_for_default_route", use_for_default_route)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="suballocatePools")
    def suballocate_pools(self) -> Sequence['outputs.GetEdgegatewayExternalNetworkSubnetSuballocatePoolResult']:
        return pulumi.get(self, "suballocate_pools")

    @property
    @pulumi.getter(name="useForDefaultRoute")
    def use_for_default_route(self) -> bool:
        return pulumi.get(self, "use_for_default_route")


@pulumi.output_type
class GetEdgegatewayExternalNetworkSubnetSuballocatePoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetEdgegatewayFilterResult(dict):
    def __init__(__self__, *,
                 name_regex: Optional[str] = None):
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetExternalNetworkIpScopeResult(dict):
    def __init__(__self__, *,
                 dns1: str,
                 dns2: str,
                 dns_suffix: str,
                 gateway: str,
                 netmask: str,
                 static_ip_pools: Sequence['outputs.GetExternalNetworkIpScopeStaticIpPoolResult']):
        pulumi.set(__self__, "dns1", dns1)
        pulumi.set(__self__, "dns2", dns2)
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "static_ip_pools", static_ip_pools)

    @property
    @pulumi.getter
    def dns1(self) -> str:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Sequence['outputs.GetExternalNetworkIpScopeStaticIpPoolResult']:
        return pulumi.get(self, "static_ip_pools")


@pulumi.output_type
class GetExternalNetworkIpScopeStaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetExternalNetworkV2IpScopeResult(dict):
    def __init__(__self__, *,
                 gateway: str,
                 prefix_length: int,
                 dns1: Optional[str] = None,
                 dns2: Optional[str] = None,
                 dns_suffix: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 static_ip_pools: Optional[Sequence['outputs.GetExternalNetworkV2IpScopeStaticIpPoolResult']] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def dns1(self) -> Optional[str]:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> Optional[str]:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[str]:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[Sequence['outputs.GetExternalNetworkV2IpScopeStaticIpPoolResult']]:
        return pulumi.get(self, "static_ip_pools")


@pulumi.output_type
class GetExternalNetworkV2IpScopeStaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetExternalNetworkV2NsxtNetworkResult(dict):
    def __init__(__self__, *,
                 nsxt_manager_id: str,
                 nsxt_segment_name: str,
                 nsxt_tier0_router_id: str):
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        pulumi.set(__self__, "nsxt_segment_name", nsxt_segment_name)
        pulumi.set(__self__, "nsxt_tier0_router_id", nsxt_tier0_router_id)

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> str:
        return pulumi.get(self, "nsxt_manager_id")

    @property
    @pulumi.getter(name="nsxtSegmentName")
    def nsxt_segment_name(self) -> str:
        return pulumi.get(self, "nsxt_segment_name")

    @property
    @pulumi.getter(name="nsxtTier0RouterId")
    def nsxt_tier0_router_id(self) -> str:
        return pulumi.get(self, "nsxt_tier0_router_id")


@pulumi.output_type
class GetExternalNetworkV2VsphereNetworkResult(dict):
    def __init__(__self__, *,
                 portgroup_id: str,
                 vcenter_id: str):
        pulumi.set(__self__, "portgroup_id", portgroup_id)
        pulumi.set(__self__, "vcenter_id", vcenter_id)

    @property
    @pulumi.getter(name="portgroupId")
    def portgroup_id(self) -> str:
        return pulumi.get(self, "portgroup_id")

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> str:
        return pulumi.get(self, "vcenter_id")


@pulumi.output_type
class GetExternalNetworkVsphereNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 vcenter: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcenter", vcenter)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcenter(self) -> str:
        return pulumi.get(self, "vcenter")


@pulumi.output_type
class GetIndependentDiskMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLbServerPoolMemberResult(dict):
    def __init__(__self__, *,
                 condition: str,
                 id: str,
                 ip_address: str,
                 max_connections: int,
                 min_connections: int,
                 monitor_port: int,
                 name: str,
                 port: int,
                 weight: int):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "max_connections", max_connections)
        pulumi.set(__self__, "min_connections", min_connections)
        pulumi.set(__self__, "monitor_port", monitor_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> int:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="minConnections")
    def min_connections(self) -> int:
        return pulumi.get(self, "min_connections")

    @property
    @pulumi.getter(name="monitorPort")
    def monitor_port(self) -> int:
        return pulumi.get(self, "monitor_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetNetworkDirectFilterResult(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetNetworkDirectFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetNetworkDirectFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetNetworkDirectFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetNetworkDirectMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkIsolatedDhcpPoolResult(dict):
    def __init__(__self__, *,
                 default_lease_time: int,
                 end_address: str,
                 max_lease_time: int,
                 start_address: str):
        pulumi.set(__self__, "default_lease_time", default_lease_time)
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "max_lease_time", max_lease_time)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> int:
        return pulumi.get(self, "default_lease_time")

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> int:
        return pulumi.get(self, "max_lease_time")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNetworkIsolatedFilterResult(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetNetworkIsolatedFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetNetworkIsolatedFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetNetworkIsolatedFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetNetworkIsolatedMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkIsolatedStaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNetworkIsolatedV2FilterResult(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetNetworkIsolatedV2MetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkIsolatedV2StaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNetworkRoutedDhcpPoolResult(dict):
    def __init__(__self__, *,
                 default_lease_time: int,
                 end_address: str,
                 max_lease_time: int,
                 start_address: str):
        pulumi.set(__self__, "default_lease_time", default_lease_time)
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "max_lease_time", max_lease_time)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> int:
        return pulumi.get(self, "default_lease_time")

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> int:
        return pulumi.get(self, "max_lease_time")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNetworkRoutedFilterResult(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetNetworkRoutedFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetNetworkRoutedFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetNetworkRoutedFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetNetworkRoutedMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkRoutedStaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNetworkRoutedV2FilterResult(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetNetworkRoutedV2MetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkRoutedV2StaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNsxtAlbPoolHealthMonitorResult(dict):
    def __init__(__self__, *,
                 name: str,
                 system_defined: bool,
                 type: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "system_defined", system_defined)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemDefined")
    def system_defined(self) -> bool:
        return pulumi.get(self, "system_defined")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNsxtAlbPoolMemberResult(dict):
    def __init__(__self__, *,
                 detailed_health_message: str,
                 enabled: bool,
                 health_status: str,
                 ip_address: str,
                 marked_down_bies: Sequence[str],
                 port: int,
                 ratio: int):
        pulumi.set(__self__, "detailed_health_message", detailed_health_message)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "marked_down_bies", marked_down_bies)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "ratio", ratio)

    @property
    @pulumi.getter(name="detailedHealthMessage")
    def detailed_health_message(self) -> str:
        return pulumi.get(self, "detailed_health_message")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="markedDownBies")
    def marked_down_bies(self) -> Sequence[str]:
        return pulumi.get(self, "marked_down_bies")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def ratio(self) -> int:
        return pulumi.get(self, "ratio")


@pulumi.output_type
class GetNsxtAlbPoolPersistenceProfileResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNsxtAlbVirtualServiceServicePortResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 ssl_enabled: bool,
                 start_port: int,
                 type: str):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> bool:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNsxtAppPortProfileAppPortResult(dict):
    def __init__(__self__, *,
                 ports: Sequence[str],
                 protocol: str):
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetNsxtDistributedFirewallRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 app_port_profile_ids: Sequence[str],
                 comment: str,
                 description: str,
                 destination_groups_excluded: bool,
                 destination_ids: Sequence[str],
                 direction: str,
                 enabled: bool,
                 id: str,
                 ip_protocol: str,
                 logging: bool,
                 name: str,
                 network_context_profile_ids: Sequence[str],
                 source_groups_excluded: bool,
                 source_ids: Sequence[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_groups_excluded", destination_groups_excluded)
        pulumi.set(__self__, "destination_ids", destination_ids)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "logging", logging)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_context_profile_ids", network_context_profile_ids)
        pulumi.set(__self__, "source_groups_excluded", source_groups_excluded)
        pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Sequence[str]:
        return pulumi.get(self, "app_port_profile_ids")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> bool:
        return pulumi.get(self, "destination_groups_excluded")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Sequence[str]:
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def logging(self) -> bool:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> Sequence[str]:
        return pulumi.get(self, "network_context_profile_ids")

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> bool:
        return pulumi.get(self, "source_groups_excluded")

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Sequence[str]:
        return pulumi.get(self, "source_ids")


@pulumi.output_type
class GetNsxtDynamicSecurityGroupCriteriaResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetNsxtDynamicSecurityGroupCriteriaRuleResult']):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetNsxtDynamicSecurityGroupCriteriaRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetNsxtDynamicSecurityGroupCriteriaRuleResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNsxtDynamicSecurityGroupMemberVmResult(dict):
    def __init__(__self__, *,
                 vapp_id: str,
                 vapp_name: str,
                 vm_id: str,
                 vm_name: str):
        pulumi.set(__self__, "vapp_id", vapp_id)
        pulumi.set(__self__, "vapp_name", vapp_name)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> str:
        return pulumi.get(self, "vapp_id")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> str:
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class GetNsxtEdgegatewayBgpIpPrefixListIpPrefixResult(dict):
    def __init__(__self__, *,
                 action: str,
                 greater_than_or_equal_to: int,
                 less_than_or_equal_to: int,
                 network: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "greater_than_or_equal_to", greater_than_or_equal_to)
        pulumi.set(__self__, "less_than_or_equal_to", less_than_or_equal_to)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="greaterThanOrEqualTo")
    def greater_than_or_equal_to(self) -> int:
        return pulumi.get(self, "greater_than_or_equal_to")

    @property
    @pulumi.getter(name="lessThanOrEqualTo")
    def less_than_or_equal_to(self) -> int:
        return pulumi.get(self, "less_than_or_equal_to")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")


@pulumi.output_type
class GetNsxtEdgegatewaySubnetResult(dict):
    def __init__(__self__, *,
                 allocated_ips: Sequence['outputs.GetNsxtEdgegatewaySubnetAllocatedIpResult'],
                 gateway: str,
                 prefix_length: int,
                 primary_ip: str):
        pulumi.set(__self__, "allocated_ips", allocated_ips)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "primary_ip", primary_ip)

    @property
    @pulumi.getter(name="allocatedIps")
    def allocated_ips(self) -> Sequence['outputs.GetNsxtEdgegatewaySubnetAllocatedIpResult']:
        return pulumi.get(self, "allocated_ips")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> str:
        return pulumi.get(self, "primary_ip")


@pulumi.output_type
class GetNsxtEdgegatewaySubnetAllocatedIpResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNsxtFirewallRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 app_port_profile_ids: Sequence[str],
                 destination_ids: Sequence[str],
                 direction: str,
                 enabled: bool,
                 id: str,
                 ip_protocol: str,
                 logging: bool,
                 name: str,
                 source_ids: Sequence[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        pulumi.set(__self__, "destination_ids", destination_ids)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "logging", logging)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Sequence[str]:
        return pulumi.get(self, "app_port_profile_ids")

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Sequence[str]:
        return pulumi.get(self, "destination_ids")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def logging(self) -> bool:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Sequence[str]:
        return pulumi.get(self, "source_ids")


@pulumi.output_type
class GetNsxtIpsecVpnTunnelSecurityProfileCustomizationResult(dict):
    def __init__(__self__, *,
                 dpd_probe_internal: int,
                 ike_dh_groups: Sequence[str],
                 ike_digest_algorithms: Sequence[str],
                 ike_encryption_algorithms: Sequence[str],
                 ike_sa_lifetime: int,
                 ike_version: str,
                 tunnel_df_policy: str,
                 tunnel_dh_groups: Sequence[str],
                 tunnel_digest_algorithms: Sequence[str],
                 tunnel_encryption_algorithms: Sequence[str],
                 tunnel_pfs_enabled: bool,
                 tunnel_sa_lifetime: int):
        pulumi.set(__self__, "dpd_probe_internal", dpd_probe_internal)
        pulumi.set(__self__, "ike_dh_groups", ike_dh_groups)
        pulumi.set(__self__, "ike_digest_algorithms", ike_digest_algorithms)
        pulumi.set(__self__, "ike_encryption_algorithms", ike_encryption_algorithms)
        pulumi.set(__self__, "ike_sa_lifetime", ike_sa_lifetime)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "tunnel_df_policy", tunnel_df_policy)
        pulumi.set(__self__, "tunnel_dh_groups", tunnel_dh_groups)
        pulumi.set(__self__, "tunnel_digest_algorithms", tunnel_digest_algorithms)
        pulumi.set(__self__, "tunnel_encryption_algorithms", tunnel_encryption_algorithms)
        pulumi.set(__self__, "tunnel_pfs_enabled", tunnel_pfs_enabled)
        pulumi.set(__self__, "tunnel_sa_lifetime", tunnel_sa_lifetime)

    @property
    @pulumi.getter(name="dpdProbeInternal")
    def dpd_probe_internal(self) -> int:
        return pulumi.get(self, "dpd_probe_internal")

    @property
    @pulumi.getter(name="ikeDhGroups")
    def ike_dh_groups(self) -> Sequence[str]:
        return pulumi.get(self, "ike_dh_groups")

    @property
    @pulumi.getter(name="ikeDigestAlgorithms")
    def ike_digest_algorithms(self) -> Sequence[str]:
        return pulumi.get(self, "ike_digest_algorithms")

    @property
    @pulumi.getter(name="ikeEncryptionAlgorithms")
    def ike_encryption_algorithms(self) -> Sequence[str]:
        return pulumi.get(self, "ike_encryption_algorithms")

    @property
    @pulumi.getter(name="ikeSaLifetime")
    def ike_sa_lifetime(self) -> int:
        return pulumi.get(self, "ike_sa_lifetime")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> str:
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="tunnelDfPolicy")
    def tunnel_df_policy(self) -> str:
        return pulumi.get(self, "tunnel_df_policy")

    @property
    @pulumi.getter(name="tunnelDhGroups")
    def tunnel_dh_groups(self) -> Sequence[str]:
        return pulumi.get(self, "tunnel_dh_groups")

    @property
    @pulumi.getter(name="tunnelDigestAlgorithms")
    def tunnel_digest_algorithms(self) -> Sequence[str]:
        return pulumi.get(self, "tunnel_digest_algorithms")

    @property
    @pulumi.getter(name="tunnelEncryptionAlgorithms")
    def tunnel_encryption_algorithms(self) -> Sequence[str]:
        return pulumi.get(self, "tunnel_encryption_algorithms")

    @property
    @pulumi.getter(name="tunnelPfsEnabled")
    def tunnel_pfs_enabled(self) -> bool:
        return pulumi.get(self, "tunnel_pfs_enabled")

    @property
    @pulumi.getter(name="tunnelSaLifetime")
    def tunnel_sa_lifetime(self) -> int:
        return pulumi.get(self, "tunnel_sa_lifetime")


@pulumi.output_type
class GetNsxtNetworkDhcpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNsxtNetworkImportedFilterResult(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetNsxtNetworkImportedStaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetNsxtSecurityGroupMemberVmResult(dict):
    def __init__(__self__, *,
                 vapp_id: str,
                 vapp_name: str,
                 vm_id: str,
                 vm_name: str):
        pulumi.set(__self__, "vapp_id", vapp_id)
        pulumi.set(__self__, "vapp_name", vapp_name)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> str:
        return pulumi.get(self, "vapp_id")

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> str:
        return pulumi.get(self, "vapp_name")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class GetNsxvDhcpRelayRelayAgentResult(dict):
    def __init__(__self__, *,
                 gateway_ip_address: str,
                 network_name: str):
        pulumi.set(__self__, "gateway_ip_address", gateway_ip_address)
        pulumi.set(__self__, "network_name", network_name)

    @property
    @pulumi.getter(name="gatewayIpAddress")
    def gateway_ip_address(self) -> str:
        return pulumi.get(self, "gateway_ip_address")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")


@pulumi.output_type
class GetNsxvFirewallRuleDestinationResult(dict):
    def __init__(__self__, *,
                 exclude: bool,
                 gateway_interfaces: Sequence[str],
                 ip_addresses: Sequence[str],
                 ip_sets: Sequence[str],
                 org_networks: Sequence[str],
                 vm_ids: Sequence[str]):
        pulumi.set(__self__, "exclude", exclude)
        pulumi.set(__self__, "gateway_interfaces", gateway_interfaces)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "ip_sets", ip_sets)
        pulumi.set(__self__, "org_networks", org_networks)
        pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def exclude(self) -> bool:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="gatewayInterfaces")
    def gateway_interfaces(self) -> Sequence[str]:
        return pulumi.get(self, "gateway_interfaces")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Sequence[str]:
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter(name="orgNetworks")
    def org_networks(self) -> Sequence[str]:
        return pulumi.get(self, "org_networks")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Sequence[str]:
        return pulumi.get(self, "vm_ids")


@pulumi.output_type
class GetNsxvFirewallRuleServiceResult(dict):
    def __init__(__self__, *,
                 port: str,
                 protocol: str,
                 source_port: str):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> str:
        return pulumi.get(self, "source_port")


@pulumi.output_type
class GetNsxvFirewallRuleSourceResult(dict):
    def __init__(__self__, *,
                 exclude: bool,
                 gateway_interfaces: Sequence[str],
                 ip_addresses: Sequence[str],
                 ip_sets: Sequence[str],
                 org_networks: Sequence[str],
                 vm_ids: Sequence[str]):
        pulumi.set(__self__, "exclude", exclude)
        pulumi.set(__self__, "gateway_interfaces", gateway_interfaces)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "ip_sets", ip_sets)
        pulumi.set(__self__, "org_networks", org_networks)
        pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def exclude(self) -> bool:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="gatewayInterfaces")
    def gateway_interfaces(self) -> Sequence[str]:
        return pulumi.get(self, "gateway_interfaces")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Sequence[str]:
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter(name="orgNetworks")
    def org_networks(self) -> Sequence[str]:
        return pulumi.get(self, "org_networks")

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Sequence[str]:
        return pulumi.get(self, "vm_ids")


@pulumi.output_type
class GetOrgLdapCustomSettingResult(dict):
    def __init__(__self__, *,
                 authentication_method: str,
                 base_distinguished_name: str,
                 connector_type: str,
                 group_attributes: Sequence['outputs.GetOrgLdapCustomSettingGroupAttributeResult'],
                 is_ssl: bool,
                 password: str,
                 port: int,
                 server: str,
                 user_attributes: Sequence['outputs.GetOrgLdapCustomSettingUserAttributeResult'],
                 username: str):
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "base_distinguished_name", base_distinguished_name)
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "group_attributes", group_attributes)
        pulumi.set(__self__, "is_ssl", is_ssl)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "user_attributes", user_attributes)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="baseDistinguishedName")
    def base_distinguished_name(self) -> str:
        return pulumi.get(self, "base_distinguished_name")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> str:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="groupAttributes")
    def group_attributes(self) -> Sequence['outputs.GetOrgLdapCustomSettingGroupAttributeResult']:
        return pulumi.get(self, "group_attributes")

    @property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> bool:
        return pulumi.get(self, "is_ssl")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> Sequence['outputs.GetOrgLdapCustomSettingUserAttributeResult']:
        return pulumi.get(self, "user_attributes")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetOrgLdapCustomSettingGroupAttributeResult(dict):
    def __init__(__self__, *,
                 group_back_link_identifier: str,
                 group_membership_identifier: str,
                 membership: str,
                 name: str,
                 object_class: str,
                 unique_identifier: str):
        pulumi.set(__self__, "group_back_link_identifier", group_back_link_identifier)
        pulumi.set(__self__, "group_membership_identifier", group_membership_identifier)
        pulumi.set(__self__, "membership", membership)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_class", object_class)
        pulumi.set(__self__, "unique_identifier", unique_identifier)

    @property
    @pulumi.getter(name="groupBackLinkIdentifier")
    def group_back_link_identifier(self) -> str:
        return pulumi.get(self, "group_back_link_identifier")

    @property
    @pulumi.getter(name="groupMembershipIdentifier")
    def group_membership_identifier(self) -> str:
        return pulumi.get(self, "group_membership_identifier")

    @property
    @pulumi.getter
    def membership(self) -> str:
        return pulumi.get(self, "membership")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> str:
        return pulumi.get(self, "object_class")

    @property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> str:
        return pulumi.get(self, "unique_identifier")


@pulumi.output_type
class GetOrgLdapCustomSettingUserAttributeResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 email: str,
                 given_name: str,
                 group_back_link_identifier: str,
                 group_membership_identifier: str,
                 object_class: str,
                 surname: str,
                 telephone: str,
                 unique_identifier: str,
                 username: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "group_back_link_identifier", group_back_link_identifier)
        pulumi.set(__self__, "group_membership_identifier", group_membership_identifier)
        pulumi.set(__self__, "object_class", object_class)
        pulumi.set(__self__, "surname", surname)
        pulumi.set(__self__, "telephone", telephone)
        pulumi.set(__self__, "unique_identifier", unique_identifier)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="groupBackLinkIdentifier")
    def group_back_link_identifier(self) -> str:
        return pulumi.get(self, "group_back_link_identifier")

    @property
    @pulumi.getter(name="groupMembershipIdentifier")
    def group_membership_identifier(self) -> str:
        return pulumi.get(self, "group_membership_identifier")

    @property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> str:
        return pulumi.get(self, "object_class")

    @property
    @pulumi.getter
    def surname(self) -> str:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def telephone(self) -> str:
        return pulumi.get(self, "telephone")

    @property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> str:
        return pulumi.get(self, "unique_identifier")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetOrgMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrgVappLeaseResult(dict):
    def __init__(__self__, *,
                 delete_on_storage_lease_expiration: bool,
                 maximum_runtime_lease_in_sec: int,
                 maximum_storage_lease_in_sec: int,
                 power_off_on_runtime_lease_expiration: bool):
        pulumi.set(__self__, "delete_on_storage_lease_expiration", delete_on_storage_lease_expiration)
        pulumi.set(__self__, "maximum_runtime_lease_in_sec", maximum_runtime_lease_in_sec)
        pulumi.set(__self__, "maximum_storage_lease_in_sec", maximum_storage_lease_in_sec)
        pulumi.set(__self__, "power_off_on_runtime_lease_expiration", power_off_on_runtime_lease_expiration)

    @property
    @pulumi.getter(name="deleteOnStorageLeaseExpiration")
    def delete_on_storage_lease_expiration(self) -> bool:
        return pulumi.get(self, "delete_on_storage_lease_expiration")

    @property
    @pulumi.getter(name="maximumRuntimeLeaseInSec")
    def maximum_runtime_lease_in_sec(self) -> int:
        return pulumi.get(self, "maximum_runtime_lease_in_sec")

    @property
    @pulumi.getter(name="maximumStorageLeaseInSec")
    def maximum_storage_lease_in_sec(self) -> int:
        return pulumi.get(self, "maximum_storage_lease_in_sec")

    @property
    @pulumi.getter(name="powerOffOnRuntimeLeaseExpiration")
    def power_off_on_runtime_lease_expiration(self) -> bool:
        return pulumi.get(self, "power_off_on_runtime_lease_expiration")


@pulumi.output_type
class GetOrgVappTemplateLeaseResult(dict):
    def __init__(__self__, *,
                 delete_on_storage_lease_expiration: bool,
                 maximum_storage_lease_in_sec: int):
        pulumi.set(__self__, "delete_on_storage_lease_expiration", delete_on_storage_lease_expiration)
        pulumi.set(__self__, "maximum_storage_lease_in_sec", maximum_storage_lease_in_sec)

    @property
    @pulumi.getter(name="deleteOnStorageLeaseExpiration")
    def delete_on_storage_lease_expiration(self) -> bool:
        return pulumi.get(self, "delete_on_storage_lease_expiration")

    @property
    @pulumi.getter(name="maximumStorageLeaseInSec")
    def maximum_storage_lease_in_sec(self) -> int:
        return pulumi.get(self, "maximum_storage_lease_in_sec")


@pulumi.output_type
class GetOrgVdcComputeCapacityResult(dict):
    def __init__(__self__, *,
                 cpus: Sequence['outputs.GetOrgVdcComputeCapacityCpusResult'],
                 memories: Sequence['outputs.GetOrgVdcComputeCapacityMemoryResult']):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "memories", memories)

    @property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.GetOrgVdcComputeCapacityCpusResult']:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetOrgVdcComputeCapacityMemoryResult']:
        return pulumi.get(self, "memories")


@pulumi.output_type
class GetOrgVdcComputeCapacityCpusResult(dict):
    def __init__(__self__, *,
                 allocated: int,
                 limit: int,
                 reserved: int,
                 used: int):
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> int:
        return pulumi.get(self, "allocated")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def reserved(self) -> int:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter
    def used(self) -> int:
        return pulumi.get(self, "used")


@pulumi.output_type
class GetOrgVdcComputeCapacityMemoryResult(dict):
    def __init__(__self__, *,
                 allocated: int,
                 limit: int,
                 reserved: int,
                 used: int):
        pulumi.set(__self__, "allocated", allocated)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reserved", reserved)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> int:
        return pulumi.get(self, "allocated")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def reserved(self) -> int:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter
    def used(self) -> int:
        return pulumi.get(self, "used")


@pulumi.output_type
class GetOrgVdcMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrgVdcStorageProfileResult(dict):
    def __init__(__self__, *,
                 default: bool,
                 enabled: bool,
                 limit: int,
                 name: str,
                 storage_used_in_mb: int):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "storage_used_in_mb", storage_used_in_mb)

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageUsedInMb")
    def storage_used_in_mb(self) -> int:
        return pulumi.get(self, "storage_used_in_mb")


@pulumi.output_type
class GetProviderVdcComputeCapacityResult(dict):
    def __init__(__self__, *,
                 cpus: Sequence['outputs.GetProviderVdcComputeCapacityCpusResult'],
                 is_elastic: bool,
                 is_ha: bool,
                 memories: Sequence['outputs.GetProviderVdcComputeCapacityMemoryResult']):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "is_elastic", is_elastic)
        pulumi.set(__self__, "is_ha", is_ha)
        pulumi.set(__self__, "memories", memories)

    @property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.GetProviderVdcComputeCapacityCpusResult']:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter(name="isElastic")
    def is_elastic(self) -> bool:
        return pulumi.get(self, "is_elastic")

    @property
    @pulumi.getter(name="isHa")
    def is_ha(self) -> bool:
        return pulumi.get(self, "is_ha")

    @property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetProviderVdcComputeCapacityMemoryResult']:
        return pulumi.get(self, "memories")


@pulumi.output_type
class GetProviderVdcComputeCapacityCpusResult(dict):
    def __init__(__self__, *,
                 allocation: int,
                 overhead: int,
                 reserved: int,
                 total: int,
                 units: str,
                 used: int):
        pulumi.set(__self__, "allocation", allocation)
        pulumi.set(__self__, "overhead", overhead)
        pulumi.set(__self__, "reserved", reserved)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocation(self) -> int:
        return pulumi.get(self, "allocation")

    @property
    @pulumi.getter
    def overhead(self) -> int:
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter
    def reserved(self) -> int:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter
    def total(self) -> int:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def used(self) -> int:
        return pulumi.get(self, "used")


@pulumi.output_type
class GetProviderVdcComputeCapacityMemoryResult(dict):
    def __init__(__self__, *,
                 allocation: int,
                 overhead: int,
                 reserved: int,
                 total: int,
                 units: str,
                 used: int):
        pulumi.set(__self__, "allocation", allocation)
        pulumi.set(__self__, "overhead", overhead)
        pulumi.set(__self__, "reserved", reserved)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocation(self) -> int:
        return pulumi.get(self, "allocation")

    @property
    @pulumi.getter
    def overhead(self) -> int:
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter
    def reserved(self) -> int:
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter
    def total(self) -> int:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def used(self) -> int:
        return pulumi.get(self, "used")


@pulumi.output_type
class GetProviderVdcMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceSchemaAttributeResult(dict):
    def __init__(__self__, *,
                 computed: bool,
                 description: str,
                 name: str,
                 optional: bool,
                 required: bool,
                 sensitive: bool,
                 type: str):
        pulumi.set(__self__, "computed", computed)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "sensitive", sensitive)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def computed(self) -> bool:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> bool:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourceSchemaBlockAttributeResult(dict):
    def __init__(__self__, *,
                 attributes: Sequence['outputs.GetResourceSchemaBlockAttributeAttributeResult'],
                 name: str,
                 nesting_mode: str):
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nesting_mode", nesting_mode)

    @property
    @pulumi.getter
    def attributes(self) -> Sequence['outputs.GetResourceSchemaBlockAttributeAttributeResult']:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nestingMode")
    def nesting_mode(self) -> str:
        return pulumi.get(self, "nesting_mode")


@pulumi.output_type
class GetResourceSchemaBlockAttributeAttributeResult(dict):
    def __init__(__self__, *,
                 computed: bool,
                 description: str,
                 name: str,
                 optional: bool,
                 required: bool,
                 sensitive: bool,
                 type: str):
        pulumi.set(__self__, "computed", computed)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "sensitive", sensitive)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def computed(self) -> bool:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> bool:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRightImpliedRightResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetStorageProfileIopsSettingResult(dict):
    def __init__(__self__, *,
                 default_disk_iops: int,
                 disk_iops_per_gb_max: int,
                 iops_limit: int,
                 iops_limiting_enabled: bool,
                 maximum_disk_iops: int):
        pulumi.set(__self__, "default_disk_iops", default_disk_iops)
        pulumi.set(__self__, "disk_iops_per_gb_max", disk_iops_per_gb_max)
        pulumi.set(__self__, "iops_limit", iops_limit)
        pulumi.set(__self__, "iops_limiting_enabled", iops_limiting_enabled)
        pulumi.set(__self__, "maximum_disk_iops", maximum_disk_iops)

    @property
    @pulumi.getter(name="defaultDiskIops")
    def default_disk_iops(self) -> int:
        return pulumi.get(self, "default_disk_iops")

    @property
    @pulumi.getter(name="diskIopsPerGbMax")
    def disk_iops_per_gb_max(self) -> int:
        return pulumi.get(self, "disk_iops_per_gb_max")

    @property
    @pulumi.getter(name="iopsLimit")
    def iops_limit(self) -> int:
        return pulumi.get(self, "iops_limit")

    @property
    @pulumi.getter(name="iopsLimitingEnabled")
    def iops_limiting_enabled(self) -> bool:
        return pulumi.get(self, "iops_limiting_enabled")

    @property
    @pulumi.getter(name="maximumDiskIops")
    def maximum_disk_iops(self) -> int:
        return pulumi.get(self, "maximum_disk_iops")


@pulumi.output_type
class GetStorageProfileMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubscribedCatalogFilterResult(dict):
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['outputs.GetSubscribedCatalogFilterMetadataResult']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetSubscribedCatalogFilterMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")


@pulumi.output_type
class GetSubscribedCatalogFilterMetadataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")


@pulumi.output_type
class GetVappLeaseResult(dict):
    def __init__(__self__, *,
                 runtime_lease_in_sec: int,
                 storage_lease_in_sec: int):
        pulumi.set(__self__, "runtime_lease_in_sec", runtime_lease_in_sec)
        pulumi.set(__self__, "storage_lease_in_sec", storage_lease_in_sec)

    @property
    @pulumi.getter(name="runtimeLeaseInSec")
    def runtime_lease_in_sec(self) -> int:
        return pulumi.get(self, "runtime_lease_in_sec")

    @property
    @pulumi.getter(name="storageLeaseInSec")
    def storage_lease_in_sec(self) -> int:
        return pulumi.get(self, "storage_lease_in_sec")


@pulumi.output_type
class GetVappMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVappNetworkDhcpPoolResult(dict):
    def __init__(__self__, *,
                 default_lease_time: int,
                 enabled: bool,
                 end_address: str,
                 max_lease_time: int,
                 start_address: str):
        pulumi.set(__self__, "default_lease_time", default_lease_time)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "max_lease_time", max_lease_time)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> int:
        return pulumi.get(self, "default_lease_time")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> int:
        return pulumi.get(self, "max_lease_time")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetVappNetworkStaticIpPoolResult(dict):
    def __init__(__self__, *,
                 end_address: str,
                 start_address: str):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> str:
        return pulumi.get(self, "end_address")

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> str:
        return pulumi.get(self, "start_address")


@pulumi.output_type
class GetVappVmCustomizationResult(dict):
    def __init__(__self__, *,
                 admin_password: str,
                 allow_local_admin_password: bool,
                 auto_generate_password: bool,
                 change_sid: bool,
                 enabled: bool,
                 force: bool,
                 initscript: str,
                 join_domain: bool,
                 join_domain_account_ou: str,
                 join_domain_name: str,
                 join_domain_password: str,
                 join_domain_user: str,
                 join_org_domain: bool,
                 must_change_password_on_first_login: bool,
                 number_of_auto_logons: int):
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "allow_local_admin_password", allow_local_admin_password)
        pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        pulumi.set(__self__, "change_sid", change_sid)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "force", force)
        pulumi.set(__self__, "initscript", initscript)
        pulumi.set(__self__, "join_domain", join_domain)
        pulumi.set(__self__, "join_domain_account_ou", join_domain_account_ou)
        pulumi.set(__self__, "join_domain_name", join_domain_name)
        pulumi.set(__self__, "join_domain_password", join_domain_password)
        pulumi.set(__self__, "join_domain_user", join_domain_user)
        pulumi.set(__self__, "join_org_domain", join_org_domain)
        pulumi.set(__self__, "must_change_password_on_first_login", must_change_password_on_first_login)
        pulumi.set(__self__, "number_of_auto_logons", number_of_auto_logons)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="allowLocalAdminPassword")
    def allow_local_admin_password(self) -> bool:
        return pulumi.get(self, "allow_local_admin_password")

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> bool:
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter(name="changeSid")
    def change_sid(self) -> bool:
        return pulumi.get(self, "change_sid")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def force(self) -> bool:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def initscript(self) -> str:
        return pulumi.get(self, "initscript")

    @property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> bool:
        return pulumi.get(self, "join_domain")

    @property
    @pulumi.getter(name="joinDomainAccountOu")
    def join_domain_account_ou(self) -> str:
        return pulumi.get(self, "join_domain_account_ou")

    @property
    @pulumi.getter(name="joinDomainName")
    def join_domain_name(self) -> str:
        return pulumi.get(self, "join_domain_name")

    @property
    @pulumi.getter(name="joinDomainPassword")
    def join_domain_password(self) -> str:
        return pulumi.get(self, "join_domain_password")

    @property
    @pulumi.getter(name="joinDomainUser")
    def join_domain_user(self) -> str:
        return pulumi.get(self, "join_domain_user")

    @property
    @pulumi.getter(name="joinOrgDomain")
    def join_org_domain(self) -> bool:
        return pulumi.get(self, "join_org_domain")

    @property
    @pulumi.getter(name="mustChangePasswordOnFirstLogin")
    def must_change_password_on_first_login(self) -> bool:
        return pulumi.get(self, "must_change_password_on_first_login")

    @property
    @pulumi.getter(name="numberOfAutoLogons")
    def number_of_auto_logons(self) -> int:
        return pulumi.get(self, "number_of_auto_logons")


@pulumi.output_type
class GetVappVmDiskResult(dict):
    def __init__(__self__, *,
                 bus_number: str,
                 name: str,
                 size_in_mb: int,
                 unit_number: str):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> str:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> str:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetVappVmInternalDiskResult(dict):
    def __init__(__self__, *,
                 bus_number: int,
                 bus_type: str,
                 disk_id: str,
                 iops: int,
                 size_in_mb: int,
                 storage_profile: str,
                 thin_provisioned: bool,
                 unit_number: int):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "bus_type", bus_type)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "storage_profile", storage_profile)
        pulumi.set(__self__, "thin_provisioned", thin_provisioned)
        pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> int:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> str:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> str:
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="thinProvisioned")
    def thin_provisioned(self) -> bool:
        return pulumi.get(self, "thin_provisioned")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> int:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetVappVmMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVappVmNetworkResult(dict):
    def __init__(__self__, *,
                 adapter_type: str,
                 connected: bool,
                 ip: str,
                 ip_allocation_mode: str,
                 is_primary: bool,
                 mac: str,
                 name: str,
                 type: str):
        pulumi.set(__self__, "adapter_type", adapter_type)
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_allocation_mode", ip_allocation_mode)
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> str:
        return pulumi.get(self, "adapter_type")

    @property
    @pulumi.getter
    def connected(self) -> bool:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAllocationMode")
    def ip_allocation_mode(self) -> str:
        return pulumi.get(self, "ip_allocation_mode")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVdcGroupParticipatingOrgVdcResult(dict):
    def __init__(__self__, *,
                 fault_domain_tag: str,
                 is_remote_org: bool,
                 network_provider_scope: str,
                 org_id: str,
                 org_name: str,
                 site_id: str,
                 site_name: str,
                 status: str,
                 vdc_id: str,
                 vdc_name: str):
        pulumi.set(__self__, "fault_domain_tag", fault_domain_tag)
        pulumi.set(__self__, "is_remote_org", is_remote_org)
        pulumi.set(__self__, "network_provider_scope", network_provider_scope)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "org_name", org_name)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "site_name", site_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vdc_id", vdc_id)
        pulumi.set(__self__, "vdc_name", vdc_name)

    @property
    @pulumi.getter(name="faultDomainTag")
    def fault_domain_tag(self) -> str:
        return pulumi.get(self, "fault_domain_tag")

    @property
    @pulumi.getter(name="isRemoteOrg")
    def is_remote_org(self) -> bool:
        return pulumi.get(self, "is_remote_org")

    @property
    @pulumi.getter(name="networkProviderScope")
    def network_provider_scope(self) -> str:
        return pulumi.get(self, "network_provider_scope")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> str:
        return pulumi.get(self, "org_name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> str:
        return pulumi.get(self, "site_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> str:
        return pulumi.get(self, "vdc_id")

    @property
    @pulumi.getter(name="vdcName")
    def vdc_name(self) -> str:
        return pulumi.get(self, "vdc_name")


@pulumi.output_type
class GetVmCustomizationResult(dict):
    def __init__(__self__, *,
                 admin_password: str,
                 allow_local_admin_password: bool,
                 auto_generate_password: bool,
                 change_sid: bool,
                 enabled: bool,
                 force: bool,
                 initscript: str,
                 join_domain: bool,
                 join_domain_account_ou: str,
                 join_domain_name: str,
                 join_domain_password: str,
                 join_domain_user: str,
                 join_org_domain: bool,
                 must_change_password_on_first_login: bool,
                 number_of_auto_logons: int):
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "allow_local_admin_password", allow_local_admin_password)
        pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        pulumi.set(__self__, "change_sid", change_sid)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "force", force)
        pulumi.set(__self__, "initscript", initscript)
        pulumi.set(__self__, "join_domain", join_domain)
        pulumi.set(__self__, "join_domain_account_ou", join_domain_account_ou)
        pulumi.set(__self__, "join_domain_name", join_domain_name)
        pulumi.set(__self__, "join_domain_password", join_domain_password)
        pulumi.set(__self__, "join_domain_user", join_domain_user)
        pulumi.set(__self__, "join_org_domain", join_org_domain)
        pulumi.set(__self__, "must_change_password_on_first_login", must_change_password_on_first_login)
        pulumi.set(__self__, "number_of_auto_logons", number_of_auto_logons)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="allowLocalAdminPassword")
    def allow_local_admin_password(self) -> bool:
        return pulumi.get(self, "allow_local_admin_password")

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> bool:
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter(name="changeSid")
    def change_sid(self) -> bool:
        return pulumi.get(self, "change_sid")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def force(self) -> bool:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def initscript(self) -> str:
        return pulumi.get(self, "initscript")

    @property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> bool:
        return pulumi.get(self, "join_domain")

    @property
    @pulumi.getter(name="joinDomainAccountOu")
    def join_domain_account_ou(self) -> str:
        return pulumi.get(self, "join_domain_account_ou")

    @property
    @pulumi.getter(name="joinDomainName")
    def join_domain_name(self) -> str:
        return pulumi.get(self, "join_domain_name")

    @property
    @pulumi.getter(name="joinDomainPassword")
    def join_domain_password(self) -> str:
        return pulumi.get(self, "join_domain_password")

    @property
    @pulumi.getter(name="joinDomainUser")
    def join_domain_user(self) -> str:
        return pulumi.get(self, "join_domain_user")

    @property
    @pulumi.getter(name="joinOrgDomain")
    def join_org_domain(self) -> bool:
        return pulumi.get(self, "join_org_domain")

    @property
    @pulumi.getter(name="mustChangePasswordOnFirstLogin")
    def must_change_password_on_first_login(self) -> bool:
        return pulumi.get(self, "must_change_password_on_first_login")

    @property
    @pulumi.getter(name="numberOfAutoLogons")
    def number_of_auto_logons(self) -> int:
        return pulumi.get(self, "number_of_auto_logons")


@pulumi.output_type
class GetVmDiskResult(dict):
    def __init__(__self__, *,
                 bus_number: str,
                 name: str,
                 size_in_mb: int,
                 unit_number: str):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> str:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> str:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetVmInternalDiskResult(dict):
    def __init__(__self__, *,
                 bus_number: int,
                 bus_type: str,
                 disk_id: str,
                 iops: int,
                 size_in_mb: int,
                 storage_profile: str,
                 thin_provisioned: bool,
                 unit_number: int):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "bus_type", bus_type)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "storage_profile", storage_profile)
        pulumi.set(__self__, "thin_provisioned", thin_provisioned)
        pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> int:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> str:
        return pulumi.get(self, "bus_type")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> int:
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> str:
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="thinProvisioned")
    def thin_provisioned(self) -> bool:
        return pulumi.get(self, "thin_provisioned")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> int:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetVmMetadataEntryResult(dict):
    def __init__(__self__, *,
                 is_system: bool,
                 key: str,
                 type: str,
                 user_access: str,
                 value: str):
        pulumi.set(__self__, "is_system", is_system)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_access", user_access)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> bool:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        return pulumi.get(self, "user_access")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmNetworkResult(dict):
    def __init__(__self__, *,
                 adapter_type: str,
                 connected: bool,
                 ip: str,
                 ip_allocation_mode: str,
                 is_primary: bool,
                 mac: str,
                 name: str,
                 type: str):
        pulumi.set(__self__, "adapter_type", adapter_type)
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_allocation_mode", ip_allocation_mode)
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> str:
        return pulumi.get(self, "adapter_type")

    @property
    @pulumi.getter
    def connected(self) -> bool:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAllocationMode")
    def ip_allocation_mode(self) -> str:
        return pulumi.get(self, "ip_allocation_mode")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVmSizingPolicyCpusResult(dict):
    def __init__(__self__, *,
                 cores_per_socket: str,
                 count: str,
                 limit_in_mhz: str,
                 reservation_guarantee: str,
                 shares: str,
                 speed_in_mhz: str):
        pulumi.set(__self__, "cores_per_socket", cores_per_socket)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "limit_in_mhz", limit_in_mhz)
        pulumi.set(__self__, "reservation_guarantee", reservation_guarantee)
        pulumi.set(__self__, "shares", shares)
        pulumi.set(__self__, "speed_in_mhz", speed_in_mhz)

    @property
    @pulumi.getter(name="coresPerSocket")
    def cores_per_socket(self) -> str:
        return pulumi.get(self, "cores_per_socket")

    @property
    @pulumi.getter
    def count(self) -> str:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="limitInMhz")
    def limit_in_mhz(self) -> str:
        return pulumi.get(self, "limit_in_mhz")

    @property
    @pulumi.getter(name="reservationGuarantee")
    def reservation_guarantee(self) -> str:
        return pulumi.get(self, "reservation_guarantee")

    @property
    @pulumi.getter
    def shares(self) -> str:
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter(name="speedInMhz")
    def speed_in_mhz(self) -> str:
        return pulumi.get(self, "speed_in_mhz")


@pulumi.output_type
class GetVmSizingPolicyMemoryResult(dict):
    def __init__(__self__, *,
                 limit_in_mb: str,
                 reservation_guarantee: str,
                 shares: str,
                 size_in_mb: str):
        pulumi.set(__self__, "limit_in_mb", limit_in_mb)
        pulumi.set(__self__, "reservation_guarantee", reservation_guarantee)
        pulumi.set(__self__, "shares", shares)
        pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="limitInMb")
    def limit_in_mb(self) -> str:
        return pulumi.get(self, "limit_in_mb")

    @property
    @pulumi.getter(name="reservationGuarantee")
    def reservation_guarantee(self) -> str:
        return pulumi.get(self, "reservation_guarantee")

    @property
    @pulumi.getter
    def shares(self) -> str:
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> str:
        return pulumi.get(self, "size_in_mb")


