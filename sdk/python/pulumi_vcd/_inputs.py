# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'CatalogAccessControlSharedWithArgs',
    'CatalogItemMetadataEntryArgs',
    'CatalogMediaMetadataEntryArgs',
    'CatalogMetadataEntryArgs',
    'CatalogVappTemplateMetadataEntryArgs',
    'EdgeGatewayExternalNetworkArgs',
    'EdgeGatewayExternalNetworkSubnetArgs',
    'EdgeGatewayExternalNetworkSubnetSuballocatePoolArgs',
    'EdgeGatewayVpnLocalSubnetArgs',
    'EdgeGatewayVpnPeerSubnetArgs',
    'ExternalNetworkIpScopeArgs',
    'ExternalNetworkIpScopeStaticIpPoolArgs',
    'ExternalNetworkV2IpScopeArgs',
    'ExternalNetworkV2IpScopeStaticIpPoolArgs',
    'ExternalNetworkV2NsxtNetworkArgs',
    'ExternalNetworkV2VsphereNetworkArgs',
    'ExternalNetworkVsphereNetworkArgs',
    'IndependentDiskMetadataEntryArgs',
    'LbServerPoolMemberArgs',
    'NetworkDirectMetadataEntryArgs',
    'NetworkIsolatedDhcpPoolArgs',
    'NetworkIsolatedMetadataEntryArgs',
    'NetworkIsolatedStaticIpPoolArgs',
    'NetworkIsolatedV2MetadataEntryArgs',
    'NetworkIsolatedV2StaticIpPoolArgs',
    'NetworkRoutedDhcpPoolArgs',
    'NetworkRoutedMetadataEntryArgs',
    'NetworkRoutedStaticIpPoolArgs',
    'NetworkRoutedV2MetadataEntryArgs',
    'NetworkRoutedV2StaticIpPoolArgs',
    'NsxtAlbPoolHealthMonitorArgs',
    'NsxtAlbPoolMemberArgs',
    'NsxtAlbPoolPersistenceProfileArgs',
    'NsxtAlbVirtualServiceServicePortArgs',
    'NsxtAppPortProfileAppPortArgs',
    'NsxtDistributedFirewallRuleArgs',
    'NsxtDynamicSecurityGroupCriteriaArgs',
    'NsxtDynamicSecurityGroupCriteriaRuleArgs',
    'NsxtDynamicSecurityGroupMemberVmArgs',
    'NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs',
    'NsxtEdgegatewaySubnetArgs',
    'NsxtEdgegatewaySubnetAllocatedIpArgs',
    'NsxtFirewallRuleArgs',
    'NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs',
    'NsxtNetworkDhcpPoolArgs',
    'NsxtNetworkImportedStaticIpPoolArgs',
    'NsxtSecurityGroupMemberVmArgs',
    'NsxvDhcpRelayRelayAgentArgs',
    'NsxvFirewallRuleDestinationArgs',
    'NsxvFirewallRuleServiceArgs',
    'NsxvFirewallRuleSourceArgs',
    'OrgLdapCustomSettingsArgs',
    'OrgLdapCustomSettingsGroupAttributesArgs',
    'OrgLdapCustomSettingsUserAttributesArgs',
    'OrgMetadataEntryArgs',
    'OrgVappLeaseArgs',
    'OrgVappTemplateLeaseArgs',
    'OrgVdcAccessControlSharedWithArgs',
    'OrgVdcComputeCapacityArgs',
    'OrgVdcComputeCapacityCpuArgs',
    'OrgVdcComputeCapacityMemoryArgs',
    'OrgVdcMetadataEntryArgs',
    'OrgVdcStorageProfileArgs',
    'VappAccessControlSharedWithArgs',
    'VappFirewallRulesRuleArgs',
    'VappLeaseArgs',
    'VappMetadataEntryArgs',
    'VappNatRulesRuleArgs',
    'VappNetworkDhcpPoolArgs',
    'VappNetworkStaticIpPoolArgs',
    'VappStaticRoutingRuleArgs',
    'VappVmCustomizationArgs',
    'VappVmDiskArgs',
    'VappVmInternalDiskArgs',
    'VappVmMetadataEntryArgs',
    'VappVmNetworkArgs',
    'VappVmOverrideTemplateDiskArgs',
    'VdcGroupParticipatingOrgVdcArgs',
    'VmCustomizationArgs',
    'VmDiskArgs',
    'VmInternalDiskArgs',
    'VmMetadataEntryArgs',
    'VmNetworkArgs',
    'VmOverrideTemplateDiskArgs',
    'VmSizingPolicyCpuArgs',
    'VmSizingPolicyMemoryArgs',
    'GetCatalogFilterArgs',
    'GetCatalogFilterMetadataArgs',
    'GetCatalogItemFilterArgs',
    'GetCatalogItemFilterMetadataArgs',
    'GetCatalogMediaFilterArgs',
    'GetCatalogMediaFilterMetadataArgs',
    'GetCatalogVappTemplateFilterArgs',
    'GetCatalogVappTemplateFilterMetadataArgs',
    'GetEdgegatewayFilterArgs',
    'GetNetworkDirectFilterArgs',
    'GetNetworkDirectFilterMetadataArgs',
    'GetNetworkIsolatedFilterArgs',
    'GetNetworkIsolatedFilterMetadataArgs',
    'GetNetworkIsolatedV2FilterArgs',
    'GetNetworkRoutedFilterArgs',
    'GetNetworkRoutedFilterMetadataArgs',
    'GetNetworkRoutedV2FilterArgs',
    'GetNsxtNetworkImportedFilterArgs',
    'GetOrgVdcMetadataEntryArgs',
    'GetSubscribedCatalogFilterArgs',
    'GetSubscribedCatalogFilterMetadataArgs',
]

@pulumi.input_type
class CatalogAccessControlSharedWithArgs:
    def __init__(__self__, *,
                 access_level: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 subject_name: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_level", access_level)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_name")

    @subject_name.setter
    def subject_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_name", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class CatalogItemMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CatalogMediaMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CatalogMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CatalogVappTemplateMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EdgeGatewayExternalNetworkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 enable_rate_limit: Optional[pulumi.Input[bool]] = None,
                 incoming_rate_limit: Optional[pulumi.Input[float]] = None,
                 outgoing_rate_limit: Optional[pulumi.Input[float]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeGatewayExternalNetworkSubnetArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if enable_rate_limit is not None:
            pulumi.set(__self__, "enable_rate_limit", enable_rate_limit)
        if incoming_rate_limit is not None:
            pulumi.set(__self__, "incoming_rate_limit", incoming_rate_limit)
        if outgoing_rate_limit is not None:
            pulumi.set(__self__, "outgoing_rate_limit", outgoing_rate_limit)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="enableRateLimit")
    def enable_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_rate_limit")

    @enable_rate_limit.setter
    def enable_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rate_limit", value)

    @property
    @pulumi.getter(name="incomingRateLimit")
    def incoming_rate_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "incoming_rate_limit")

    @incoming_rate_limit.setter
    def incoming_rate_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "incoming_rate_limit", value)

    @property
    @pulumi.getter(name="outgoingRateLimit")
    def outgoing_rate_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "outgoing_rate_limit")

    @outgoing_rate_limit.setter
    def outgoing_rate_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "outgoing_rate_limit", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgeGatewayExternalNetworkSubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeGatewayExternalNetworkSubnetArgs']]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class EdgeGatewayExternalNetworkSubnetArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 netmask: pulumi.Input[str],
                 ip_address: Optional[pulumi.Input[str]] = None,
                 suballocate_pools: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeGatewayExternalNetworkSubnetSuballocatePoolArgs']]]] = None,
                 use_for_default_route: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "netmask", netmask)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if suballocate_pools is not None:
            pulumi.set(__self__, "suballocate_pools", suballocate_pools)
        if use_for_default_route is not None:
            pulumi.set(__self__, "use_for_default_route", use_for_default_route)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: pulumi.Input[str]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="suballocatePools")
    def suballocate_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgeGatewayExternalNetworkSubnetSuballocatePoolArgs']]]]:
        return pulumi.get(self, "suballocate_pools")

    @suballocate_pools.setter
    def suballocate_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeGatewayExternalNetworkSubnetSuballocatePoolArgs']]]]):
        pulumi.set(self, "suballocate_pools", value)

    @property
    @pulumi.getter(name="useForDefaultRoute")
    def use_for_default_route(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_for_default_route")

    @use_for_default_route.setter
    def use_for_default_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_for_default_route", value)


@pulumi.input_type
class EdgeGatewayExternalNetworkSubnetSuballocatePoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class EdgeGatewayVpnLocalSubnetArgs:
    def __init__(__self__, *,
                 local_subnet_gateway: pulumi.Input[str],
                 local_subnet_mask: pulumi.Input[str],
                 local_subnet_name: pulumi.Input[str]):
        pulumi.set(__self__, "local_subnet_gateway", local_subnet_gateway)
        pulumi.set(__self__, "local_subnet_mask", local_subnet_mask)
        pulumi.set(__self__, "local_subnet_name", local_subnet_name)

    @property
    @pulumi.getter(name="localSubnetGateway")
    def local_subnet_gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "local_subnet_gateway")

    @local_subnet_gateway.setter
    def local_subnet_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_subnet_gateway", value)

    @property
    @pulumi.getter(name="localSubnetMask")
    def local_subnet_mask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "local_subnet_mask")

    @local_subnet_mask.setter
    def local_subnet_mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_subnet_mask", value)

    @property
    @pulumi.getter(name="localSubnetName")
    def local_subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "local_subnet_name")

    @local_subnet_name.setter
    def local_subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_subnet_name", value)


@pulumi.input_type
class EdgeGatewayVpnPeerSubnetArgs:
    def __init__(__self__, *,
                 peer_subnet_gateway: pulumi.Input[str],
                 peer_subnet_mask: pulumi.Input[str],
                 peer_subnet_name: pulumi.Input[str]):
        pulumi.set(__self__, "peer_subnet_gateway", peer_subnet_gateway)
        pulumi.set(__self__, "peer_subnet_mask", peer_subnet_mask)
        pulumi.set(__self__, "peer_subnet_name", peer_subnet_name)

    @property
    @pulumi.getter(name="peerSubnetGateway")
    def peer_subnet_gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "peer_subnet_gateway")

    @peer_subnet_gateway.setter
    def peer_subnet_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_subnet_gateway", value)

    @property
    @pulumi.getter(name="peerSubnetMask")
    def peer_subnet_mask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "peer_subnet_mask")

    @peer_subnet_mask.setter
    def peer_subnet_mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_subnet_mask", value)

    @property
    @pulumi.getter(name="peerSubnetName")
    def peer_subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "peer_subnet_name")

    @peer_subnet_name.setter
    def peer_subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_subnet_name", value)


@pulumi.input_type
class ExternalNetworkIpScopeArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 netmask: pulumi.Input[str],
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeStaticIpPoolArgs']]]] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "netmask", netmask)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: pulumi.Input[str]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeStaticIpPoolArgs']]]]:
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkIpScopeStaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)


@pulumi.input_type
class ExternalNetworkIpScopeStaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class ExternalNetworkV2IpScopeArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 prefix_length: pulumi.Input[int],
                 dns1: Optional[pulumi.Input[str]] = None,
                 dns2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 static_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeStaticIpPoolArgs']]]] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if static_ip_pools is not None:
            pulumi.set(__self__, "static_ip_pools", static_ip_pools)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="staticIpPools")
    def static_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeStaticIpPoolArgs']]]]:
        return pulumi.get(self, "static_ip_pools")

    @static_ip_pools.setter
    def static_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalNetworkV2IpScopeStaticIpPoolArgs']]]]):
        pulumi.set(self, "static_ip_pools", value)


@pulumi.input_type
class ExternalNetworkV2IpScopeStaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class ExternalNetworkV2NsxtNetworkArgs:
    def __init__(__self__, *,
                 nsxt_manager_id: pulumi.Input[str],
                 nsxt_segment_name: Optional[pulumi.Input[str]] = None,
                 nsxt_tier0_router_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "nsxt_manager_id", nsxt_manager_id)
        if nsxt_segment_name is not None:
            pulumi.set(__self__, "nsxt_segment_name", nsxt_segment_name)
        if nsxt_tier0_router_id is not None:
            pulumi.set(__self__, "nsxt_tier0_router_id", nsxt_tier0_router_id)

    @property
    @pulumi.getter(name="nsxtManagerId")
    def nsxt_manager_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nsxt_manager_id")

    @nsxt_manager_id.setter
    def nsxt_manager_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nsxt_manager_id", value)

    @property
    @pulumi.getter(name="nsxtSegmentName")
    def nsxt_segment_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nsxt_segment_name")

    @nsxt_segment_name.setter
    def nsxt_segment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_segment_name", value)

    @property
    @pulumi.getter(name="nsxtTier0RouterId")
    def nsxt_tier0_router_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nsxt_tier0_router_id")

    @nsxt_tier0_router_id.setter
    def nsxt_tier0_router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsxt_tier0_router_id", value)


@pulumi.input_type
class ExternalNetworkV2VsphereNetworkArgs:
    def __init__(__self__, *,
                 portgroup_id: pulumi.Input[str],
                 vcenter_id: pulumi.Input[str]):
        pulumi.set(__self__, "portgroup_id", portgroup_id)
        pulumi.set(__self__, "vcenter_id", vcenter_id)

    @property
    @pulumi.getter(name="portgroupId")
    def portgroup_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "portgroup_id")

    @portgroup_id.setter
    def portgroup_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "portgroup_id", value)

    @property
    @pulumi.getter(name="vcenterId")
    def vcenter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vcenter_id")

    @vcenter_id.setter
    def vcenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter_id", value)


@pulumi.input_type
class ExternalNetworkVsphereNetworkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 vcenter: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcenter", vcenter)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vcenter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vcenter")

    @vcenter.setter
    def vcenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter", value)


@pulumi.input_type
class IndependentDiskMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LbServerPoolMemberArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 ip_address: pulumi.Input[str],
                 monitor_port: pulumi.Input[int],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 weight: pulumi.Input[int],
                 id: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 min_connections: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "monitor_port", monitor_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if min_connections is not None:
            pulumi.set(__self__, "min_connections", min_connections)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="monitorPort")
    def monitor_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "monitor_port")

    @monitor_port.setter
    def monitor_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "monitor_port", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter(name="minConnections")
    def min_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_connections")

    @min_connections.setter
    def min_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_connections", value)


@pulumi.input_type
class NetworkDirectMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkIsolatedDhcpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str],
                 default_lease_time: Optional[pulumi.Input[int]] = None,
                 max_lease_time: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)
        if default_lease_time is not None:
            pulumi.set(__self__, "default_lease_time", default_lease_time)
        if max_lease_time is not None:
            pulumi.set(__self__, "max_lease_time", max_lease_time)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_lease_time")

    @default_lease_time.setter
    def default_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_lease_time", value)

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_lease_time")

    @max_lease_time.setter
    def max_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lease_time", value)


@pulumi.input_type
class NetworkIsolatedMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkIsolatedStaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NetworkIsolatedV2MetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkIsolatedV2StaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NetworkRoutedDhcpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str],
                 default_lease_time: Optional[pulumi.Input[int]] = None,
                 max_lease_time: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)
        if default_lease_time is not None:
            pulumi.set(__self__, "default_lease_time", default_lease_time)
        if max_lease_time is not None:
            pulumi.set(__self__, "max_lease_time", max_lease_time)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_lease_time")

    @default_lease_time.setter
    def default_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_lease_time", value)

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_lease_time")

    @max_lease_time.setter
    def max_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lease_time", value)


@pulumi.input_type
class NetworkRoutedMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkRoutedStaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NetworkRoutedV2MetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkRoutedV2StaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NsxtAlbPoolHealthMonitorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 system_defined: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if system_defined is not None:
            pulumi.set(__self__, "system_defined", system_defined)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="systemDefined")
    def system_defined(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_defined")

    @system_defined.setter
    def system_defined(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_defined", value)


@pulumi.input_type
class NsxtAlbPoolMemberArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 detailed_health_message: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 marked_down_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ratio: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if detailed_health_message is not None:
            pulumi.set(__self__, "detailed_health_message", detailed_health_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if marked_down_bies is not None:
            pulumi.set(__self__, "marked_down_bies", marked_down_bies)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ratio is not None:
            pulumi.set(__self__, "ratio", ratio)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="detailedHealthMessage")
    def detailed_health_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detailed_health_message")

    @detailed_health_message.setter
    def detailed_health_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detailed_health_message", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="markedDownBies")
    def marked_down_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "marked_down_bies")

    @marked_down_bies.setter
    def marked_down_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "marked_down_bies", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ratio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ratio")

    @ratio.setter
    def ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ratio", value)


@pulumi.input_type
class NsxtAlbPoolPersistenceProfileArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NsxtAlbVirtualServiceServicePortArgs:
    def __init__(__self__, *,
                 start_port: pulumi.Input[int],
                 type: pulumi.Input[str],
                 end_port: Optional[pulumi.Input[int]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "type", type)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)


@pulumi.input_type
class NsxtAppPortProfileAppPortArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "protocol", protocol)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class NsxtDistributedFirewallRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 network_context_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_groups_excluded: Optional[pulumi.Input[bool]] = None,
                 source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        if app_port_profile_ids is not None:
            pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_groups_excluded is not None:
            pulumi.set(__self__, "destination_groups_excluded", destination_groups_excluded)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if network_context_profile_ids is not None:
            pulumi.set(__self__, "network_context_profile_ids", network_context_profile_ids)
        if source_groups_excluded is not None:
            pulumi.set(__self__, "source_groups_excluded", source_groups_excluded)
        if source_ids is not None:
            pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "app_port_profile_ids")

    @app_port_profile_ids.setter
    def app_port_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_port_profile_ids", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationGroupsExcluded")
    def destination_groups_excluded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "destination_groups_excluded")

    @destination_groups_excluded.setter
    def destination_groups_excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destination_groups_excluded", value)

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ids")

    @destination_ids.setter
    def destination_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ids", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="networkContextProfileIds")
    def network_context_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "network_context_profile_ids")

    @network_context_profile_ids.setter
    def network_context_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_context_profile_ids", value)

    @property
    @pulumi.getter(name="sourceGroupsExcluded")
    def source_groups_excluded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "source_groups_excluded")

    @source_groups_excluded.setter
    def source_groups_excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "source_groups_excluded", value)

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ids")

    @source_ids.setter
    def source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ids", value)


@pulumi.input_type
class NsxtDynamicSecurityGroupCriteriaArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtDynamicSecurityGroupCriteriaRuleArgs']]]] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxtDynamicSecurityGroupCriteriaRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxtDynamicSecurityGroupCriteriaRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class NsxtDynamicSecurityGroupCriteriaRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NsxtDynamicSecurityGroupMemberVmArgs:
    def __init__(__self__, *,
                 vapp_id: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None):
        if vapp_id is not None:
            pulumi.set(__self__, "vapp_id", vapp_id)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vapp_id")

    @vapp_id.setter
    def vapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_id", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)


@pulumi.input_type
class NsxtEdgegatewayBgpIpPrefixListIpPrefixArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 network: pulumi.Input[str],
                 greater_than_or_equal_to: Optional[pulumi.Input[int]] = None,
                 less_than_or_equal_to: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "network", network)
        if greater_than_or_equal_to is not None:
            pulumi.set(__self__, "greater_than_or_equal_to", greater_than_or_equal_to)
        if less_than_or_equal_to is not None:
            pulumi.set(__self__, "less_than_or_equal_to", less_than_or_equal_to)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="greaterThanOrEqualTo")
    def greater_than_or_equal_to(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "greater_than_or_equal_to")

    @greater_than_or_equal_to.setter
    def greater_than_or_equal_to(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "greater_than_or_equal_to", value)

    @property
    @pulumi.getter(name="lessThanOrEqualTo")
    def less_than_or_equal_to(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "less_than_or_equal_to")

    @less_than_or_equal_to.setter
    def less_than_or_equal_to(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "less_than_or_equal_to", value)


@pulumi.input_type
class NsxtEdgegatewaySubnetArgs:
    def __init__(__self__, *,
                 allocated_ips: pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetAllocatedIpArgs']]],
                 gateway: pulumi.Input[str],
                 prefix_length: pulumi.Input[int],
                 primary_ip: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "allocated_ips", allocated_ips)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)

    @property
    @pulumi.getter(name="allocatedIps")
    def allocated_ips(self) -> pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetAllocatedIpArgs']]]:
        return pulumi.get(self, "allocated_ips")

    @allocated_ips.setter
    def allocated_ips(self, value: pulumi.Input[Sequence[pulumi.Input['NsxtEdgegatewaySubnetAllocatedIpArgs']]]):
        pulumi.set(self, "allocated_ips", value)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ip", value)


@pulumi.input_type
class NsxtEdgegatewaySubnetAllocatedIpArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NsxtFirewallRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 direction: pulumi.Input[str],
                 ip_protocol: pulumi.Input[str],
                 name: pulumi.Input[str],
                 app_port_profile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 destination_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "name", name)
        if app_port_profile_ids is not None:
            pulumi.set(__self__, "app_port_profile_ids", app_port_profile_ids)
        if destination_ids is not None:
            pulumi.set(__self__, "destination_ids", destination_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if source_ids is not None:
            pulumi.set(__self__, "source_ids", source_ids)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="appPortProfileIds")
    def app_port_profile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "app_port_profile_ids")

    @app_port_profile_ids.setter
    def app_port_profile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_port_profile_ids", value)

    @property
    @pulumi.getter(name="destinationIds")
    def destination_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ids")

    @destination_ids.setter
    def destination_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ids")

    @source_ids.setter
    def source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ids", value)


@pulumi.input_type
class NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs:
    def __init__(__self__, *,
                 ike_dh_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ike_encryption_algorithms: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ike_version: pulumi.Input[str],
                 tunnel_dh_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 tunnel_encryption_algorithms: pulumi.Input[Sequence[pulumi.Input[str]]],
                 dpd_probe_internal: Optional[pulumi.Input[int]] = None,
                 ike_digest_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ike_sa_lifetime: Optional[pulumi.Input[int]] = None,
                 tunnel_df_policy: Optional[pulumi.Input[str]] = None,
                 tunnel_digest_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel_pfs_enabled: Optional[pulumi.Input[bool]] = None,
                 tunnel_sa_lifetime: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ike_dh_groups", ike_dh_groups)
        pulumi.set(__self__, "ike_encryption_algorithms", ike_encryption_algorithms)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "tunnel_dh_groups", tunnel_dh_groups)
        pulumi.set(__self__, "tunnel_encryption_algorithms", tunnel_encryption_algorithms)
        if dpd_probe_internal is not None:
            pulumi.set(__self__, "dpd_probe_internal", dpd_probe_internal)
        if ike_digest_algorithms is not None:
            pulumi.set(__self__, "ike_digest_algorithms", ike_digest_algorithms)
        if ike_sa_lifetime is not None:
            pulumi.set(__self__, "ike_sa_lifetime", ike_sa_lifetime)
        if tunnel_df_policy is not None:
            pulumi.set(__self__, "tunnel_df_policy", tunnel_df_policy)
        if tunnel_digest_algorithms is not None:
            pulumi.set(__self__, "tunnel_digest_algorithms", tunnel_digest_algorithms)
        if tunnel_pfs_enabled is not None:
            pulumi.set(__self__, "tunnel_pfs_enabled", tunnel_pfs_enabled)
        if tunnel_sa_lifetime is not None:
            pulumi.set(__self__, "tunnel_sa_lifetime", tunnel_sa_lifetime)

    @property
    @pulumi.getter(name="ikeDhGroups")
    def ike_dh_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ike_dh_groups")

    @ike_dh_groups.setter
    def ike_dh_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ike_dh_groups", value)

    @property
    @pulumi.getter(name="ikeEncryptionAlgorithms")
    def ike_encryption_algorithms(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ike_encryption_algorithms")

    @ike_encryption_algorithms.setter
    def ike_encryption_algorithms(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ike_encryption_algorithms", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="tunnelDhGroups")
    def tunnel_dh_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tunnel_dh_groups")

    @tunnel_dh_groups.setter
    def tunnel_dh_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tunnel_dh_groups", value)

    @property
    @pulumi.getter(name="tunnelEncryptionAlgorithms")
    def tunnel_encryption_algorithms(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tunnel_encryption_algorithms")

    @tunnel_encryption_algorithms.setter
    def tunnel_encryption_algorithms(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tunnel_encryption_algorithms", value)

    @property
    @pulumi.getter(name="dpdProbeInternal")
    def dpd_probe_internal(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dpd_probe_internal")

    @dpd_probe_internal.setter
    def dpd_probe_internal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_probe_internal", value)

    @property
    @pulumi.getter(name="ikeDigestAlgorithms")
    def ike_digest_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ike_digest_algorithms")

    @ike_digest_algorithms.setter
    def ike_digest_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ike_digest_algorithms", value)

    @property
    @pulumi.getter(name="ikeSaLifetime")
    def ike_sa_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ike_sa_lifetime")

    @ike_sa_lifetime.setter
    def ike_sa_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_sa_lifetime", value)

    @property
    @pulumi.getter(name="tunnelDfPolicy")
    def tunnel_df_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_df_policy")

    @tunnel_df_policy.setter
    def tunnel_df_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_df_policy", value)

    @property
    @pulumi.getter(name="tunnelDigestAlgorithms")
    def tunnel_digest_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel_digest_algorithms")

    @tunnel_digest_algorithms.setter
    def tunnel_digest_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel_digest_algorithms", value)

    @property
    @pulumi.getter(name="tunnelPfsEnabled")
    def tunnel_pfs_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tunnel_pfs_enabled")

    @tunnel_pfs_enabled.setter
    def tunnel_pfs_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tunnel_pfs_enabled", value)

    @property
    @pulumi.getter(name="tunnelSaLifetime")
    def tunnel_sa_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_sa_lifetime")

    @tunnel_sa_lifetime.setter
    def tunnel_sa_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_sa_lifetime", value)


@pulumi.input_type
class NsxtNetworkDhcpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NsxtNetworkImportedStaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class NsxtSecurityGroupMemberVmArgs:
    def __init__(__self__, *,
                 vapp_id: Optional[pulumi.Input[str]] = None,
                 vapp_name: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None):
        if vapp_id is not None:
            pulumi.set(__self__, "vapp_id", vapp_id)
        if vapp_name is not None:
            pulumi.set(__self__, "vapp_name", vapp_name)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="vappId")
    def vapp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vapp_id")

    @vapp_id.setter
    def vapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_id", value)

    @property
    @pulumi.getter(name="vappName")
    def vapp_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vapp_name")

    @vapp_name.setter
    def vapp_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_name", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)


@pulumi.input_type
class NsxvDhcpRelayRelayAgentArgs:
    def __init__(__self__, *,
                 network_name: pulumi.Input[str],
                 gateway_ip_address: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "network_name", network_name)
        if gateway_ip_address is not None:
            pulumi.set(__self__, "gateway_ip_address", gateway_ip_address)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter(name="gatewayIpAddress")
    def gateway_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_ip_address")

    @gateway_ip_address.setter
    def gateway_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip_address", value)


@pulumi.input_type
class NsxvFirewallRuleDestinationArgs:
    def __init__(__self__, *,
                 exclude: Optional[pulumi.Input[bool]] = None,
                 gateway_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if gateway_interfaces is not None:
            pulumi.set(__self__, "gateway_interfaces", gateway_interfaces)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if org_networks is not None:
            pulumi.set(__self__, "org_networks", org_networks)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter(name="gatewayInterfaces")
    def gateway_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "gateway_interfaces")

    @gateway_interfaces.setter
    def gateway_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gateway_interfaces", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_sets")

    @ip_sets.setter
    def ip_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_sets", value)

    @property
    @pulumi.getter(name="orgNetworks")
    def org_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "org_networks")

    @org_networks.setter
    def org_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "org_networks", value)

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_ids", value)


@pulumi.input_type
class NsxvFirewallRuleServiceArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 port: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "protocol", protocol)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port", value)


@pulumi.input_type
class NsxvFirewallRuleSourceArgs:
    def __init__(__self__, *,
                 exclude: Optional[pulumi.Input[bool]] = None,
                 gateway_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if gateway_interfaces is not None:
            pulumi.set(__self__, "gateway_interfaces", gateway_interfaces)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if org_networks is not None:
            pulumi.set(__self__, "org_networks", org_networks)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter(name="gatewayInterfaces")
    def gateway_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "gateway_interfaces")

    @gateway_interfaces.setter
    def gateway_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gateway_interfaces", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_sets")

    @ip_sets.setter
    def ip_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_sets", value)

    @property
    @pulumi.getter(name="orgNetworks")
    def org_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "org_networks")

    @org_networks.setter
    def org_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "org_networks", value)

    @property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vm_ids", value)


@pulumi.input_type
class OrgLdapCustomSettingsArgs:
    def __init__(__self__, *,
                 authentication_method: pulumi.Input[str],
                 connector_type: pulumi.Input[str],
                 group_attributes: pulumi.Input['OrgLdapCustomSettingsGroupAttributesArgs'],
                 port: pulumi.Input[int],
                 server: pulumi.Input[str],
                 user_attributes: pulumi.Input['OrgLdapCustomSettingsUserAttributesArgs'],
                 base_distinguished_name: Optional[pulumi.Input[str]] = None,
                 is_ssl: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "group_attributes", group_attributes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "user_attributes", user_attributes)
        if base_distinguished_name is not None:
            pulumi.set(__self__, "base_distinguished_name", base_distinguished_name)
        if is_ssl is not None:
            pulumi.set(__self__, "is_ssl", is_ssl)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authentication_method")

    @authentication_method.setter
    def authentication_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "authentication_method", value)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_type", value)

    @property
    @pulumi.getter(name="groupAttributes")
    def group_attributes(self) -> pulumi.Input['OrgLdapCustomSettingsGroupAttributesArgs']:
        return pulumi.get(self, "group_attributes")

    @group_attributes.setter
    def group_attributes(self, value: pulumi.Input['OrgLdapCustomSettingsGroupAttributesArgs']):
        pulumi.set(self, "group_attributes", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> pulumi.Input['OrgLdapCustomSettingsUserAttributesArgs']:
        return pulumi.get(self, "user_attributes")

    @user_attributes.setter
    def user_attributes(self, value: pulumi.Input['OrgLdapCustomSettingsUserAttributesArgs']):
        pulumi.set(self, "user_attributes", value)

    @property
    @pulumi.getter(name="baseDistinguishedName")
    def base_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_distinguished_name")

    @base_distinguished_name.setter
    def base_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_distinguished_name", value)

    @property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_ssl")

    @is_ssl.setter
    def is_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class OrgLdapCustomSettingsGroupAttributesArgs:
    def __init__(__self__, *,
                 group_membership_identifier: pulumi.Input[str],
                 membership: pulumi.Input[str],
                 name: pulumi.Input[str],
                 object_class: pulumi.Input[str],
                 unique_identifier: pulumi.Input[str],
                 group_back_link_identifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "group_membership_identifier", group_membership_identifier)
        pulumi.set(__self__, "membership", membership)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_class", object_class)
        pulumi.set(__self__, "unique_identifier", unique_identifier)
        if group_back_link_identifier is not None:
            pulumi.set(__self__, "group_back_link_identifier", group_back_link_identifier)

    @property
    @pulumi.getter(name="groupMembershipIdentifier")
    def group_membership_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_membership_identifier")

    @group_membership_identifier.setter
    def group_membership_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_membership_identifier", value)

    @property
    @pulumi.getter
    def membership(self) -> pulumi.Input[str]:
        return pulumi.get(self, "membership")

    @membership.setter
    def membership(self, value: pulumi.Input[str]):
        pulumi.set(self, "membership", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_class")

    @object_class.setter
    def object_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_class", value)

    @property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unique_identifier")

    @unique_identifier.setter
    def unique_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "unique_identifier", value)

    @property
    @pulumi.getter(name="groupBackLinkIdentifier")
    def group_back_link_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_back_link_identifier")

    @group_back_link_identifier.setter
    def group_back_link_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_back_link_identifier", value)


@pulumi.input_type
class OrgLdapCustomSettingsUserAttributesArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 email: pulumi.Input[str],
                 given_name: pulumi.Input[str],
                 group_membership_identifier: pulumi.Input[str],
                 object_class: pulumi.Input[str],
                 surname: pulumi.Input[str],
                 telephone: pulumi.Input[str],
                 unique_identifier: pulumi.Input[str],
                 username: pulumi.Input[str],
                 group_back_link_identifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "group_membership_identifier", group_membership_identifier)
        pulumi.set(__self__, "object_class", object_class)
        pulumi.set(__self__, "surname", surname)
        pulumi.set(__self__, "telephone", telephone)
        pulumi.set(__self__, "unique_identifier", unique_identifier)
        pulumi.set(__self__, "username", username)
        if group_back_link_identifier is not None:
            pulumi.set(__self__, "group_back_link_identifier", group_back_link_identifier)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "given_name", value)

    @property
    @pulumi.getter(name="groupMembershipIdentifier")
    def group_membership_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_membership_identifier")

    @group_membership_identifier.setter
    def group_membership_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_membership_identifier", value)

    @property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_class")

    @object_class.setter
    def object_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_class", value)

    @property
    @pulumi.getter
    def surname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "surname")

    @surname.setter
    def surname(self, value: pulumi.Input[str]):
        pulumi.set(self, "surname", value)

    @property
    @pulumi.getter
    def telephone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "telephone")

    @telephone.setter
    def telephone(self, value: pulumi.Input[str]):
        pulumi.set(self, "telephone", value)

    @property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unique_identifier")

    @unique_identifier.setter
    def unique_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "unique_identifier", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="groupBackLinkIdentifier")
    def group_back_link_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_back_link_identifier")

    @group_back_link_identifier.setter
    def group_back_link_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_back_link_identifier", value)


@pulumi.input_type
class OrgMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OrgVappLeaseArgs:
    def __init__(__self__, *,
                 delete_on_storage_lease_expiration: pulumi.Input[bool],
                 maximum_runtime_lease_in_sec: pulumi.Input[int],
                 maximum_storage_lease_in_sec: pulumi.Input[int],
                 power_off_on_runtime_lease_expiration: pulumi.Input[bool]):
        pulumi.set(__self__, "delete_on_storage_lease_expiration", delete_on_storage_lease_expiration)
        pulumi.set(__self__, "maximum_runtime_lease_in_sec", maximum_runtime_lease_in_sec)
        pulumi.set(__self__, "maximum_storage_lease_in_sec", maximum_storage_lease_in_sec)
        pulumi.set(__self__, "power_off_on_runtime_lease_expiration", power_off_on_runtime_lease_expiration)

    @property
    @pulumi.getter(name="deleteOnStorageLeaseExpiration")
    def delete_on_storage_lease_expiration(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "delete_on_storage_lease_expiration")

    @delete_on_storage_lease_expiration.setter
    def delete_on_storage_lease_expiration(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_on_storage_lease_expiration", value)

    @property
    @pulumi.getter(name="maximumRuntimeLeaseInSec")
    def maximum_runtime_lease_in_sec(self) -> pulumi.Input[int]:
        return pulumi.get(self, "maximum_runtime_lease_in_sec")

    @maximum_runtime_lease_in_sec.setter
    def maximum_runtime_lease_in_sec(self, value: pulumi.Input[int]):
        pulumi.set(self, "maximum_runtime_lease_in_sec", value)

    @property
    @pulumi.getter(name="maximumStorageLeaseInSec")
    def maximum_storage_lease_in_sec(self) -> pulumi.Input[int]:
        return pulumi.get(self, "maximum_storage_lease_in_sec")

    @maximum_storage_lease_in_sec.setter
    def maximum_storage_lease_in_sec(self, value: pulumi.Input[int]):
        pulumi.set(self, "maximum_storage_lease_in_sec", value)

    @property
    @pulumi.getter(name="powerOffOnRuntimeLeaseExpiration")
    def power_off_on_runtime_lease_expiration(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "power_off_on_runtime_lease_expiration")

    @power_off_on_runtime_lease_expiration.setter
    def power_off_on_runtime_lease_expiration(self, value: pulumi.Input[bool]):
        pulumi.set(self, "power_off_on_runtime_lease_expiration", value)


@pulumi.input_type
class OrgVappTemplateLeaseArgs:
    def __init__(__self__, *,
                 delete_on_storage_lease_expiration: pulumi.Input[bool],
                 maximum_storage_lease_in_sec: pulumi.Input[int]):
        pulumi.set(__self__, "delete_on_storage_lease_expiration", delete_on_storage_lease_expiration)
        pulumi.set(__self__, "maximum_storage_lease_in_sec", maximum_storage_lease_in_sec)

    @property
    @pulumi.getter(name="deleteOnStorageLeaseExpiration")
    def delete_on_storage_lease_expiration(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "delete_on_storage_lease_expiration")

    @delete_on_storage_lease_expiration.setter
    def delete_on_storage_lease_expiration(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_on_storage_lease_expiration", value)

    @property
    @pulumi.getter(name="maximumStorageLeaseInSec")
    def maximum_storage_lease_in_sec(self) -> pulumi.Input[int]:
        return pulumi.get(self, "maximum_storage_lease_in_sec")

    @maximum_storage_lease_in_sec.setter
    def maximum_storage_lease_in_sec(self, value: pulumi.Input[int]):
        pulumi.set(self, "maximum_storage_lease_in_sec", value)


@pulumi.input_type
class OrgVdcAccessControlSharedWithArgs:
    def __init__(__self__, *,
                 access_level: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[str]] = None,
                 subject_name: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_level", access_level)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_name")

    @subject_name.setter
    def subject_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_name", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class OrgVdcComputeCapacityArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input['OrgVdcComputeCapacityCpuArgs'],
                 memory: pulumi.Input['OrgVdcComputeCapacityMemoryArgs']):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input['OrgVdcComputeCapacityCpuArgs']:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input['OrgVdcComputeCapacityCpuArgs']):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input['OrgVdcComputeCapacityMemoryArgs']:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input['OrgVdcComputeCapacityMemoryArgs']):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class OrgVdcComputeCapacityCpuArgs:
    def __init__(__self__, *,
                 allocated: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 reserved: Optional[pulumi.Input[int]] = None,
                 used: Optional[pulumi.Input[int]] = None):
        if allocated is not None:
            pulumi.set(__self__, "allocated", allocated)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allocated")

    @allocated.setter
    def allocated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allocated", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def reserved(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reserved")

    @reserved.setter
    def reserved(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserved", value)

    @property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used", value)


@pulumi.input_type
class OrgVdcComputeCapacityMemoryArgs:
    def __init__(__self__, *,
                 allocated: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 reserved: Optional[pulumi.Input[int]] = None,
                 used: Optional[pulumi.Input[int]] = None):
        if allocated is not None:
            pulumi.set(__self__, "allocated", allocated)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def allocated(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allocated")

    @allocated.setter
    def allocated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allocated", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def reserved(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reserved")

    @reserved.setter
    def reserved(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserved", value)

    @property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used", value)


@pulumi.input_type
class OrgVdcMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OrgVdcStorageProfileArgs:
    def __init__(__self__, *,
                 default: pulumi.Input[bool],
                 limit: pulumi.Input[int],
                 name: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 storage_used_in_mb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "name", name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if storage_used_in_mb is not None:
            pulumi.set(__self__, "storage_used_in_mb", storage_used_in_mb)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: pulumi.Input[bool]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="storageUsedInMb")
    def storage_used_in_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_used_in_mb")

    @storage_used_in_mb.setter
    def storage_used_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_used_in_mb", value)


@pulumi.input_type
class VappAccessControlSharedWithArgs:
    def __init__(__self__, *,
                 access_level: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[str]] = None,
                 subject_name: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_level", access_level)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_name")

    @subject_name.setter
    def subject_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_name", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class VappFirewallRulesRuleArgs:
    def __init__(__self__, *,
                 destination_ip: Optional[pulumi.Input[str]] = None,
                 destination_port: Optional[pulumi.Input[str]] = None,
                 destination_vm_id: Optional[pulumi.Input[str]] = None,
                 destination_vm_ip_type: Optional[pulumi.Input[str]] = None,
                 destination_vm_nic_id: Optional[pulumi.Input[int]] = None,
                 enable_logging: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[str]] = None,
                 source_vm_id: Optional[pulumi.Input[str]] = None,
                 source_vm_ip_type: Optional[pulumi.Input[str]] = None,
                 source_vm_nic_id: Optional[pulumi.Input[int]] = None):
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_vm_id is not None:
            pulumi.set(__self__, "destination_vm_id", destination_vm_id)
        if destination_vm_ip_type is not None:
            pulumi.set(__self__, "destination_vm_ip_type", destination_vm_ip_type)
        if destination_vm_nic_id is not None:
            pulumi.set(__self__, "destination_vm_nic_id", destination_vm_nic_id)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_vm_id is not None:
            pulumi.set(__self__, "source_vm_id", source_vm_id)
        if source_vm_ip_type is not None:
            pulumi.set(__self__, "source_vm_ip_type", source_vm_ip_type)
        if source_vm_nic_id is not None:
            pulumi.set(__self__, "source_vm_nic_id", source_vm_nic_id)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip", value)

    @property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port", value)

    @property
    @pulumi.getter(name="destinationVmId")
    def destination_vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_vm_id")

    @destination_vm_id.setter
    def destination_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_vm_id", value)

    @property
    @pulumi.getter(name="destinationVmIpType")
    def destination_vm_ip_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_vm_ip_type")

    @destination_vm_ip_type.setter
    def destination_vm_ip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_vm_ip_type", value)

    @property
    @pulumi.getter(name="destinationVmNicId")
    def destination_vm_nic_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "destination_vm_nic_id")

    @destination_vm_nic_id.setter
    def destination_vm_nic_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "destination_vm_nic_id", value)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_logging")

    @enable_logging.setter
    def enable_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter(name="sourceVmId")
    def source_vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_vm_id")

    @source_vm_id.setter
    def source_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_vm_id", value)

    @property
    @pulumi.getter(name="sourceVmIpType")
    def source_vm_ip_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_vm_ip_type")

    @source_vm_ip_type.setter
    def source_vm_ip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_vm_ip_type", value)

    @property
    @pulumi.getter(name="sourceVmNicId")
    def source_vm_nic_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_vm_nic_id")

    @source_vm_nic_id.setter
    def source_vm_nic_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_vm_nic_id", value)


@pulumi.input_type
class VappLeaseArgs:
    def __init__(__self__, *,
                 runtime_lease_in_sec: pulumi.Input[int],
                 storage_lease_in_sec: pulumi.Input[int]):
        pulumi.set(__self__, "runtime_lease_in_sec", runtime_lease_in_sec)
        pulumi.set(__self__, "storage_lease_in_sec", storage_lease_in_sec)

    @property
    @pulumi.getter(name="runtimeLeaseInSec")
    def runtime_lease_in_sec(self) -> pulumi.Input[int]:
        return pulumi.get(self, "runtime_lease_in_sec")

    @runtime_lease_in_sec.setter
    def runtime_lease_in_sec(self, value: pulumi.Input[int]):
        pulumi.set(self, "runtime_lease_in_sec", value)

    @property
    @pulumi.getter(name="storageLeaseInSec")
    def storage_lease_in_sec(self) -> pulumi.Input[int]:
        return pulumi.get(self, "storage_lease_in_sec")

    @storage_lease_in_sec.setter
    def storage_lease_in_sec(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_lease_in_sec", value)


@pulumi.input_type
class VappMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VappNatRulesRuleArgs:
    def __init__(__self__, *,
                 vm_id: pulumi.Input[str],
                 vm_nic_id: pulumi.Input[int],
                 external_ip: Optional[pulumi.Input[str]] = None,
                 external_port: Optional[pulumi.Input[int]] = None,
                 forward_to_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 mapping_mode: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vm_nic_id", vm_nic_id)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if forward_to_port is not None:
            pulumi.set(__self__, "forward_to_port", forward_to_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mapping_mode is not None:
            pulumi.set(__self__, "mapping_mode", mapping_mode)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="vmNicId")
    def vm_nic_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vm_nic_id")

    @vm_nic_id.setter
    def vm_nic_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_nic_id", value)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter(name="forwardToPort")
    def forward_to_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "forward_to_port")

    @forward_to_port.setter
    def forward_to_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_to_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="mappingMode")
    def mapping_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapping_mode")

    @mapping_mode.setter
    def mapping_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_mode", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class VappNetworkDhcpPoolArgs:
    def __init__(__self__, *,
                 start_address: pulumi.Input[str],
                 default_lease_time: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 end_address: Optional[pulumi.Input[str]] = None,
                 max_lease_time: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "start_address", start_address)
        if default_lease_time is not None:
            pulumi.set(__self__, "default_lease_time", default_lease_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if end_address is not None:
            pulumi.set(__self__, "end_address", end_address)
        if max_lease_time is not None:
            pulumi.set(__self__, "max_lease_time", max_lease_time)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)

    @property
    @pulumi.getter(name="defaultLeaseTime")
    def default_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_lease_time")

    @default_lease_time.setter
    def default_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_lease_time", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="maxLeaseTime")
    def max_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_lease_time")

    @max_lease_time.setter
    def max_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lease_time", value)


@pulumi.input_type
class VappNetworkStaticIpPoolArgs:
    def __init__(__self__, *,
                 end_address: pulumi.Input[str],
                 start_address: pulumi.Input[str]):
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "start_address", start_address)

    @property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_address", value)

    @property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_address", value)


@pulumi.input_type
class VappStaticRoutingRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 network_cidr: pulumi.Input[str],
                 next_hop_ip: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_cidr", network_cidr)
        pulumi.set(__self__, "next_hop_ip", next_hop_ip)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkCidr")
    def network_cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_cidr")

    @network_cidr.setter
    def network_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_cidr", value)

    @property
    @pulumi.getter(name="nextHopIp")
    def next_hop_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "next_hop_ip")

    @next_hop_ip.setter
    def next_hop_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_hop_ip", value)


@pulumi.input_type
class VappVmCustomizationArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 allow_local_admin_password: Optional[pulumi.Input[bool]] = None,
                 auto_generate_password: Optional[pulumi.Input[bool]] = None,
                 change_sid: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 initscript: Optional[pulumi.Input[str]] = None,
                 join_domain: Optional[pulumi.Input[bool]] = None,
                 join_domain_account_ou: Optional[pulumi.Input[str]] = None,
                 join_domain_name: Optional[pulumi.Input[str]] = None,
                 join_domain_password: Optional[pulumi.Input[str]] = None,
                 join_domain_user: Optional[pulumi.Input[str]] = None,
                 join_org_domain: Optional[pulumi.Input[bool]] = None,
                 must_change_password_on_first_login: Optional[pulumi.Input[bool]] = None,
                 number_of_auto_logons: Optional[pulumi.Input[int]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if allow_local_admin_password is not None:
            pulumi.set(__self__, "allow_local_admin_password", allow_local_admin_password)
        if auto_generate_password is not None:
            pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if change_sid is not None:
            pulumi.set(__self__, "change_sid", change_sid)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if initscript is not None:
            pulumi.set(__self__, "initscript", initscript)
        if join_domain is not None:
            pulumi.set(__self__, "join_domain", join_domain)
        if join_domain_account_ou is not None:
            pulumi.set(__self__, "join_domain_account_ou", join_domain_account_ou)
        if join_domain_name is not None:
            pulumi.set(__self__, "join_domain_name", join_domain_name)
        if join_domain_password is not None:
            pulumi.set(__self__, "join_domain_password", join_domain_password)
        if join_domain_user is not None:
            pulumi.set(__self__, "join_domain_user", join_domain_user)
        if join_org_domain is not None:
            pulumi.set(__self__, "join_org_domain", join_org_domain)
        if must_change_password_on_first_login is not None:
            pulumi.set(__self__, "must_change_password_on_first_login", must_change_password_on_first_login)
        if number_of_auto_logons is not None:
            pulumi.set(__self__, "number_of_auto_logons", number_of_auto_logons)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="allowLocalAdminPassword")
    def allow_local_admin_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_local_admin_password")

    @allow_local_admin_password.setter
    def allow_local_admin_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_local_admin_password", value)

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_generate_password")

    @auto_generate_password.setter
    def auto_generate_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_generate_password", value)

    @property
    @pulumi.getter(name="changeSid")
    def change_sid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "change_sid")

    @change_sid.setter
    def change_sid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change_sid", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def initscript(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "initscript")

    @initscript.setter
    def initscript(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initscript", value)

    @property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "join_domain")

    @join_domain.setter
    def join_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "join_domain", value)

    @property
    @pulumi.getter(name="joinDomainAccountOu")
    def join_domain_account_ou(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_account_ou")

    @join_domain_account_ou.setter
    def join_domain_account_ou(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_account_ou", value)

    @property
    @pulumi.getter(name="joinDomainName")
    def join_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_name")

    @join_domain_name.setter
    def join_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_name", value)

    @property
    @pulumi.getter(name="joinDomainPassword")
    def join_domain_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_password")

    @join_domain_password.setter
    def join_domain_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_password", value)

    @property
    @pulumi.getter(name="joinDomainUser")
    def join_domain_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_user")

    @join_domain_user.setter
    def join_domain_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_user", value)

    @property
    @pulumi.getter(name="joinOrgDomain")
    def join_org_domain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "join_org_domain")

    @join_org_domain.setter
    def join_org_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "join_org_domain", value)

    @property
    @pulumi.getter(name="mustChangePasswordOnFirstLogin")
    def must_change_password_on_first_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_change_password_on_first_login")

    @must_change_password_on_first_login.setter
    def must_change_password_on_first_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password_on_first_login", value)

    @property
    @pulumi.getter(name="numberOfAutoLogons")
    def number_of_auto_logons(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_auto_logons")

    @number_of_auto_logons.setter
    def number_of_auto_logons(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_auto_logons", value)


@pulumi.input_type
class VappVmDiskArgs:
    def __init__(__self__, *,
                 bus_number: pulumi.Input[str],
                 name: pulumi.Input[str],
                 unit_number: pulumi.Input[str],
                 size_in_mb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit_number", unit_number)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bus_number")

    @bus_number.setter
    def bus_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "bus_number", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit_number")

    @unit_number.setter
    def unit_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit_number", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_in_mb", value)


@pulumi.input_type
class VappVmInternalDiskArgs:
    def __init__(__self__, *,
                 bus_number: Optional[pulumi.Input[int]] = None,
                 bus_type: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 size_in_mb: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 thin_provisioned: Optional[pulumi.Input[bool]] = None,
                 unit_number: Optional[pulumi.Input[int]] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if thin_provisioned is not None:
            pulumi.set(__self__, "thin_provisioned", thin_provisioned)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bus_number")

    @bus_number.setter
    def bus_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bus_number", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_in_mb", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="thinProvisioned")
    def thin_provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "thin_provisioned")

    @thin_provisioned.setter
    def thin_provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "thin_provisioned", value)

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unit_number")

    @unit_number.setter
    def unit_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unit_number", value)


@pulumi.input_type
class VappVmMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VappVmNetworkArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 adapter_type: Optional[pulumi.Input[str]] = None,
                 connected: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_allocation_mode: Optional[pulumi.Input[str]] = None,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if adapter_type is not None:
            pulumi.set(__self__, "adapter_type", adapter_type)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_allocation_mode is not None:
            pulumi.set(__self__, "ip_allocation_mode", ip_allocation_mode)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adapter_type")

    @adapter_type.setter
    def adapter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adapter_type", value)

    @property
    @pulumi.getter
    def connected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "connected")

    @connected.setter
    def connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connected", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipAllocationMode")
    def ip_allocation_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_allocation_mode")

    @ip_allocation_mode.setter
    def ip_allocation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_allocation_mode", value)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VappVmOverrideTemplateDiskArgs:
    def __init__(__self__, *,
                 bus_number: pulumi.Input[int],
                 bus_type: pulumi.Input[str],
                 size_in_mb: pulumi.Input[int],
                 unit_number: pulumi.Input[int],
                 iops: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "bus_type", bus_type)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "unit_number", unit_number)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bus_number")

    @bus_number.setter
    def bus_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "bus_number", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_in_mb", value)

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unit_number")

    @unit_number.setter
    def unit_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "unit_number", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)


@pulumi.input_type
class VdcGroupParticipatingOrgVdcArgs:
    def __init__(__self__, *,
                 fault_domain_tag: Optional[pulumi.Input[str]] = None,
                 is_remote_org: Optional[pulumi.Input[bool]] = None,
                 network_provider_scope: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 org_name: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 site_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdc_id: Optional[pulumi.Input[str]] = None,
                 vdc_name: Optional[pulumi.Input[str]] = None):
        if fault_domain_tag is not None:
            pulumi.set(__self__, "fault_domain_tag", fault_domain_tag)
        if is_remote_org is not None:
            pulumi.set(__self__, "is_remote_org", is_remote_org)
        if network_provider_scope is not None:
            pulumi.set(__self__, "network_provider_scope", network_provider_scope)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_name is not None:
            pulumi.set(__self__, "org_name", org_name)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdc_id is not None:
            pulumi.set(__self__, "vdc_id", vdc_id)
        if vdc_name is not None:
            pulumi.set(__self__, "vdc_name", vdc_name)

    @property
    @pulumi.getter(name="faultDomainTag")
    def fault_domain_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fault_domain_tag")

    @fault_domain_tag.setter
    def fault_domain_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_domain_tag", value)

    @property
    @pulumi.getter(name="isRemoteOrg")
    def is_remote_org(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_remote_org")

    @is_remote_org.setter
    def is_remote_org(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_remote_org", value)

    @property
    @pulumi.getter(name="networkProviderScope")
    def network_provider_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_provider_scope")

    @network_provider_scope.setter
    def network_provider_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_provider_scope", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_name")

    @org_name.setter
    def org_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_name", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="vdcId")
    def vdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdc_id")

    @vdc_id.setter
    def vdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_id", value)

    @property
    @pulumi.getter(name="vdcName")
    def vdc_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdc_name")

    @vdc_name.setter
    def vdc_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdc_name", value)


@pulumi.input_type
class VmCustomizationArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 allow_local_admin_password: Optional[pulumi.Input[bool]] = None,
                 auto_generate_password: Optional[pulumi.Input[bool]] = None,
                 change_sid: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 initscript: Optional[pulumi.Input[str]] = None,
                 join_domain: Optional[pulumi.Input[bool]] = None,
                 join_domain_account_ou: Optional[pulumi.Input[str]] = None,
                 join_domain_name: Optional[pulumi.Input[str]] = None,
                 join_domain_password: Optional[pulumi.Input[str]] = None,
                 join_domain_user: Optional[pulumi.Input[str]] = None,
                 join_org_domain: Optional[pulumi.Input[bool]] = None,
                 must_change_password_on_first_login: Optional[pulumi.Input[bool]] = None,
                 number_of_auto_logons: Optional[pulumi.Input[int]] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if allow_local_admin_password is not None:
            pulumi.set(__self__, "allow_local_admin_password", allow_local_admin_password)
        if auto_generate_password is not None:
            pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if change_sid is not None:
            pulumi.set(__self__, "change_sid", change_sid)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if initscript is not None:
            pulumi.set(__self__, "initscript", initscript)
        if join_domain is not None:
            pulumi.set(__self__, "join_domain", join_domain)
        if join_domain_account_ou is not None:
            pulumi.set(__self__, "join_domain_account_ou", join_domain_account_ou)
        if join_domain_name is not None:
            pulumi.set(__self__, "join_domain_name", join_domain_name)
        if join_domain_password is not None:
            pulumi.set(__self__, "join_domain_password", join_domain_password)
        if join_domain_user is not None:
            pulumi.set(__self__, "join_domain_user", join_domain_user)
        if join_org_domain is not None:
            pulumi.set(__self__, "join_org_domain", join_org_domain)
        if must_change_password_on_first_login is not None:
            pulumi.set(__self__, "must_change_password_on_first_login", must_change_password_on_first_login)
        if number_of_auto_logons is not None:
            pulumi.set(__self__, "number_of_auto_logons", number_of_auto_logons)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="allowLocalAdminPassword")
    def allow_local_admin_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_local_admin_password")

    @allow_local_admin_password.setter
    def allow_local_admin_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_local_admin_password", value)

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_generate_password")

    @auto_generate_password.setter
    def auto_generate_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_generate_password", value)

    @property
    @pulumi.getter(name="changeSid")
    def change_sid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "change_sid")

    @change_sid.setter
    def change_sid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change_sid", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def initscript(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "initscript")

    @initscript.setter
    def initscript(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initscript", value)

    @property
    @pulumi.getter(name="joinDomain")
    def join_domain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "join_domain")

    @join_domain.setter
    def join_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "join_domain", value)

    @property
    @pulumi.getter(name="joinDomainAccountOu")
    def join_domain_account_ou(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_account_ou")

    @join_domain_account_ou.setter
    def join_domain_account_ou(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_account_ou", value)

    @property
    @pulumi.getter(name="joinDomainName")
    def join_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_name")

    @join_domain_name.setter
    def join_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_name", value)

    @property
    @pulumi.getter(name="joinDomainPassword")
    def join_domain_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_password")

    @join_domain_password.setter
    def join_domain_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_password", value)

    @property
    @pulumi.getter(name="joinDomainUser")
    def join_domain_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_domain_user")

    @join_domain_user.setter
    def join_domain_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_domain_user", value)

    @property
    @pulumi.getter(name="joinOrgDomain")
    def join_org_domain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "join_org_domain")

    @join_org_domain.setter
    def join_org_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "join_org_domain", value)

    @property
    @pulumi.getter(name="mustChangePasswordOnFirstLogin")
    def must_change_password_on_first_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_change_password_on_first_login")

    @must_change_password_on_first_login.setter
    def must_change_password_on_first_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password_on_first_login", value)

    @property
    @pulumi.getter(name="numberOfAutoLogons")
    def number_of_auto_logons(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_auto_logons")

    @number_of_auto_logons.setter
    def number_of_auto_logons(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_auto_logons", value)


@pulumi.input_type
class VmDiskArgs:
    def __init__(__self__, *,
                 bus_number: pulumi.Input[str],
                 name: pulumi.Input[str],
                 unit_number: pulumi.Input[str],
                 size_in_mb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit_number", unit_number)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bus_number")

    @bus_number.setter
    def bus_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "bus_number", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit_number")

    @unit_number.setter
    def unit_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit_number", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_in_mb", value)


@pulumi.input_type
class VmInternalDiskArgs:
    def __init__(__self__, *,
                 bus_number: Optional[pulumi.Input[int]] = None,
                 bus_type: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 size_in_mb: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None,
                 thin_provisioned: Optional[pulumi.Input[bool]] = None,
                 unit_number: Optional[pulumi.Input[int]] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if thin_provisioned is not None:
            pulumi.set(__self__, "thin_provisioned", thin_provisioned)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bus_number")

    @bus_number.setter
    def bus_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bus_number", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_in_mb", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="thinProvisioned")
    def thin_provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "thin_provisioned")

    @thin_provisioned.setter
    def thin_provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "thin_provisioned", value)

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unit_number")

    @unit_number.setter
    def unit_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unit_number", value)


@pulumi.input_type
class VmMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_access: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VmNetworkArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 adapter_type: Optional[pulumi.Input[str]] = None,
                 connected: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_allocation_mode: Optional[pulumi.Input[str]] = None,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if adapter_type is not None:
            pulumi.set(__self__, "adapter_type", adapter_type)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_allocation_mode is not None:
            pulumi.set(__self__, "ip_allocation_mode", ip_allocation_mode)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adapter_type")

    @adapter_type.setter
    def adapter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adapter_type", value)

    @property
    @pulumi.getter
    def connected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "connected")

    @connected.setter
    def connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connected", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipAllocationMode")
    def ip_allocation_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_allocation_mode")

    @ip_allocation_mode.setter
    def ip_allocation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_allocation_mode", value)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VmOverrideTemplateDiskArgs:
    def __init__(__self__, *,
                 bus_number: pulumi.Input[int],
                 bus_type: pulumi.Input[str],
                 size_in_mb: pulumi.Input[int],
                 unit_number: pulumi.Input[int],
                 iops: Optional[pulumi.Input[int]] = None,
                 storage_profile: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bus_number", bus_number)
        pulumi.set(__self__, "bus_type", bus_type)
        pulumi.set(__self__, "size_in_mb", size_in_mb)
        pulumi.set(__self__, "unit_number", unit_number)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bus_number")

    @bus_number.setter
    def bus_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "bus_number", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_in_mb", value)

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unit_number")

    @unit_number.setter
    def unit_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "unit_number", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile", value)


@pulumi.input_type
class VmSizingPolicyCpuArgs:
    def __init__(__self__, *,
                 cores_per_socket: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[str]] = None,
                 limit_in_mhz: Optional[pulumi.Input[str]] = None,
                 reservation_guarantee: Optional[pulumi.Input[str]] = None,
                 shares: Optional[pulumi.Input[str]] = None,
                 speed_in_mhz: Optional[pulumi.Input[str]] = None):
        if cores_per_socket is not None:
            pulumi.set(__self__, "cores_per_socket", cores_per_socket)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if limit_in_mhz is not None:
            pulumi.set(__self__, "limit_in_mhz", limit_in_mhz)
        if reservation_guarantee is not None:
            pulumi.set(__self__, "reservation_guarantee", reservation_guarantee)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if speed_in_mhz is not None:
            pulumi.set(__self__, "speed_in_mhz", speed_in_mhz)

    @property
    @pulumi.getter(name="coresPerSocket")
    def cores_per_socket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cores_per_socket")

    @cores_per_socket.setter
    def cores_per_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cores_per_socket", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="limitInMhz")
    def limit_in_mhz(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "limit_in_mhz")

    @limit_in_mhz.setter
    def limit_in_mhz(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_in_mhz", value)

    @property
    @pulumi.getter(name="reservationGuarantee")
    def reservation_guarantee(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reservation_guarantee")

    @reservation_guarantee.setter
    def reservation_guarantee(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reservation_guarantee", value)

    @property
    @pulumi.getter
    def shares(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shares")

    @shares.setter
    def shares(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shares", value)

    @property
    @pulumi.getter(name="speedInMhz")
    def speed_in_mhz(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speed_in_mhz")

    @speed_in_mhz.setter
    def speed_in_mhz(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed_in_mhz", value)


@pulumi.input_type
class VmSizingPolicyMemoryArgs:
    def __init__(__self__, *,
                 limit_in_mb: Optional[pulumi.Input[str]] = None,
                 reservation_guarantee: Optional[pulumi.Input[str]] = None,
                 shares: Optional[pulumi.Input[str]] = None,
                 size_in_mb: Optional[pulumi.Input[str]] = None):
        if limit_in_mb is not None:
            pulumi.set(__self__, "limit_in_mb", limit_in_mb)
        if reservation_guarantee is not None:
            pulumi.set(__self__, "reservation_guarantee", reservation_guarantee)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="limitInMb")
    def limit_in_mb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "limit_in_mb")

    @limit_in_mb.setter
    def limit_in_mb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_in_mb", value)

    @property
    @pulumi.getter(name="reservationGuarantee")
    def reservation_guarantee(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reservation_guarantee")

    @reservation_guarantee.setter
    def reservation_guarantee(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reservation_guarantee", value)

    @property
    @pulumi.getter
    def shares(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shares")

    @shares.setter
    def shares(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shares", value)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_in_mb")

    @size_in_mb.setter
    def size_in_mb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_in_mb", value)


@pulumi.input_type
class GetCatalogFilterArgs:
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['GetCatalogFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @earliest.setter
    def earliest(self, value: Optional[bool]):
        pulumi.set(self, "earliest", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[bool]):
        pulumi.set(self, "latest", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetCatalogFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetCatalogFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetCatalogFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetCatalogItemFilterArgs:
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['GetCatalogItemFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @earliest.setter
    def earliest(self, value: Optional[bool]):
        pulumi.set(self, "earliest", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[bool]):
        pulumi.set(self, "latest", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetCatalogItemFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetCatalogItemFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetCatalogItemFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetCatalogMediaFilterArgs:
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['GetCatalogMediaFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @earliest.setter
    def earliest(self, value: Optional[bool]):
        pulumi.set(self, "earliest", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[bool]):
        pulumi.set(self, "latest", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetCatalogMediaFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetCatalogMediaFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetCatalogMediaFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetCatalogVappTemplateFilterArgs:
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['GetCatalogVappTemplateFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @earliest.setter
    def earliest(self, value: Optional[bool]):
        pulumi.set(self, "earliest", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[bool]):
        pulumi.set(self, "latest", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetCatalogVappTemplateFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetCatalogVappTemplateFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetCatalogVappTemplateFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetEdgegatewayFilterArgs:
    def __init__(__self__, *,
                 name_regex: Optional[str] = None):
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetNetworkDirectFilterArgs:
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 metadatas: Optional[Sequence['GetNetworkDirectFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetNetworkDirectFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetNetworkDirectFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetNetworkDirectFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetNetworkIsolatedFilterArgs:
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 metadatas: Optional[Sequence['GetNetworkIsolatedFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetNetworkIsolatedFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetNetworkIsolatedFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetNetworkIsolatedFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetNetworkIsolatedV2FilterArgs:
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetNetworkRoutedFilterArgs:
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 metadatas: Optional[Sequence['GetNetworkRoutedFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetNetworkRoutedFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetNetworkRoutedFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetNetworkRoutedFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


@pulumi.input_type
class GetNetworkRoutedV2FilterArgs:
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetNsxtNetworkImportedFilterArgs:
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name_regex: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetOrgVdcMetadataEntryArgs:
    def __init__(__self__, *,
                 is_system: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 user_access: Optional[str] = None,
                 value: Optional[str] = None):
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_access is not None:
            pulumi.set(__self__, "user_access", user_access)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> Optional[str]:
        return pulumi.get(self, "user_access")

    @user_access.setter
    def user_access(self, value: Optional[str]):
        pulumi.set(self, "user_access", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetSubscribedCatalogFilterArgs:
    def __init__(__self__, *,
                 date: Optional[str] = None,
                 earliest: Optional[bool] = None,
                 latest: Optional[bool] = None,
                 metadatas: Optional[Sequence['GetSubscribedCatalogFilterMetadataArgs']] = None,
                 name_regex: Optional[str] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if earliest is not None:
            pulumi.set(__self__, "earliest", earliest)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name_regex is not None:
            pulumi.set(__self__, "name_regex", name_regex)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def earliest(self) -> Optional[bool]:
        return pulumi.get(self, "earliest")

    @earliest.setter
    def earliest(self, value: Optional[bool]):
        pulumi.set(self, "earliest", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[bool]):
        pulumi.set(self, "latest", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetSubscribedCatalogFilterMetadataArgs']]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetSubscribedCatalogFilterMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @name_regex.setter
    def name_regex(self, value: Optional[str]):
        pulumi.set(self, "name_regex", value)


@pulumi.input_type
class GetSubscribedCatalogFilterMetadataArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 is_system: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_api_search: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_api_search is not None:
            pulumi.set(__self__, "use_api_search", use_api_search)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[bool]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[bool]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useApiSearch")
    def use_api_search(self) -> Optional[bool]:
        return pulumi.get(self, "use_api_search")

    @use_api_search.setter
    def use_api_search(self, value: Optional[bool]):
        pulumi.set(self, "use_api_search", value)


